import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  View,
  StyleSheet,
  Text,
  TouchableOpacity,
  Dimensions,
  Alert,
  ActivityIndicator,
  Animated,
  Switch,
  Modal,
  TextInput,
  PermissionsAndroid,
  Platform,
  Image,
  ScrollView,
  Linking
} from 'react-native';
import MapView, { Marker, Polyline, Region } from 'react-native-maps';
import Geolocation from '@react-native-community/geolocation';
import socket from '../../socket';
import haversine from 'haversine-distance';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import Ionicons from 'react-native-vector-icons/Ionicons';
import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import axios from 'axios';
import Svg, { Path, Circle, Rect } from 'react-native-svg';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getBackendUrl } from '../../util/backendConfig';
import BikeIcon from '../../../assets001/bike.svg';
import LorryIcon from '../../../assets001/lorry.svg';
import TaxiIcon from '../../../assets001/taxi.svg';
import LogoImage from '../../../assets/logo4.png';
import TaxiAlertImage from '../../../assets/taxi.png';
import SearchingIllustration from '../../../assets/SearchingIllustration.png';
import DriverAssignedIllustration from '../../../assets/DriverAssignedIllustration.png';
import DriverArrivedIllustration from '../../../assets/DriverAssignedIllustration.png';
const RideTypeSelector = ({ selectedRideType, setSelectedRideType, estimatedPrice, distance, dynamicPrices }) => {
  return (
    <View style={styles.rideTypeContainer}>
      {/* Porter Button */}
      <TouchableOpacity
        style={[
          styles.rideTypeButton,
          selectedRideType === 'port' && styles.selectedRideTypeButton,
        ]}
        onPress={() => setSelectedRideType('port')}
        activeOpacity={0.7}
      >
        <View style={styles.rideIconContainer}>
          <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
        </View>
        <View style={styles.rideInfoContainer}>
          <Text style={[
            styles.rideTypeText,
            selectedRideType === 'port' && styles.selectedRideTypeText,
          ]}>CarGo Porter</Text>
          <Text style={[
            styles.rideDetailsText,
            selectedRideType === 'port' && styles.selectedRideDetailsText,
          ]}>Max 5 ton</Text>
          <Text style={styles.ridePriceText}>
            {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
          </Text>
        </View>
        {selectedRideType === 'port' && (
          <View style={styles.checkmarkContainer}>
            <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
          </View>
        )}
      </TouchableOpacity>
      {/* Taxi Button */}
      <TouchableOpacity
        style={[
          styles.rideTypeButton,
          selectedRideType === 'taxi' && styles.selectedRideTypeButton,
        ]}
        onPress={() => setSelectedRideType('taxi')}
        activeOpacity={0.7}
      >
        <View style={styles.rideIconContainer}>
          <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
        </View>
        <View style={styles.rideInfoContainer}>
          <Text style={[
            styles.rideTypeText,
            selectedRideType === 'taxi' && styles.selectedRideTypeText,
          ]}>Taxi</Text>
          <Text style={[
            styles.rideDetailsText,
            selectedRideType === 'taxi' && styles.selectedRideDetailsText,
          ]}>4 seats</Text>
          <Text style={styles.ridePriceText}>
            {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
          </Text>
        </View>
        {selectedRideType === 'taxi' && (
          <View style={styles.checkmarkContainer}>
            <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
          </View>
        )}
      </TouchableOpacity>
      {/* Bike Button */}
      <TouchableOpacity
        style={[
          styles.rideTypeButton,
          selectedRideType === 'bike' && styles.selectedRideTypeButton,
        ]}
        onPress={() => setSelectedRideType('bike')}
        activeOpacity={0.7}
      >
        <View style={styles.rideIconContainer}>
          <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
        </View>
        <View style={styles.rideInfoContainer}>
          <Text style={[
            styles.rideTypeText,
            selectedRideType === 'bike' && styles.selectedRideTypeText,
          ]}>Motorcycle</Text>
          <Text style={[
            styles.rideDetailsText,
            selectedRideType === 'bike' && styles.selectedRideDetailsText,
          ]}>1 person</Text>
          <Text style={styles.ridePriceText}>
            {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
          </Text>
        </View>
        {selectedRideType === 'bike' && (
          <View style={styles.checkmarkContainer}>
            <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
          </View>
        )}
      </TouchableOpacity>
    </View>
  );
};
interface LocationType {
  latitude: number;
  longitude: number;
}
interface SuggestionType {
  id: string;
  name: string;
  address: string;
  lat: string;
  lon: string;
  type: string;
  importance: number;
}
interface DriverType {
  driverId: string;
  name: string;
  location: {
    coordinates: [number, number]; // [longitude, latitude]
  };
  vehicleType: string;
  status?: string;
  driverMobile?: string;
}
interface TaxiContentProps {
  loadingLocation?: boolean;
  currentLocation: LocationType | null;
  lastSavedLocation: LocationType | null;
  pickup: string;
  dropoff: string;
  handlePickupChange: (text: string) => void;
  handleDropoffChange: (text: string) => void;
}
const TaxiContent: React.FC<TaxiContentProps> = ({
  loadingLocation: propLoadingLocation,
  currentLocation: propCurrentLocation,
  lastSavedLocation: propLastSavedLocation,
  pickup,
  dropoff,
  handlePickupChange: propHandlePickupChange,
  handleDropoffChange: propHandleDropoffChange,
}) => {
  const [isLoadingLocation, setIsLoadingLocation] = useState(true);
  const [selectedRideType, setSelectedRideType] = useState<string>('taxi');
  const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);
  const [showPricePanel, setShowPricePanel] = useState(false);
  const [wantReturn, setWantReturn] = useState(false);
  const [distance, setDistance] = useState<string>('');
  const [travelTime, setTravelTime] = useState<string>('');
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [bookingOTP, setBookingOTP] = useState<string>('');
  const [apiError, setApiError] = useState<string | null>(null);
  const [location, setLocation] = useState<LocationType | null>(null);
  const [pickupLocation, setPickupLocation] = useState<LocationType | null>(null);
  const [dropoffLocation, setDropoffLocation] = useState<LocationType | null>(null);
  const [routeCoords, setRouteCoords] = useState<LocationType[]>([]);
  const [currentRideId, setCurrentRideId] = useState<string | null>(null);
  const [rideStatus, setRideStatus] = useState<"idle" | "searching" | "onTheWay" | "arrived" | "started" | "completed">("idle");
  const [driverId, setDriverId] = useState<string | null>(null);
  const [driverLocation, setDriverLocation] = useState<LocationType | null>(null);
  const [travelledKm, setTravelledKm] = useState(0);
  const [lastCoord, setLastCoord] = useState<LocationType | null>(null);
  const [nearbyDrivers, setNearbyDrivers] = useState<DriverType[]>([]);
  const [nearbyDriversCount, setNearbyDriversCount] = useState<number>(0);
  const [pickupSuggestions, setPickupSuggestions] = useState<SuggestionType[]>([]);
  const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);
  const [dropoffSuggestions, setDropoffSuggestions] = useState<SuggestionType[]>([]);
  const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);
  const [pickupLoading, setPickupLoading] = useState(false);
  const [dropoffLoading, setDropoffLoading] = useState(false);
  const [suggestionsError, setSuggestionsError] = useState<string | null>(null);
  const [pickupCache, setPickupCache] = useState<Record<string, SuggestionType[]>>({});
  const [dropoffCache, setDropoffCache] = useState<Record<string, SuggestionType[]>>({});
  const [isPickupCurrent, setIsPickupCurrent] = useState(false);
  const [socketConnected, setSocketConnected] = useState(false);
  const [driverArrivedAlertShown, setDriverArrivedAlertShown] = useState(false);
  const [rideCompletedAlertShown, setRideCompletedAlertShown] = useState(false);
  const [acceptedDriver, setAcceptedDriver] = useState<DriverType | null>(null);
  const [isBooking, setIsBooking] = useState(false);
  const [driverName, setDriverName] = useState<string | null>(null);
  const [driverMobile, setDriverMobile] = useState<string | null>(null);
  const [bookedAt, setBookedAt] = useState<Date | null>(null);
  const [showPickupMapModal, setShowPickupMapModal] = useState(false);
  const [showDropoffMapModal, setShowDropoffMapModal] = useState(false);
  const [showRouteDetailsModal, setShowRouteDetailsModal] = useState(false);
  const [dynamicPrices, setDynamicPrices] = useState({
    bike: 0,
    taxi: 0,
    port: 0,
  });
  // New state to control when to show ride options
  const [showRideOptions, setShowRideOptions] = useState(false);
  // New state for driver assigned modal
  const [showDriverAssignedModal, setShowDriverAssignedModal] = useState(false);
  const [showDriverArrivedOverlay, setShowDriverArrivedOverlay] = useState(false);
  // New state for bill modal
  const [showBillModal, setShowBillModal] = useState(false);
  const [billDetails, setBillDetails] = useState({
    distance: '0 km',
    travelTime: '0 mins',
    charge: 0,
    driverName: '',
    vehicleType: ''
  });
  // Map selection states
  const [showPickupSelector, setShowPickupSelector] = useState(false);
  const [showDropoffSelector, setShowDropoffSelector] = useState(false);
 
  const pickupDebounceTimer = useRef<NodeJS.Timeout | null>(null);
  const dropoffDebounceTimer = useRef<NodeJS.Timeout | null>(null);
  const regionChangeTimer = useRef<NodeJS.Timeout | null>(null);
  const [priceLoading, setPriceLoading] = useState(false);
  const panelAnimation = useRef(new Animated.Value(0)).current;
  const mapRef = useRef<MapView | null>(null);
 
  const fallbackLocation: LocationType = {
    latitude: 11.3312971,
    longitude: 77.7167303,
  };
  // Distance calculation
  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
    const R = 6371; // Earth's radius in kilometers
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const distance = R * c;
    console.log(`📍 Distance calculation: (${lat1},${lon1}) to (${lat2},${lon2}) = ${distance.toFixed(4)} km`);
    return distance;
  };
  const calculateDistanceInMeters = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
    const R = 6371;
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a =
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const distanceKm = R * c;
    return distanceKm * 1000;
  };
  // Fetch nearby drivers
  const fetchNearbyDrivers = (latitude: number, longitude: number) => {
    console.log(`Fetching nearby drivers for lat: ${latitude}, lng: ${longitude}`);
    if (socket && socketConnected) {
      socket.emit("requestNearbyDrivers", {
        latitude,
        longitude,
        radius: 10000,
        vehicleType: selectedRideType
      });
      console.log("Emitted requestNearbyDrivers event");
    } else {
      console.log("Socket not connected, attempting to reconnect...");
      socket.connect();
      socket.once("connect", () => {
        console.log("Socket reconnected, emitting requestNearbyDrivers");
        socket.emit("requestNearbyDrivers", {
          latitude,
          longitude,
          radius: 10000,
          vehicleType: selectedRideType
        });
      });
    }
  };
  // Handle nearby drivers response
  useEffect(() => {
    const handleNearbyDriversResponse = (data: { drivers: DriverType[] }) => {
      console.log('📍 Received nearby drivers response:', JSON.stringify(data, null, 2));
      if (!location) {
        console.log("❌ No location available, can't process drivers");
        return;
      }
      console.log('📍 User current location:', location);
      console.log('📍 Number of drivers received:', data.drivers.length);
      // Active ride: Show only accepted driver
      if (currentRideId && acceptedDriver) {
        console.log('🚗 Active ride - Showing only accepted driver');
        const acceptedDriverData = data.drivers.find(d => d.driverId === acceptedDriver.driverId);
        if (acceptedDriverData) {
          setNearbyDrivers([acceptedDriverData]);
          setNearbyDriversCount(1);
          console.log('✅ Accepted driver found and displayed');
        } else {
          setNearbyDrivers([]);
          setNearbyDriversCount(0);
          console.log('❌ Accepted driver not found in response');
        }
        return;
      }
      // No active ride: Show all online drivers
      const filteredDrivers = data.drivers
        .filter(driver => {
          console.log(`🔍 Processing driver: ${driver.driverId} (${driver.name})`);
          console.log(`📍 Driver location: ${driver.location.coordinates[1]}, ${driver.location.coordinates[0]}`);
    
          // Check driver status
          if (driver.status && !["Live", "online", "onRide", "available"].includes(driver.status)) {
            console.log(`❌ Driver ${driver.driverId} filtered out by status: ${driver.status}`);
            return false;
          }
    
          // Calculate distance
          const distance = calculateDistance(
            location.latitude,
            location.longitude,
            driver.location.coordinates[1],
            driver.location.coordinates[0]
          );
          console.log(`📏 Driver ${driver.driverId} distance: ${distance.toFixed(2)} km`);
    
          const isWithinRange = distance <= 10;
          console.log(`✅ Driver ${driver.driverId} within 10km: ${isWithinRange}`);
    
          return isWithinRange;
        })
        .sort((a, b) => {
          const distA = calculateDistance(location.latitude, location.longitude, a.location.coordinates[1], a.location.coordinates[0]);
          const distB = calculateDistance(location.latitude, location.longitude, b.location.coordinates[1], b.location.coordinates[0]);
          return distA - distB;
        })
        .slice(0, 10);
      console.log('✅ Filtered drivers count:', filteredDrivers.length);
      console.log('📍 Final drivers to display:', filteredDrivers);
      setNearbyDrivers(filteredDrivers);
      setNearbyDriversCount(filteredDrivers.length);
    };
    socket.on("nearbyDriversResponse", handleNearbyDriversResponse);
    return () => socket.off("nearbyDriversResponse", handleNearbyDriversResponse);
  }, [location, socketConnected, currentRideId, acceptedDriver]);
  // Request location on component mount
  useEffect(() => {
    const requestLocation = async () => {
      setIsLoadingLocation(true);
      if (propCurrentLocation) {
        console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using current location from props:`, propCurrentLocation);
        setLocation(propCurrentLocation);
        global.currentLocation = propCurrentLocation;
        fetchNearbyDrivers(propCurrentLocation.latitude, propCurrentLocation.longitude);
        setIsLoadingLocation(false);
        return;
      }
      if (propLastSavedLocation) {
        console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using last saved location from props:`, propLastSavedLocation);
        setLocation(propLastSavedLocation);
        global.currentLocation = propLastSavedLocation;
        fetchNearbyDrivers(propLastSavedLocation.latitude, propLastSavedLocation.longitude);
        setIsLoadingLocation(false);
        return;
      }
      console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using fallback location:`, fallbackLocation);
      setLocation(fallbackLocation);
      global.currentLocation = fallbackLocation;
      fetchNearbyDrivers(fallbackLocation.latitude, fallbackLocation.longitude);
      setIsLoadingLocation(false);
      if (Platform.OS === "android") {
        const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
        if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
          console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location permission denied`);
          Alert.alert("Permission Denied", "Location permission is required to proceed.");
          return;
        }
      }
      Geolocation.getCurrentPosition(
        (pos) => {
          const loc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
          console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Live location fetched successfully:`, loc);
          setLocation(loc);
          global.currentLocation = loc;
          fetchNearbyDrivers(loc.latitude, loc.longitude);
        },
        (err) => {
          console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location error:`, err.code, err.message);
          Alert.alert("Location Error", "Could not fetch location. Please try again or check your GPS settings.");
        },
        { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000, distanceFilter: 10 }
      );
    };
    requestLocation();
  }, [propCurrentLocation, propLastSavedLocation]);
  // Socket connection handlers
  useEffect(() => {
    const handleConnect = async () => {
      console.log("Socket connected");
      setSocketConnected(true);
      if (location) fetchNearbyDrivers(location.latitude, location.longitude);
      try {
        const userId = await AsyncStorage.getItem('userId');
        if (userId) {
          socket.emit('registerUser', { userId });
          console.log('👤 User registered with socket:', userId);
        }
      } catch (error) {
        console.error('Error registering user with socket:', error);
      }
    };
    const handleDisconnect = () => { console.log("Socket disconnected"); setSocketConnected(false); };
    const handleConnectError = (error: Error) => { console.error("Socket connection error:", error); setSocketConnected(false); };
    socket.on("connect", handleConnect);
    socket.on("disconnect", handleDisconnect);
    socket.on("connect_error", handleConnectError);
    setSocketConnected(socket.connected);
    return () => {
      socket.off("connect", handleConnect);
      socket.off("disconnect", handleDisconnect);
      socket.off("connect_error", handleConnectError);
    };
  }, [location]);
  // Location update interval
  useEffect(() => {
    const interval = setInterval(() => {
      if (location && (rideStatus === "idle" || rideStatus === "searching")) {
        Geolocation.getCurrentPosition(
          (pos) => {
            const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
            setLocation(newLoc);
            if (isPickupCurrent && dropoffLocation) {
              setPickupLocation(newLoc);
              fetchRoute(newLoc);
            }
            fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
          },
          (err) => { console.error("Live location error:", err); },
          { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
        );
      }
    }, 5000);
    return () => clearInterval(interval);
  }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected]);
  // Driver location updates
  useEffect(() => {
    const handleDriverLiveLocationUpdate = (data: { driverId: string; lat: number; lng: number; status?: string }) => {
      console.log('📍 Received driver location update:', data);
      // If we have an active ride and this is the accepted driver
      if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
        console.log('📍 Updating accepted driver location during active ride');
  
        // Update driver location state
        const driverCoords = { latitude: data.lat, longitude: data.lng };
        setDriverLocation(driverCoords);
  
        // Update the driver in nearbyDrivers
        setNearbyDrivers(prev => {
          if (prev.length > 0 && prev[0].driverId === data.driverId) {
            return [{
              ...prev[0],
              location: { coordinates: [data.lng, data.lat] },
              status: data.status || "onTheWay"
            }];
          }
          return prev;
        });
  
        // Calculate distance if needed
        if (lastCoord) {
          const dist = haversine(lastCoord, driverCoords);
          setTravelledKm(prev => prev + dist / 1000);
        }
        setLastCoord(driverCoords);
  
        // Check if driver is near pickup location
        if (pickupLocation && rideStatus === "onTheWay") {
          const distanceToPickup = calculateDistanceInMeters(
            driverCoords.latitude,
            driverCoords.longitude,
            pickupLocation.latitude,
            pickupLocation.longitude
          );
          console.log(`📍 Driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
          if (distanceToPickup <= 50 && !driverArrivedAlertShown) {
            console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED');
            setRideStatus("arrived");
            setDriverArrivedAlertShown(true);
            setShowDriverArrivedOverlay(true);
      
            // Update UI state
            setNearbyDrivers(prev => {
              if (prev.length > 0 && prev[0].driverId === data.driverId) {
                return [{
                  ...prev[0],
                  status: "arrived"
                }];
              }
              return prev;
            });
      
            // Get customer ID for OTP
            AsyncStorage.getItem('customerId').then(customerId => {
              const otp = customerId ? customerId.slice(-4) : '1234';
              // Alert.alert removed, using overlay instead
            });
          }
        }
    
        // Check if driver is near dropoff location
        if (dropoffLocation && rideStatus === "started") {
          const distanceToDropoff = calculateDistanceInMeters(
            driverCoords.latitude,
            driverCoords.longitude,
            dropoffLocation.latitude,
            dropoffLocation.longitude
          );
    
          if (distanceToDropoff <= 50 && !rideCompletedAlertShown) {
            // Notify the backend
            socket.emit('driverReachedDestination', {
              rideId: currentRideId,
              driverId: data.driverId,
              distance: travelledKm.toFixed(2)
            });
      
            // Set a flag to prevent multiple notifications
            setRideCompletedAlertShown(true);
          }
        }
        return; // Ignore other drivers during active ride
      }
      // If no active ride, update all drivers
      setNearbyDrivers((prev) => {
        const existingIndex = prev.findIndex(d => d.driverId === data.driverId);
        if (existingIndex >= 0) {
          const updated = [...prev];
          updated[existingIndex] = {
            ...updated[existingIndex],
            location: { coordinates: [data.lng, data.lat] },
            status: data.status || "Live"
          };
          return updated;
        } else {
          if (data.status && !["Live", "online", "onRide", "available"].includes(data.status)) return prev;
          return [
            ...prev,
            {
              driverId: data.driverId,
              name: `Driver ${data.driverId}`,
              location: { coordinates: [data.lng, data.lat] },
              vehicleType: "taxi",
              status: data.status || "Live"
            }
          ];
        }
      });
    };
    socket.on("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
    return () => socket.off("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
  }, [location, currentRideId, acceptedDriver, lastCoord, pickupLocation, dropoffLocation, rideStatus, driverArrivedAlertShown, rideCompletedAlertShown]);
  // Polling for driver arrival
  useEffect(() => {
    let intervalId;
    if (rideStatus === "onTheWay" && pickupLocation && driverLocation && !driverArrivedAlertShown) {
      intervalId = setInterval(() => {
        const distanceToPickup = calculateDistanceInMeters(
          driverLocation.latitude,
          driverLocation.longitude,
          pickupLocation.latitude,
          pickupLocation.longitude
        );
        console.log(`📍 Polling driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
        if (distanceToPickup <= 50) {
          console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED FROM POLLING');
          setRideStatus("arrived");
          setDriverArrivedAlertShown(true);
          setShowDriverArrivedOverlay(true);
          AsyncStorage.getItem('customerId').then(customerId => {
            const otp = customerId ? customerId.slice(-4) : '1234';
            // Alert.alert removed, using overlay
          });
          clearInterval(intervalId);
        }
      }, 2000); // Poll every 2 seconds
    }
    return () => {
      if (intervalId) clearInterval(intervalId);
    };
  }, [rideStatus, pickupLocation, driverLocation, driverArrivedAlertShown, acceptedDriver]);
  // Ride completion event handler
  useEffect(() => {
    const handleRideCompleted = (data: any) => {
      console.log('🎉 Ride completed event received:', data);
      // Update ride status to completed
      setRideStatus("completed");
      // Calculate final distance and time if not provided
      const finalDistance = data.distance || travelledKm.toFixed(2);
      const finalTime = data.travelTime || travelTime;
      const finalCharge = data.charge || estimatedPrice;
     
      // Set bill details
      setBillDetails({
        distance: `${finalDistance} km`,
        travelTime: finalTime,
        charge: finalCharge,
        driverName: acceptedDriver?.name || 'Driver',
        vehicleType: acceptedDriver?.vehicleType || selectedRideType
      });
     
      // Show bill modal instead of alert
      setShowBillModal(true);
      // Clear ride data from storage
      AsyncStorage.removeItem('currentRideId');
      AsyncStorage.removeItem('acceptedDriver');
      AsyncStorage.removeItem('bookedAt');
      setBookedAt(null);
    };
    socket.on("rideCompleted", handleRideCompleted);
    return () => {
      socket.off("rideCompleted", handleRideCompleted);
    };
  }, [travelledKm, travelTime, estimatedPrice, acceptedDriver, selectedRideType]);
  // Ride status update handler
  useEffect(() => {
    const handleRideStatusUpdate = (data: any) => {
      console.log('📋 Ride status update received:', data);
      if (data.rideId === currentRideId) {
        if (data.status === 'completed') {
          // Handle ride completion
          setRideStatus("completed");
    
          // Calculate final distance and time if not provided
          const finalDistance = data.distance || travelledKm.toFixed(2);
          const finalTime = data.travelTime || travelTime;
          const finalCharge = data.charge || estimatedPrice;
         
          // Set bill details
          setBillDetails({
            distance: `${finalDistance} km`,
            travelTime: finalTime,
            charge: finalCharge,
            driverName: acceptedDriver?.name || 'Driver',
            vehicleType: acceptedDriver?.vehicleType || selectedRideType
          });
         
          // Show bill modal instead of alert
          setShowBillModal(true);
    
          // Clear ride data from storage
          AsyncStorage.removeItem('currentRideId');
          AsyncStorage.removeItem('acceptedDriver');
          AsyncStorage.removeItem('bookedAt');
          setBookedAt(null);
        } else if (data.status === 'started') {
          setShowDriverArrivedOverlay(false);
        }
      }
    };
    socket.on("rideStatusUpdate", handleRideStatusUpdate);
    return () => {
      socket.off("rideStatusUpdate", handleRideStatusUpdate);
    };
  }, [currentRideId, travelledKm, travelTime, estimatedPrice, acceptedDriver, selectedRideType]);
  // Driver offline handler
  useEffect(() => {
    const handleDriverOffline = (data: { driverId: string }) => {
      console.log(`Driver ${data.driverId} went offline`);
      // Don't remove accepted driver during active ride
      if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
        console.log('⚠️ Accepted driver went offline during active ride');
        return;
      }
      setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
      setNearbyDriversCount(prev => Math.max(0, prev - 1));
    };
    socket.on("driverOffline", handleDriverOffline);
    return () => socket.off("driverOffline", handleDriverOffline);
  }, [currentRideId, acceptedDriver]);
  // Driver status update handler
  useEffect(() => {
    const handleDriverStatusUpdate = (data: { driverId: string; status: string }) => {
      console.log(`Driver ${data.driverId} status updated to: ${data.status}`);
      // Don't update accepted driver status during active ride
      if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
        console.log('Keeping accepted driver status as onTheWay');
        return;
      }
      if (data.status === "offline") {
        setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
        setNearbyDriversCount(prev => Math.max(0, prev - 1));
        return;
      }
      setNearbyDrivers(prev => prev.map(driver =>
        driver.driverId === data.driverId ? { ...driver, status: data.status } : driver
      ));
    };
    socket.on("driverStatusUpdate", handleDriverStatusUpdate);
    return () => socket.off("driverStatusUpdate", handleDriverStatusUpdate);
  }, [currentRideId, acceptedDriver]);
  // Recover ride data on component mount
  useEffect(() => {
    const recoverRideData = async () => {
      try {
        const savedRideId = await AsyncStorage.getItem('currentRideId');
        const savedDriverData = await AsyncStorage.getItem('acceptedDriver');
        const savedRideStatus = await AsyncStorage.getItem('rideStatus');
        const savedBookedAt = await AsyncStorage.getItem('bookedAt');
        const savedBookingOTP = await AsyncStorage.getItem('bookingOTP');
        const savedPickup = await AsyncStorage.getItem('ridePickup');
        const savedDropoff = await AsyncStorage.getItem('rideDropoff');
        const savedPickupLoc = await AsyncStorage.getItem('ridePickupLocation');
        const savedDropoffLoc = await AsyncStorage.getItem('rideDropoffLocation');
        const savedRoute = await AsyncStorage.getItem('rideRouteCoords');
        const savedDist = await AsyncStorage.getItem('rideDistance');
        const savedTime = await AsyncStorage.getItem('rideTravelTime');
        const savedType = await AsyncStorage.getItem('rideSelectedType');
        const savedReturn = await AsyncStorage.getItem('rideWantReturn');
        const savedPrice = await AsyncStorage.getItem('rideEstimatedPrice');
       
        if (savedRideId) {
          console.log('🔄 Recovering ride data from storage:', savedRideId);
          setCurrentRideId(savedRideId);
         
          // Set the ride status from storage if available
          if (savedRideStatus) {
            setRideStatus(savedRideStatus as any);
          }
         
          // Set the booking OTP if available
          if (savedBookingOTP) {
            setBookingOTP(savedBookingOTP);
          }
         
          // Set the bookedAt time if available
          if (savedBookedAt) {
            setBookedAt(new Date(savedBookedAt));
          }
         
          if (savedDriverData) {
            const driverData = JSON.parse(savedDriverData);
            setAcceptedDriver(driverData);
            setDriverName(driverData.name);
            setDriverMobile(driverData.driverMobile);
           
            // Show appropriate UI based on ride status
            if (savedRideStatus === 'onTheWay') {
              setShowDriverAssignedModal(true);
            } else if (savedRideStatus === 'arrived') {
              setShowDriverArrivedOverlay(true);
            } else if (savedRideStatus === 'started') {
              // Ride is in progress
              setShowDriverAssignedModal(false);
              setShowDriverArrivedOverlay(false);
            } else if (savedRideStatus === 'searching') {
              // Still searching for driver
              const bookedTime = savedBookedAt ? new Date(savedBookedAt) : new Date();
              setBookedAt(bookedTime);
             
              // Restart polling
              const pollInterval = setInterval(() => {
                if (savedRideId) {
                  socket.emit('getRideStatus', { rideId: savedRideId });
                }
              }, 5000);
              AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
             
              // Restart timeout (increased to 60s)
              const acceptanceTimeout = setTimeout(() => {
                if (savedRideStatus === "searching") {
                  Alert.alert(
                    "No Driver Available",
                    "No driver has accepted your ride yet. Please try again or wait longer.",
                    [{ text: "OK", onPress: () => setRideStatus("idle") }]
                  );
                }
              }, 60000);
              AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
            }
          } else {
            // No driver data yet, still searching
            setRideStatus("searching");
            const bookedTime = savedBookedAt ? new Date(savedBookedAt) : new Date();
            setBookedAt(bookedTime);
           
            // Restart polling
            const pollInterval = setInterval(() => {
              if (savedRideId) {
                socket.emit('getRideStatus', { rideId: savedRideId });
              }
            }, 5000);
            AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
           
            // Restart timeout (increased to 60s)
            const acceptanceTimeout = setTimeout(() => {
              if (rideStatus === "searching") {
                Alert.alert(
                  "No Driver Available",
                  "No driver has accepted your ride yet. Please try again or wait longer.",
                  [{ text: "OK", onPress: () => setRideStatus("idle") }]
                );
              }
            }, 60000);
            AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
          }

          // Recover additional ride details
          if (savedPickup) propHandlePickupChange(savedPickup);
          if (savedDropoff) propHandleDropoffChange(savedDropoff);
          if (savedPickupLoc) setPickupLocation(JSON.parse(savedPickupLoc));
          if (savedDropoffLoc) setDropoffLocation(JSON.parse(savedDropoffLoc));
          if (savedRoute) setRouteCoords(JSON.parse(savedRoute));
          if (savedDist) setDistance(savedDist);
          if (savedTime) setTravelTime(savedTime);
          if (savedType) setSelectedRideType(savedType);
          if (savedReturn) setWantReturn(savedReturn === 'true');
          if (savedPrice) setEstimatedPrice(parseFloat(savedPrice));
         
          // Request ride status from server
          socket.emit('getRideStatus', { rideId: savedRideId });
        }
      } catch (error) {
        console.error('Error recovering ride data:', error);
      }
    };
   
    recoverRideData();
  }, []);
  // Save ride status to AsyncStorage whenever it changes
  useEffect(() => {
    if (currentRideId) {
      AsyncStorage.setItem('rideStatus', rideStatus);
    }
  }, [rideStatus, currentRideId]);
  // Save booking OTP to AsyncStorage whenever it changes
  useEffect(() => {
    if (bookingOTP && currentRideId) {
      AsyncStorage.setItem('bookingOTP', bookingOTP);
    }
  }, [bookingOTP, currentRideId]);
  // Process ride acceptance
  const processRideAcceptance = useCallback((data: any) => {
    console.log('🎯 PROCESSING RIDE ACCEPTANCE:', JSON.stringify(data, null, 2));
    // Validate required data
    if (!data.rideId || !data.driverId) {
      console.error('❌ Invalid ride acceptance data:', data);
      return;
    }
    // Clear existing timeouts and intervals
    AsyncStorage.getItem('statusPollInterval').then(id => {
      if (id) {
        clearInterval(parseInt(id));
        AsyncStorage.removeItem('statusPollInterval');
      }
    });
    // Update ride status immediately
    setRideStatus("onTheWay");
    setDriverId(data.driverId);
    setDriverName(data.driverName || 'Driver');
    setDriverMobile(data.driverMobile || 'N/A');
    setCurrentRideId(data.rideId);
   
    // Create accepted driver object
    const acceptedDriverData: DriverType = {
      driverId: data.driverId,
      name: data.driverName || 'Driver',
      driverMobile: data.driverMobile || 'N/A',
      location: {
        coordinates: [data.driverLng || 0, data.driverLat || 0]
      },
      vehicleType: data.vehicleType || selectedRideType,
      status: "onTheWay"
    };
    console.log('👨‍💼 Setting accepted driver:', acceptedDriverData);
    // Update state
    setAcceptedDriver(acceptedDriverData);
    setNearbyDrivers([acceptedDriverData]);
    setNearbyDriversCount(1);
    // Set initial driver location
    if (data.driverLat && data.driverLng) {
      const driverLoc = {
        latitude: data.driverLat,
        longitude: data.driverLng
      };
      setDriverLocation(driverLoc);
      console.log('📍 Initial driver location set:', driverLoc);
    }
    // Store in AsyncStorage for recovery
    AsyncStorage.setItem('currentRideId', data.rideId);
    AsyncStorage.setItem('acceptedDriver', JSON.stringify(acceptedDriverData));
    AsyncStorage.setItem('rideStatus', 'onTheWay');
    console.log('✅ Ride acceptance processed successfully for:', data.rideId);
  
    // Show driver assigned modal
    setShowDriverAssignedModal(true);
  }, [selectedRideType]);
  // Global ride acceptance listener
  useEffect(() => {
    console.log('🎯 Setting up GLOBAL ride acceptance listener');
    const handleRideAccepted = (data: any) => {
      console.log('🚨 ===== USER APP: RIDE ACCEPTED ====');
      console.log('📦 Acceptance data:', JSON.stringify(data, null, 2));
      console.log('🚨 ===== END ACCEPTANCE DATA ====');
      processRideAcceptance(data);
    };
    // Listen on multiple channels
    socket.on("rideAccepted", handleRideAccepted);
    // Fixed: Proper async handling
    socket.on("rideAcceptedBroadcast", async (data) => {
      try {
        const userId = await AsyncStorage.getItem('userId');
        if (data.targetUserId === userId) {
          handleRideAccepted(data);
        }
      } catch (error) {
        console.error('Error checking user ID:', error);
      }
    });
    return () => {
      socket.off("rideAccepted", handleRideAccepted);
      socket.off("rideAcceptedBroadcast", handleRideAccepted);
    };
  }, [processRideAcceptance]);
  // Critical socket event handlers
  useEffect(() => {
    console.log('🔌 Setting up CRITICAL socket event handlers');
    // Handle getDriverData response
    const handleDriverDataResponse = (data: any) => {
      console.log('🚗 Driver data received:', data);
      if (data.success) {
        processRideAcceptance(data);
      }
    };
    // Handle getRideStatus response
    const handleRideStatusResponse = (data: any) => {
      console.log('📋 Ride status received:', data);
      if (data.driverId) {
        processRideAcceptance(data);
      }
    };
    // Handle backup ride acceptance
    const handleBackupRideAccepted = (data: any) => {
      console.log('🔄 Backup ride acceptance:', data);
      processRideAcceptance(data);
    };
    socket.on("driverDataResponse", handleDriverDataResponse);
    socket.on("rideStatusResponse", handleRideStatusResponse);
    socket.on("backupRideAccepted", handleBackupRideAccepted);
    return () => {
      socket.off("driverDataResponse", handleDriverDataResponse);
      socket.off("rideStatusResponse", handleRideStatusResponse);
      socket.off("backupRideAccepted", handleBackupRideAccepted);
    };
  }, [selectedRideType]);
  // Comprehensive socket debugger
  useEffect(() => {
    console.log('🔍 Starting comprehensive socket debugging');
    // Debug all socket events
    const debugAllEvents = (eventName: string, data: any) => {
      if (eventName.includes('ride') || eventName.includes('driver') || eventName.includes('Room')) {
        console.log(`📡 SOCKET EVENT [${eventName}]:`, data);
      }
    };
    // Specific debug for rideAccepted
    const debugRideAccepted = (data: any) => {
      console.log('🚨🚨🚨 RIDE ACCEPTED EVENT RECEIVED 🚨🚨🚨');
      console.log('📦 Data:', JSON.stringify(data, null, 2));
      console.log('🔍 Current state:', {
        currentRideId,
        rideStatus,
        hasAcceptedDriver: !!acceptedDriver
      });
      // Process immediately
      processRideAcceptance(data);
    };
    // Debug connection
    const handleConnect = () => {
      console.log('✅ Socket connected - ID:', socket.id);
      setSocketConnected(true);
    };
    const handleDisconnect = () => {
      console.log('❌ Socket disconnected');
      setSocketConnected(false);
    };
    // Add all listeners
    socket.onAny(debugAllEvents);
    socket.on("rideAccepted", debugRideAccepted);
    socket.on("connect", handleConnect);
    socket.on("disconnect", handleDisconnect);
    console.log('🔍 Socket debuggers activated');
    return () => {
      socket.offAny(debugAllEvents);
      socket.off("rideAccepted", debugRideAccepted);
      socket.off("connect", handleConnect);
      socket.off("disconnect", handleDisconnect);
    };
  }, [currentRideId, rideStatus, acceptedDriver, processRideAcceptance]);
  // User location tracking function
  const sendUserLocationUpdate = useCallback(async (latitude, longitude) => {
    try {
      const userId = await AsyncStorage.getItem('userId');
      if (!userId || !currentRideId) {
        console.log('❌ Cannot send location: Missing userId or rideId');
        return;
      }
      console.log(`📍 SENDING USER LOCATION UPDATE: ${latitude}, ${longitude} for ride ${currentRideId}`);
      // Send to socket for real-time updates
      socket.emit('userLocationUpdate', {
        userId,
        rideId: currentRideId,
        latitude,
        longitude,
        timestamp: Date.now()
      });
      // Also save to database via REST API
      const token = await AsyncStorage.getItem('authToken');
      if (token) {
        const backendUrl = getBackendUrl();
        await axios.post(`${backendUrl}/api/users/save-location`, {
          latitude,
          longitude,
          rideId: currentRideId
        }, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
      }
      console.log('✅ User location update sent successfully');
    } catch (error) {
      console.error('❌ Error sending user location update:', error);
    }
  }, [currentRideId]);
  // Continuous location tracking during active rides
  useEffect(() => {
    let locationInterval;
    if ((rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && location) {
      console.log('🔄 Starting continuous user location tracking');
      locationInterval = setInterval(() => {
        if (location) {
          sendUserLocationUpdate(location.latitude, location.longitude);
        }
      }, 5000); // Send every 5 seconds
    }
    return () => {
      if (locationInterval) {
        clearInterval(locationInterval);
        console.log('🛑 Stopped user location tracking');
      }
    };
  }, [rideStatus, location, sendUserLocationUpdate]);
  // Update existing location interval to include active ride statuses
  useEffect(() => {
    const interval = setInterval(() => {
      if (location && (rideStatus === "idle" || rideStatus === "searching" || rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started")) {
        Geolocation.getCurrentPosition(
          (pos) => {
            const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
            setLocation(newLoc);
      
            // Send location update if in active ride
            if (rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") {
              sendUserLocationUpdate(newLoc.latitude, newLoc.longitude);
            }
      
            if (isPickupCurrent && dropoffLocation) {
              setPickupLocation(newLoc);
              fetchRoute(newLoc);
            }
            fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
          },
          (err) => { console.error("Live location error:", err); },
          { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
        );
      }
    }, 5000);
    return () => clearInterval(interval);
  }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected, sendUserLocationUpdate]);
  // Manual ride status polling
  useEffect(() => {
    if (currentRideId && rideStatus === "searching") {
      console.log('🔄 Starting backup polling for ride:', currentRideId);
      const pollInterval = setInterval(() => {
        console.log('📡 Polling ride status for:', currentRideId);
        socket.emit('getRideStatus', { rideId: currentRideId }, (data) => {
          if (data.driverId) {
            processRideAcceptance(data);
          } else if (bookedAt && (new Date().getTime() - bookedAt.getTime() > 60000) && rideStatus === "searching") {
            console.log('⏰ No driver found after 60s');
            Alert.alert(
              "No Driver Available",
              "No driver has accepted your ride yet. Please try again or wait longer.",
              [{ text: "OK", onPress: () => setRideStatus("idle") }]
            );
            clearInterval(pollInterval);
            AsyncStorage.removeItem('statusPollInterval');
          }
        });
      }, 3000); // Poll every 3 seconds
      // Store interval ID
      AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
      return () => {
        clearInterval(pollInterval);
        AsyncStorage.removeItem('statusPollInterval');
      };
    }
  }, [currentRideId, rideStatus, bookedAt]);
  // Ensure user joins their room on socket connection
  useEffect(() => {
    const registerUserRoom = async () => {
      try {
        const userId = await AsyncStorage.getItem('userId');
        if (userId && socket.connected) {
          console.log('👤 Registering user with socket room:', userId);
          socket.emit('registerUser', { userId });
    
          // Also join the room manually
          socket.emit('joinRoom', { userId });
        }
      } catch (error) {
        console.error('Error registering user room:', error);
      }
    };
    // Register on connect and every 5 seconds to ensure room membership
    socket.on('connect', registerUserRoom);
    registerUserRoom();
    // Re-register periodically to ensure room membership
    const interval = setInterval(registerUserRoom, 5000);
    return () => {
      socket.off('connect', registerUserRoom);
      clearInterval(interval);
    };
  }, []);
  // Socket recovery: Handle reconnection and missed events
  useEffect(() => {
    const handleReconnect = async () => {
      console.log('🔌 Socket reconnected, recovering state...');
      setSocketConnected(true);
      // Re-register user
      try {
        const userId = await AsyncStorage.getItem('userId');
        if (userId) {
          socket.emit('registerUser', { userId });
          console.log('👤 User re-registered after reconnect:', userId);
        }
  
        // Request current ride status if we have a ride ID
        const currentRideId = await AsyncStorage.getItem('currentRideId');
        if (currentRideId) {
          socket.emit('getRideStatus', { rideId: currentRideId });
          console.log('🔄 Requesting status for current ride:', currentRideId);
        }
      } catch (error) {
        console.error('Error during socket recovery:', error);
      }
    };
    socket.on("connect", handleReconnect);
    return () => {
      socket.off("connect", handleReconnect);
    };
  }, []);
  // Fetch route
  const fetchRoute = async (dropCoord: LocationType) => {
    if (!pickupLocation) return;
    try {
      const url = `https://router.project-osrm.org/route/v1/driving/${pickupLocation.longitude},${pickupLocation.latitude};${dropCoord.longitude},${dropCoord.latitude}?overview=full&geometries=geojson`;
      const res = await fetch(url);
      const data = await res.json();
      if (data.code === "Ok" && data.routes.length > 0) {
        const coords = data.routes[0].geometry.coordinates.map(([lng, lat]: number[]) => ({ latitude: lat, longitude: lng }));
        setRouteCoords(coords);
        setDistance((data.routes[0].distance / 1000).toFixed(2) + " km");
        setTravelTime(Math.round(data.routes[0].duration / 60) + " mins");
     
        // Removed automatic showing of route details modal
        // This will now only be shown when the user clicks BOOK RIDE
      } else {
        setApiError("Failed to fetch route");
        Alert.alert("Route Error", "Could not find route. Please try different locations.");
      }
    } catch (err) {
      console.error(err);
      setRouteCoords([]);
      setApiError("Network error fetching route");
      Alert.alert("Route Error", "Failed to fetch route. Please check your internet connection.");
    }
  };
  // Fetch suggestions
  const fetchSuggestions = async (query: string, type: 'pickup' | 'dropoff'): Promise<SuggestionType[]> => {
    try {
      console.log(`Fetching suggestions for: ${query}`);
      const cache = type === 'pickup' ? pickupCache : dropoffCache;
      if (cache[query]) {
        console.log(`Returning cached suggestions for: ${query}`);
        return cache[query];
      }
      if (type === 'pickup') setPickupLoading(true);
      else setDropoffLoading(true);
      setSuggestionsError(null);
      const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=5&addressdetails=1&countrycodes=IN`;
      console.log(`API URL: ${url}`);
      const response = await fetch(url, {
        headers: { 'User-Agent': 'EAZYGOApp/1.0' },
      });
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const data = await response.json();
      if (!Array.isArray(data)) throw new Error('Invalid response format');
      const suggestions: SuggestionType[] = data.map((item: any) => ({
        id: item.place_id || `${item.lat}-${item.lon}`,
        name: item.display_name,
        address: extractAddress(item),
        lat: item.lat,
        lon: item.lon,
        type: item.type || 'unknown',
        importance: item.importance || 0,
      }));
      if (type === 'pickup') setPickupCache(prev => ({ ...prev, [query]: suggestions }));
      else setDropoffCache(prev => ({ ...prev, [query]: suggestions }));
      return suggestions;
    } catch (error: any) {
      console.error('Suggestions fetch error:', error);
      setSuggestionsError(error.message || 'Failed to fetch suggestions');
      return [];
    } finally {
      if (type === 'pickup') setPickupLoading(false);
      else setDropoffLoading(false);
    }
  };
  // Extract address
  const extractAddress = (item: any): string => {
    if (item.address) {
      const parts = [];
      if (item.address.road) parts.push(item.address.road);
      if (item.address.suburb) parts.push(item.address.suburb);
      if (item.address.city || item.address.town || item.address.village) parts.push(item.address.city || item.address.town || item.address.village);
      if (item.address.state) parts.push(item.address.state);
      if (item.address.postcode) parts.push(item.address.postcode);
      return parts.join(', ');
    }
    return item.display_name;
  };
  // Handle pickup change
  const handlePickupChange = (text: string) => {
    console.log(`handlePickupChange called with: "${text}"`);
    propHandlePickupChange(text);
    if (pickupDebounceTimer.current) {
      clearTimeout(pickupDebounceTimer.current);
      pickupDebounceTimer.current = null;
    }
    if (text.length > 2) {
      setPickupLoading(true);
      setShowPickupSuggestions(true);
      pickupDebounceTimer.current = setTimeout(async () => {
        const sugg = await fetchSuggestions(text, 'pickup');
        setPickupSuggestions(sugg);
        setPickupLoading(false);
      }, 500);
    } else {
      setShowPickupSuggestions(false);
      setPickupSuggestions([]);
    }
  };
  // Handle dropoff change
  const handleDropoffChange = (text: string) => {
    console.log(`handleDropoffChange called with: "${text}"`);
    propHandleDropoffChange(text);
    if (dropoffDebounceTimer.current) {
      clearTimeout(dropoffDebounceTimer.current);
      dropoffDebounceTimer.current = null;
    }
    if (text.length > 2) {
      setDropoffLoading(true);
      setShowDropoffSuggestions(true);
      dropoffDebounceTimer.current = setTimeout(async () => {
        const sugg = await fetchSuggestions(text, 'dropoff');
        setDropoffSuggestions(sugg);
        setDropoffLoading(false);
      }, 500);
    } else {
      setShowDropoffSuggestions(false);
      setDropoffSuggestions([]);
    }
  };
  // Select pickup suggestion
  const selectPickupSuggestion = (suggestion: SuggestionType) => {
    propHandlePickupChange(suggestion.name);
    setPickupLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
    setShowPickupSuggestions(false);
    setIsPickupCurrent(false);
    if (dropoffLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
    fetchNearbyDrivers(parseFloat(suggestion.lat), parseFloat(suggestion.lon));
  };
  // Select dropoff suggestion
  const selectDropoffSuggestion = (suggestion: SuggestionType) => {
    propHandleDropoffChange(suggestion.name);
    setDropoffLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
    setShowDropoffSuggestions(false);
    if (pickupLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
  };
  // Update price
  useEffect(() => {
    const updatePrice = async () => {
      if (pickupLocation && dropoffLocation && distance) {
        const price = await calculatePrice();
        setEstimatedPrice(price);
      }
    };
    updatePrice();
  }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);
  // Update price again
  useEffect(() => {
    if (pickupLocation && dropoffLocation && distance) {
      const price = calculatePrice();
      setEstimatedPrice(price);
    }
  }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);
  // Panel animation
  useEffect(() => {
    if (showPricePanel) {
      Animated.timing(panelAnimation, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true,
      }).start();
    } else {
      Animated.timing(panelAnimation, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }).start();
    }
  }, [showPricePanel]);
  // Fetch ride price
  const fetchRidePrice = async (vehicleType: string, distance: number) => {
    // Use ONLY dynamic prices from socket events
    const pricePerKm = dynamicPrices[vehicleType];
    // If dynamic prices are not set yet, wait for them
    if (!pricePerKm || pricePerKm === 0) {
      console.log(`⏳ Waiting for ${vehicleType} price from admin...`);
      return 0;
    }
    const calculatedPrice = distance * pricePerKm;
    console.log(`💰 Price calculation: ${distance}km ${vehicleType} × ₹${pricePerKm}/km = ₹${calculatedPrice}`);
    return calculatedPrice;
  };
  // Calculate price
  const calculatePrice = async (): Promise<number | null> => {
    if (!pickupLocation || !dropoffLocation || !distance) {
      console.log('❌ Missing location data for price calculation');
      return null;
    }
    const distanceKm = parseFloat(distance);
    // DEBUG: Print current prices before calculation
    console.log('\n💰 PRICE CALCULATION DEBUG:');
    console.log(`📏 Distance: ${distanceKm}km`);
    console.log(`🚗 Vehicle Type: ${selectedRideType}`);
    console.log(`🏍️ BIKE Price/km: ₹${dynamicPrices.bike}`);
    console.log(`🚕 TAXI Price/km: ₹${dynamicPrices.taxi}`);
    console.log(`🚛 PORT Price/km: ₹${dynamicPrices.port}`);
    console.log('─────────────────────────────────────');
    try {
      const pricePerKm = dynamicPrices[selectedRideType];
      console.log(`💰 Using price per km: ₹${pricePerKm} for ${selectedRideType}`);
      // Wait for admin prices - NO TEMPORARY FALLBACK
      if (!pricePerKm || pricePerKm === 0) {
        console.log('⏳ Waiting for admin prices to be loaded...');
        console.log('🚫 Booking blocked until prices are received from admin');
        return null;
      }
      const calculatedPrice = distanceKm * pricePerKm;
      const multiplier = wantReturn ? 2 : 1;
      const finalPrice = Math.round(calculatedPrice * multiplier);
      console.log(`✅ Final price calculated: ${distanceKm}km × ₹${pricePerKm}/km × ${multiplier} = ₹${finalPrice}`);
      return finalPrice;
    } catch (error) {
      console.error('❌ Error calculating price:', error);
      return null;
    }
  };
  // Price update handler
  useEffect(() => {
    const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
      console.log('📡 Received REAL-TIME price update from admin:', data);
      // Update dynamic prices immediately
      setDynamicPrices({
        bike: data.bike,
        taxi: data.taxi,
        port: data.port,
      });
      // Log the new prices
      console.log('🔄 PRICES UPDATED SUCCESSFULLY:');
      console.log(`🏍️ BIKE: ₹${data.bike}/km`);
      console.log(`🚕 TAXI: ₹${data.taxi}/km`);
      console.log(`🚛 PORT: ₹${data.port}/km`);
      // Immediately recalculate price if a ride is being planned
      if (pickupLocation && dropoffLocation && distance) {
        console.log('🔄 Recalculating price with new admin rates...');
        calculatePrice();
      }
    };
    socket.on('priceUpdate', handlePriceUpdate);
    return () => {
      socket.off('priceUpdate', handlePriceUpdate);
    };
  }, [pickupLocation, dropoffLocation, distance]);
  // Request prices on component mount
  useEffect(() => {
    console.log('📡 Requesting current prices from admin...');
    socket.emit('getCurrentPrices');
    const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
      console.log('📡 Received current prices:', data);
      setDynamicPrices(data);
    };
    socket.on('currentPrices', handleCurrentPrices);
    return () => {
      socket.off('currentPrices', handleCurrentPrices);
    };
  }, []);
  // Listen for real-time price updates
  useEffect(() => {
    const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
      console.log('📡 REAL-TIME PRICE UPDATE:', data);
      setDynamicPrices(data);
      console.log('✅ PRICES UPDATED:');
      console.log(`🏍️ BIKE: ₹${data.bike}/km`);
      console.log(`🚕 TAXI: ₹${data.taxi}/km`);
      console.log(`🚛 PORT: ₹${data.port}/km`);
      // Recalculate immediately
      if (pickupLocation && dropoffLocation && distance) {
        calculatePrice();
      }
    };
    socket.on('priceUpdate', handlePriceUpdate);
    return () => socket.off('priceUpdate', handlePriceUpdate);
  }, [pickupLocation, dropoffLocation, distance]);
  // Price debugging and console logging
  useEffect(() => {
    console.log('💰 INITIALIZING PRICE DEBUGGING SYSTEM');
    // Function to print current prices to console
    const printCurrentPrices = () => {
      console.log('\n🚗 ===== CURRENT RIDE PRICES =====');
      console.log(`🏍️ BIKE: Today's price per km: ₹${dynamicPrices.bike}`);
      console.log(`🚕 TAXI: Today's price per km: ₹${dynamicPrices.taxi}`);
      console.log(`🚛 PORT: Today's price per km: ₹${dynamicPrices.port}`);
      console.log('=================================\n');
    };
    // Listen for price updates from admin
    const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
      console.log('📡 REAL-TIME PRICE UPDATE RECEIVED FROM ADMIN:', data);
      // Update dynamic prices
      setDynamicPrices({
        bike: data.bike,
        taxi: data.taxi,
        port: data.port,
      });
      // Print updated prices to console
      console.log('\n✅ ===== PRICES UPDATED SUCCESSFULLY =====');
      console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
      console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
      console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
      console.log('=============================================\n');
      // Recalculate price if needed
      if (pickupLocation && dropoffLocation && distance) {
        calculatePrice();
      }
    };
    // Listen for initial prices when component mounts
    const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
      console.log('📡 RECEIVED CURRENT PRICES FROM SERVER:');
      console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
      console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
      console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
      console.log('─────────────────────────────────────');
      setDynamicPrices(data);
    };
    // Request current prices when component mounts
    console.log('📡 Requesting current prices from server...');
    socket.emit('getCurrentPrices');
    // Set up event listeners
    socket.on('priceUpdate', handlePriceUpdate);
    socket.on('currentPrices', handleCurrentPrices);
    socket.on('ridePricesUpdated', handlePriceUpdate); // Alternative event name
    // Print initial prices
    printCurrentPrices();
    // Set up interval to periodically request prices (as backup)
    const priceInterval = setInterval(() => {
      console.log('🔄 Periodic price check...');
      socket.emit('getCurrentPrices');
      printCurrentPrices();
    }, 30000); // Every 30 seconds
    return () => {
      // Clean up event listeners
      socket.off('priceUpdate', handlePriceUpdate);
      socket.off('currentPrices', handleCurrentPrices);
      socket.off('ridePricesUpdated', handlePriceUpdate);
      clearInterval(priceInterval);
    };
  }, [pickupLocation, dropoffLocation, distance]);
  // Request current prices on component mount
  useEffect(() => {
    console.log('📡 Requesting current prices from admin...');
    // Request current prices when component mounts
    socket.emit('getCurrentPrices');
    // Also set up a listener for initial price response
    const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
      console.log('📡 Received current prices from admin:', data);
      setDynamicPrices(data);
    };
    socket.on('currentPrices', handleCurrentPrices);
    return () => {
      socket.off('currentPrices', handleCurrentPrices);
    };
  }, []);
  // Fetch initial prices
  useEffect(() => {
    const fetchInitialPrices = async () => {
      try {
        const bikeRate = await fetchRidePrice('bike', 1);
        const taxiRate = await fetchRidePrice('taxi', 1);
        const portRate = await fetchRidePrice('port', 1);
        setDynamicPrices({
          bike: bikeRate,
          taxi: taxiRate,
          port: portRate,
        });
        console.log(`BIKE: Today's price per km: ₹${bikeRate}`);
        console.log(`TAXI: Today's price per km: ₹${taxiRate}`);
        console.log(`PORT: Today's price per km: ₹${portRate}`);
      } catch (error) {
        console.error('❌ Error fetching initial prices:', error);
        setDynamicPrices({
          bike: 100,
          taxi: 500,
          port: 1000,
        });
        console.log(`BIKE: Today's price per km: ₹100 (fallback)`);
        console.log(`TAXI: Today's price per km: ₹500 (fallback)`);
        console.log(`PORT: Today's price per km: ₹1000 (fallback)`);
      }
    };
    fetchInitialPrices();
  }, []);
  // Handle ride type select
  const handleRideTypeSelect = async (type: string) => {
    if (selectedRideType === type) return;
    setSelectedRideType(type);
    setShowPricePanel(true);
    if (pickupLocation && dropoffLocation) {
      const price = await calculatePrice();
      setEstimatedPrice(price);
    }
    if (location) fetchNearbyDrivers(location.latitude, location.longitude);
  };
  // Handle book ride
  const handleBookRide = async () => {
    if (isBooking) {
      console.log('⏭️ Ride booking already in progress, skipping duplicate');
      return;
    }
  
    // Show route details modal before booking
    setShowRouteDetailsModal(true);
  };
  // Handle confirm booking after route details
  const handleConfirmBookingFromModal = async () => {
    if (isBooking) {
      console.log('⏭️ Ride booking already in progress, skipping duplicate');
      return;
    }
  
    const price = await calculatePrice(); // Use async price calculation
    if (!price || price === 0 || dynamicPrices[selectedRideType] === 0) {
      Alert.alert('Error', 'Admin rates not loaded yet. Please wait or try again.');
      setShowRouteDetailsModal(false);
      return;
    }
  
    try {
      setIsBooking(true);
      const token = await AsyncStorage.getItem('authToken');
      if (!token) {
        Alert.alert('Authentication Error', 'Please log in to book a ride');
        setIsBooking(false);
        return;
      }
      if (!pickupLocation || !dropoffLocation) {
        Alert.alert('Error', 'Please select both pickup and dropoff locations');
        setIsBooking(false);
        return;
      }
      if (!estimatedPrice) {
        Alert.alert('Error', 'Price calculation failed. Please try again.');
        setIsBooking(false);
        return;
      }
      const userId = await AsyncStorage.getItem('userId');
      const customerId = (await AsyncStorage.getItem('customerId')) || 'U001';
      const userName = await AsyncStorage.getItem('userName');
      const userMobile = await AsyncStorage.getItem('userMobile');
      let otp;
      if (customerId && customerId.length >= 4) {
        otp = customerId.slice(-4);
      } else {
        otp = Math.floor(1000 + Math.random() * 9000).toString();
      }
      setRideStatus('searching');
      setBookedAt(new Date());
      console.log('📋 User Details:', {
        userId,
        customerId,
        userName,
        userMobile,
        pickup,
        dropoff,
        selectedRideType,
        otp
      });
      const rideData = {
        userId,
        customerId,
        userName,
        userMobile,
        pickup: {
          lat: pickupLocation.latitude,
          lng: pickupLocation.longitude,
          address: pickup,
        },
        drop: {
          lat: dropoffLocation.latitude,
          lng: dropoffLocation.longitude,
          address: dropoff,
        },
        vehicleType: selectedRideType,
        otp,
        estimatedPrice,
        distance,
        travelTime,
        wantReturn,
        token
      };
      socket.emit('bookRide', rideData, (response) => {
        setIsBooking(false);
  
        if (response && response.success) {
          setCurrentRideId(response.rideId);
          AsyncStorage.setItem('bookedAt', new Date().toISOString());
          AsyncStorage.setItem('rideStatus', 'searching');
          setBookingOTP(response.otp);
          setShowConfirmModal(true);
          setRideStatus('searching');
          console.log('✅ Ride booked successfully:', response);
        } else {
          Alert.alert('Booking Failed', response?.message || 'Failed to book ride');
          setRideStatus('idle');
          setCurrentRideId(null);
        }
      });
    } catch (error) {
      setIsBooking(false);
      console.error('Booking error:', error);
      Alert.alert('Booking Failed', 'An unexpected error occurred. Please try again.');
      setRideStatus('idle');
      setCurrentRideId(null);
    }
  };
  // Fetch user data
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const token = await AsyncStorage.getItem('authToken');
        if (!token) return;
        const backendUrl = getBackendUrl();
        const response = await axios.get(`${backendUrl}/api/users/profile`, {
          headers: { Authorization: `Bearer ${token}` }
        });
  
        const userProfile = response.data;
  
        console.log('📋 User Profile:', userProfile);
  
        const userMobile = userProfile.mobile ||
                           userProfile.phone ||
                           userProfile.phoneNumber ||
                           userProfile.mobileNumber ||
                           '';
        await AsyncStorage.setItem('userId', userProfile._id);
        await AsyncStorage.setItem('customerId', userProfile.customerId || userProfile._id);
        await AsyncStorage.setItem('userName', userProfile.name || userProfile.username);
        await AsyncStorage.setItem('userMobile', userProfile.phoneNumber);
        await AsyncStorage.setItem('userAddress', userProfile.address || '');
  
      } catch (error) {
        console.error('Error fetching user data:', error);
      }
    };
    fetchUserData();
  }, []);
  // Handle ride created
  useEffect(() => {
    const handleRideCreated = async (data) => {
      console.log('Ride created event received:', data);
      if (data.success) {
        if (data.rideId && !currentRideId) {
          setCurrentRideId(data.rideId);
        }
  
        await AsyncStorage.setItem('lastRideId', data.rideId || currentRideId || '');
        await AsyncStorage.setItem('ridePickup', pickup);
        await AsyncStorage.setItem('rideDropoff', dropoff);
        await AsyncStorage.setItem('ridePickupLocation', JSON.stringify(pickupLocation));
        await AsyncStorage.setItem('rideDropoffLocation', JSON.stringify(dropoffLocation));
        await AsyncStorage.setItem('rideRouteCoords', JSON.stringify(routeCoords));
        await AsyncStorage.setItem('rideDistance', distance);
        await AsyncStorage.setItem('rideTravelTime', travelTime);
        await AsyncStorage.setItem('rideSelectedType', selectedRideType);
        await AsyncStorage.setItem('rideWantReturn', wantReturn ? 'true' : 'false');
        await AsyncStorage.setItem('rideEstimatedPrice', estimatedPrice?.toString() || '');
  
        setBookingOTP(data.otp);
        setShowConfirmModal(true);
        setRideStatus("searching");
        AsyncStorage.setItem('rideStatus', 'searching');
      } else if (data.message) {
        Alert.alert("Booking Failed", data.message || "Failed to book ride");
        setRideStatus("idle");
        setCurrentRideId(null);
      }
    };
    socket.on("rideCreated", handleRideCreated);
    return () => {
      socket.off("rideCreated", handleRideCreated);
    };
  }, [currentRideId, pickup, dropoff, pickupLocation, dropoffLocation, routeCoords, distance, travelTime, selectedRideType, wantReturn, estimatedPrice]);
  // Handle confirm booking
  const handleConfirmBooking = async () => {
    console.log('Confirming booking with OTP:', bookingOTP);
    console.log('Current Ride ID:', currentRideId);
    let rideIdToUse = currentRideId;
    if (!rideIdToUse) {
      rideIdToUse = await AsyncStorage.getItem('currentRideId');
      console.log('🔄 Using rideId from storage:', rideIdToUse);
    }
    if (!rideIdToUse) {
      Alert.alert("Error", "Invalid booking state. Please try booking again.");
      setShowConfirmModal(false);
      return;
    }
    setCurrentRideId(rideIdToUse);
    setRideStatus("searching"); // Change to "searching" first
    AsyncStorage.setItem('rideStatus', 'searching');
    setShowConfirmModal(false);
    console.log('🚀 Waiting for driver to accept ride:', rideIdToUse);
    // Start polling for ride status updates
    const statusPollInterval = setInterval(() => {
      if (currentRideId) {
        socket.emit('getRideStatus', { rideId: currentRideId });
      }
    }, 5000); // Poll every 5 seconds
    AsyncStorage.setItem('statusPollInterval', statusPollInterval.toString());
  };
  // Format phone number to show only first 2 and last 4 digits
  const formatPhoneNumber = (phoneNumber: string | null): string => {
    if (!phoneNumber) return 'N/A';
    if (phoneNumber.length <= 6) return phoneNumber;
    const firstTwo = phoneNumber.substring(0, 2);
    const lastFour = phoneNumber.substring(phoneNumber.length - 4);
    const middleStars = '*'.repeat(phoneNumber.length - 6);
    return `${firstTwo}${middleStars}${lastFour}`;
  };
  // Handle phone call
  const handlePhoneCall = () => {
    if (acceptedDriver && acceptedDriver.driverMobile) {
      Linking.openURL(`tel:${acceptedDriver.driverMobile}`)
        .catch(err => console.error('Error opening phone dialer:', err));
    }
  };
  // Render vehicle icon
  const renderVehicleIcon = (type: 'bike' | 'taxi' | 'port', size: number = 24, color: string = '#000000') => {
    try {
      switch (type) {
        case 'bike': return <BikeIcon width={size} height={size} fill={color} />;
        case 'taxi': return <TaxiIcon width={size} height={size} fill={color} />;
        case 'port': return <LorryIcon width={size} height={size} fill={color} />;
        default: return <TaxiIcon width={size} height={size} fill={color} />;
      }
    } catch (error) {
      return <TaxiIcon width={size} height={size} fill={color} />;
    }
  };
  // Render suggestion item
  const renderSuggestionItem = (item: SuggestionType, onSelect: () => void, key: string) => {
    let iconName = 'location-on';
    let iconColor = '#A9A9A9';
    if (item.type.includes('railway') || item.type.includes('station')) { iconName = 'train'; iconColor = '#3F51B5'; }
    else if (item.type.includes('airport')) { iconName = 'flight'; iconColor = '#2196F3'; }
    else if (item.type.includes('bus')) { iconName = 'directions-bus'; iconColor = '#FF9800'; }
    else if (item.type.includes('hospital')) { iconName = 'local-hospital'; iconColor = '#F44336'; }
    else if (item.type.includes('school') || item.type.includes('college')) { iconName = 'school'; iconColor = '#4CAF50'; }
    else if (item.type.includes('place_of_worship')) { iconName = 'church'; iconColor = '#9C27B0'; }
    else if (item.type.includes('shop') || item.type.includes('mall')) { iconName = 'shopping-mall'; iconColor = '#E91E63'; }
    else if (item.type.includes('park')) { iconName = 'park'; iconColor = '#4CAF50'; }
    return (
      <TouchableOpacity key={key} style={styles.suggestionItem} onPress={onSelect}>
        <MaterialIcons name={iconName as any} size={20} color={iconColor} style={styles.suggestionIcon} />
        <View style={styles.suggestionTextContainer}>
          <Text style={styles.suggestionMainText} numberOfLines={1}>{extractMainName(item.name)}</Text>
          <Text style={styles.suggestionSubText} numberOfLines={1}>{item.address}</Text>
        </View>
      </TouchableOpacity>
    );
  };
  // Extract main name
  const extractMainName = (fullName: string): string => {
    const parts = fullName.split(',');
    return parts[0].trim();
  };
  // Check if book ride button is enabled
  const isBookRideButtonEnabled = pickup && dropoff && selectedRideType && estimatedPrice !== null;
  // Reverse geocode
  const reverseGeocode = async (lat: number, lon: number): Promise<string | null> => {
    try {
      const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1&countrycodes=IN`;
      const response = await fetch(url, {
        headers: { 'User-Agent': 'EAZYGOApp/1.0' },
      });
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const data = await response.json();
      return data.display_name || null;
    } catch (error) {
      console.error('Reverse geocode error:', error);
      return null;
    }
  };
  // Handle region change complete
  const handleRegionChangeComplete = async (region: Region, isPickup: boolean) => {
    if (regionChangeTimer.current) {
      clearTimeout(regionChangeTimer.current);
    }
    regionChangeTimer.current = setTimeout(async () => {
      const addr = await reverseGeocode(region.latitude, region.longitude);
      if (addr) {
        if (isPickup) {
          propHandlePickupChange(addr);
          setPickupLocation({ latitude: region.latitude, longitude: region.longitude });
          setIsPickupCurrent(false);
          if (dropoffLocation) fetchRoute(dropoffLocation);
          fetchNearbyDrivers(region.latitude, region.longitude);
        } else {
          propHandleDropoffChange(addr);
          setDropoffLocation({ latitude: region.latitude, longitude: region.longitude });
          if (pickupLocation) fetchRoute({ latitude: region.latitude, longitude: region.longitude });
        }
      }
    }, 500);
  };
  // Handle cancel button
  const handleCancel = () => {
    // Reset all states
    setPickupLocation(null);
    setDropoffLocation(null);
    setRouteCoords([]);
    setDistance('');
    setTravelTime('');
    setEstimatedPrice(null);
    propHandlePickupChange('');
    propHandleDropoffChange('');
    setShowPickupSelector(false);
    setShowDropoffSelector(false);
    setShowRideOptions(false);
  };
  // Handle cancel ride during searching
  const handleCancelRide = async () => {
    if (currentRideId) {
      socket.emit('cancelRide', { rideId: currentRideId });
    }
    setRideStatus("idle");
    setCurrentRideId(null);
    setShowConfirmModal(false);
    // Clear polling interval
    AsyncStorage.getItem('statusPollInterval').then(id => {
      if (id) {
        clearInterval(parseInt(id));
        AsyncStorage.removeItem('statusPollInterval');
      }
    });
    // Clear acceptance timeout if any
    AsyncStorage.getItem('acceptanceTimeout').then(id => {
      if (id) {
        clearTimeout(parseInt(id));
        AsyncStorage.removeItem('acceptanceTimeout');
      }
    });
    await clearRideStorage();
    Alert.alert("Ride Cancelled", "Your ride booking has been cancelled.");
  };
  // Handle ride cancelled from server
  useEffect(() => {
    const handleRideCancelled = async (data: { rideId: string }) => {
      if (data.rideId === currentRideId) {
        setRideStatus("idle");
        setCurrentRideId(null);
        await clearRideStorage();
        Alert.alert("Ride Cancelled", "Your ride has been cancelled.");
      }
    };
    socket.on("rideCancelled", handleRideCancelled);
    return () => socket.off("rideCancelled", handleRideCancelled);
  }, [currentRideId]);
  // Handle bill modal close and reset
  const handleBillModalClose = async () => {
    setShowBillModal(false);
    // Reset all ride states after bill is shown
    setTimeout(async () => {
      setCurrentRideId(null);
      setDriverId(null);
      setDriverLocation(null);
      setAcceptedDriver(null);
      setRouteCoords([]);
      setPickupLocation(null);
      setDropoffLocation(null);
      propHandlePickupChange("");
      propHandleDropoffChange("");
      setRideStatus("idle");
      setDriverArrivedAlertShown(false);
      setRideCompletedAlertShown(false);
      setShowRideOptions(false);
      setShowDriverAssignedModal(false);
      setShowDriverArrivedOverlay(false);
      setTravelledKm(0);
      setLastCoord(null);
      setDistance('');
      setTravelTime('');
      setEstimatedPrice(null);
     
      await clearRideStorage();
      // Fetch all drivers again after ride completion
      if (location) {
        fetchNearbyDrivers(location.latitude, location.longitude);
      }
    }, 1000);
  };

  // Function to clear all ride-related storage
  const clearRideStorage = async () => {
    const rideKeys = [
      'currentRideId', 'acceptedDriver', 'rideStatus', 'bookedAt', 'bookingOTP',
      'statusPollInterval', 'acceptanceTimeout', 'ridePickup', 'rideDropoff',
      'ridePickupLocation', 'rideDropoffLocation', 'rideRouteCoords', 'rideDistance',
      'rideTravelTime', 'rideSelectedType', 'rideWantReturn', 'rideEstimatedPrice'
    ];
    await AsyncStorage.multiRemove(rideKeys);
    console.log('🧹 Cleared all ride-related storage');
  };
  return (
    <View style={styles.container}>
      {isLoadingLocation ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#4CAF50" />
          <Text style={styles.loadingText}>Fetching your location...</Text>
        </View>
      ) : (
        <>
          <View style={styles.mapContainer}>
            {location && (
              <MapView
                ref={mapRef}
                style={styles.map}
                initialRegion={{
                  latitude: location.latitude,
                  longitude: location.longitude,
                  latitudeDelta: 0.01,
                  longitudeDelta: 0.01,
                }}
                onRegionChangeComplete={(region) => {
                  if (showPickupSelector)
                    handleRegionChangeComplete(region, true);
                  else if (showDropoffSelector)
                    handleRegionChangeComplete(region, false);
                }}
                showsUserLocation
              >
                {/* Pickup & Drop markers */}
                {pickupLocation && (
                  <Marker
                    coordinate={pickupLocation}
                    title="Pickup"
                    pinColor="blue"
                  />
                )}
                {dropoffLocation && (
                  <Marker
                    coordinate={dropoffLocation}
                    title="Dropoff"
                    pinColor="red"
                  />
                )}
                {/* Driver marker */}
                {driverLocation && (
                  <Marker
                    coordinate={driverLocation}
                    title="Driver"
                    key={`driver-${driverLocation.latitude}-${driverLocation.longitude}`}
                  >
                    <View style={styles.driverMarkerContainer}>
                      <View
                        style={[
                          styles.vehicleIconContainer,
                          {
                            backgroundColor:
                              rideStatus === "onTheWay" ||
                              rideStatus === "arrived" ||
                              rideStatus === "started"
                                ? "#FF6B00"
                                : "#4CAF50",
                          },
                        ]}
                      >
                        {renderVehicleIcon(selectedRideType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
                      </View>
                    </View>
                  </Marker>
                )}
                {/* Nearby Drivers */}
                {(rideStatus === "idle" || rideStatus === "searching") &&
                  nearbyDrivers &&
                  nearbyDrivers.length > 0 &&
                  nearbyDrivers.map((driver) => (
                    <Marker
                      key={`nearby-${driver.driverId}-${driver.location.coordinates[1]}-${driver.location.coordinates[0]}`}
                      coordinate={{
                        latitude: driver.location.coordinates[1],
                        longitude: driver.location.coordinates[0],
                      }}
                      title={`${driver.name} (${driver.status || "Live"})`}
                    >
                      <View style={styles.driverMarkerContainer}>
                        <View style={styles.vehicleIconContainer}>
                          {renderVehicleIcon(driver.vehicleType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
                        </View>
                      </View>
                    </Marker>
                  ))}
                {/* Route polyline */}
                {routeCoords && routeCoords.length > 0 && (
                  <Polyline
                    coordinates={routeCoords}
                    strokeWidth={5}
                    strokeColor="#4CAF50"
                  />
                )}
              </MapView>
            )}
      
            {/* Center Pin when selecting */}
            {(showPickupSelector || showDropoffSelector) && (
              <View style={styles.centerMarker}>
                <MaterialIcons
                  name="location-pin"
                  size={48}
                  color={showPickupSelector ? '#4CAF50' : '#F44336'}
                />
              </View>
            )}
            {/* Driver count display based on ride status */}
            {(rideStatus === "idle" || rideStatus === "searching") && (
              <View style={styles.driversCountOverlay}>
                <Text style={styles.driversCountText}>
                  Available Drivers Nearby: {nearbyDriversCount}
                </Text>
              </View>
            )}
            {/* Active ride: Show driver status */}
            {(rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && (
              <View style={styles.driversCountOverlay}>
                <Text style={styles.driversCountText}>
                  Your Driver is on the way
                </Text>
              </View>
            )}
          </View>
       
          {/* Driver Info Section */}
          {acceptedDriver && (
            <View style={styles.driverInfoContainer}>
              <Text style={styles.driverInfoTitle}>Your Driver</Text>
              <View style={styles.driverDetailsRow}>
                <MaterialIcons name="person" size={20} color="#4CAF50" />
                <Text style={styles.driverDetailText}>{acceptedDriver.name}</Text>
              </View>
              <View style={styles.driverDetailsRow}>
                <MaterialIcons name="phone" size={20} color="#4CAF50" />
                <Text style={styles.driverDetailText}>{acceptedDriver.driverMobile || 'N/A'}</Text>
              </View>
              <View style={styles.driverDetailsRow}>
                <MaterialIcons name="directions-car" size={20} color="#4CAF50" />
                <Text style={styles.driverDetailText}>{acceptedDriver.vehicleType}</Text>
              </View>
            </View>
          )}
       
          {/* Status Indicator */}
          {rideStatus === "onTheWay" && (
            <View style={styles.driversCountOverlay}>
              <Text style={styles.driversCountText}>
                Driver is on the way
                {driverLocation && pickupLocation && (
                  <Text style={styles.distanceText}>
                    {"\n"}Estimated arrival: {calculateDistance(
                      pickupLocation.latitude,
                      pickupLocation.longitude,
                      driverLocation.latitude,
                      driverLocation.longitude
                    ).toFixed(1)} km away
                  </Text>
                )}
              </Text>
            </View>
          )}
          {rideStatus === "arrived" && (
            <View style={[styles.driversCountOverlay, { backgroundColor: '#4CAF50' }]}>
              <Text style={[styles.driversCountText, { color: '#FFFFFF' }]}>
                🎉 Driver Has Arrived!
              </Text>
            </View>
          )}
          {rideStatus === "started" && (
            <View style={styles.driversCountOverlay}>
              <Text style={styles.driversCountText}>
                Ride in Progress...
              </Text>
            </View>
          )}
       
          {/* Input Container - Hide when not idle */}
          {rideStatus === "idle" && (
            <View style={styles.inputContainer}>
              <View style={styles.inputRow}>
                <View style={styles.inputWrapper}>
                  <View style={styles.inputIconContainer}>
                    <MaterialIcons name="my-location" size={20} color="#4CAF50" />
                  </View>
                  <TextInput
                    style={styles.input}
                    placeholder="Enter pickup location"
                    value={pickup}
                    onChangeText={handlePickupChange}
                    placeholderTextColor="#999"
                  />
                </View>
                <TouchableOpacity
                  style={styles.selectMapButton}
                  onPress={() => {
                    setShowPickupSelector((prev) => !prev);
                    setShowDropoffSelector(false);
                  }}
                >
                  <Text style={styles.selectMapButtonText}>
                    {showPickupSelector ? 'Done' : 'Select on Map'}
                  </Text>
                </TouchableOpacity>
              </View>
        
              {showPickupSuggestions && (
                <View style={styles.suggestionsContainer}>
                  {pickupLoading ? (
                    <View style={styles.loadingContainer}>
                      <ActivityIndicator size="small" color="#4CAF50" />
                      <Text style={styles.loadingText}>Loading suggestions...</Text>
                    </View>
                  ) : suggestionsError ? (
                    <View style={styles.errorContainer}>
                      <Text style={styles.errorText}>{suggestionsError}</Text>
                    </View>
                  ) : pickupSuggestions.length > 0 ? (
                    pickupSuggestions.map((item) => (
                      renderSuggestionItem(item, () => selectPickupSuggestion(item), item.id)
                    ))
                  ) : (
                    <View style={styles.noSuggestionsContainer}>
                      <Text style={styles.noSuggestionsText}>No suggestions found</Text>
                    </View>
                  )}
                </View>
              )}
        
              <View style={styles.inputRow}>
                <View style={styles.inputWrapper}>
                  <View style={styles.inputIconContainer}>
                    <MaterialIcons name="place" size={20} color="#F44336" />
                  </View>
                  <TextInput
                    style={styles.input}
                    placeholder="Enter dropoff location"
                    value={dropoff}
                    onChangeText={handleDropoffChange}
                    placeholderTextColor="#999"
                  />
                </View>
                <TouchableOpacity
                  style={styles.selectMapButton}
                  onPress={() => {
                    setShowDropoffSelector((prev) => !prev);
                    setShowPickupSelector(false);
                  }}
                >
                  <Text style={styles.selectMapButtonText}>
                    {showDropoffSelector ? 'Done' : 'Select on Map'}
                  </Text>
                </TouchableOpacity>
              </View>
        
              {showDropoffSuggestions && (
                <View style={styles.suggestionsContainer}>
                  {dropoffLoading ? (
                    <View style={styles.loadingContainer}>
                      <ActivityIndicator size="small" color="#4CAF50" />
                      <Text style={styles.loadingText}>Loading suggestions...</Text>
                    </View>
                  ) : suggestionsError ? (
                    <View style={styles.errorContainer}>
                      <Text style={styles.errorText}>{suggestionsError}</Text>
                    </View>
                  ) : dropoffSuggestions.length > 0 ? (
                    dropoffSuggestions.map((item) => (
                      renderSuggestionItem(item, () => selectDropoffSuggestion(item), item.id)
                    ))
                  ) : (
                    <View style={styles.noSuggestionsContainer}>
                      <Text style={styles.noSuggestionsText}>No suggestions found</Text>
                    </View>
                  )}
                </View>
              )}
            </View>
          )}
    
          {/* API Error */}
          {apiError && (
            <View style={styles.errorContainer}>
              <Text style={styles.errorText}>{apiError}</Text>
            </View>
          )}
       
          {/* Cancel and Book Ride Buttons - Hide when not idle */}
          {rideStatus === "idle" && (
            <View style={styles.actionButtonsContainer}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={handleCancel}
              >
                <Text style={styles.cancelButtonText}>CANCEL</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.bookRideButton,
                  isBookRideButtonEnabled ? styles.enabledBookRideButton : styles.disabledBookRideButton,
                ]}
                onPress={handleBookRide}
                disabled={!isBookRideButtonEnabled}
              >
                <Text style={styles.bookRideButtonText}>BOOK RIDE</Text>
              </TouchableOpacity>
            </View>
          )}
          {/* Route Details Modal */}
          <Modal
            animationType="slide"
            transparent={true}
            visible={showRouteDetailsModal}
            onRequestClose={() => setShowRouteDetailsModal(false)}
          >
            <View style={styles.routeDetailsModalOverlay}>
              <View style={styles.routeDetailsModalContainer}>
                <View style={styles.routeDetailsModalHeader}>
                  <Text style={styles.routeDetailsModalTitle}>RIDE DETAILS</Text>
                  <TouchableOpacity onPress={() => setShowRouteDetailsModal(false)}>
                    <MaterialIcons name="close" size={24} color="#333" />
                  </TouchableOpacity>
                </View>
           
                <ScrollView style={styles.routeDetailsContent} showsVerticalScrollIndicator={false}>
                  <View style={styles.routeDetailsRow}>
                    <Text style={styles.routeDetailsLabel}>DISTANCE:</Text>
                    <Text style={styles.routeDetailsValue}>{distance || '---'}</Text>
                  </View>
                  <View style={styles.routeDetailsRow}>
                    <Text style={styles.routeDetailsLabel}>TRAVEL TIME:</Text>
                    <Text style={styles.routeDetailsValue}>{travelTime || '---'}</Text>
                  </View>
                  <View style={styles.routeDetailsRow}>
                    <Text style={styles.routeDetailsLabel}>PRICE:</Text>
                    <Text style={styles.routeDetailsValue}>₹{estimatedPrice || 'Calculating...'}</Text>
                  </View>
               
                  <View style={styles.routeDetailsDivider} />
               
                  <Text style={styles.availableDriversText}>Available Drivers Nearby: {nearbyDriversCount}</Text>
               
                  <View style={styles.rideOptionsContainer}>
                    {/* Porter Option */}
                    <TouchableOpacity
                      style={[
                        styles.rideOptionButton,
                        selectedRideType === 'port' && styles.selectedRideOptionButton,
                      ]}
                      onPress={() => {
                        setSelectedRideType('port');
                      }}
                    >
                      <View style={styles.rideOptionIconContainer}>
                        <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
                      </View>
                      <View style={styles.rideOptionInfoContainer}>
                        <Text style={[
                          styles.rideOptionTypeText,
                          selectedRideType === 'port' && styles.selectedRideOptionTypeText,
                        ]}>CarGo Porter</Text>
                        <Text style={[
                          styles.rideOptionDetailsText,
                          selectedRideType === 'port' && styles.selectedRideOptionDetailsText,
                        ]}>Max 5 ton</Text>
                        <Text style={styles.rideOptionPriceText}>
                          {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
                        </Text>
                      </View>
                    </TouchableOpacity>
                 
                    {/* Taxi Option */}
                    <TouchableOpacity
                      style={[
                        styles.rideOptionButton,
                        selectedRideType === 'taxi' && styles.selectedRideOptionButton,
                      ]}
                      onPress={() => {
                        setSelectedRideType('taxi');
                      }}
                    >
                      <View style={styles.rideOptionIconContainer}>
                        <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
                      </View>
                      <View style={styles.rideOptionInfoContainer}>
                        <Text style={[
                          styles.rideOptionTypeText,
                          selectedRideType === 'taxi' && styles.selectedRideOptionTypeText,
                        ]}>Taxi</Text>
                        <Text style={[
                          styles.rideOptionDetailsText,
                          selectedRideType === 'taxi' && styles.selectedRideOptionDetailsText,
                        ]}>4 seats</Text>
                        <Text style={styles.rideOptionPriceText}>
                          {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
                        </Text>
                      </View>
                    </TouchableOpacity>
                 
                    {/* Bike Option */}
                    <TouchableOpacity
                      style={[
                        styles.rideOptionButton,
                        selectedRideType === 'bike' && styles.selectedRideOptionButton,
                      ]}
                      onPress={() => {
                        setSelectedRideType('bike');
                      }}
                    >
                      <View style={styles.rideOptionIconContainer}>
                        <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
                      </View>
                      <View style={styles.rideOptionInfoContainer}>
                        <Text style={[
                          styles.rideOptionTypeText,
                          selectedRideType === 'bike' && styles.selectedRideOptionTypeText,
                        ]}>Motorcycle</Text>
                        <Text style={[
                          styles.rideOptionDetailsText,
                          selectedRideType === 'bike' && styles.selectedRideOptionDetailsText,
                        ]}>1 person</Text>
                        <Text style={styles.rideOptionPriceText}>
                          {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
                        </Text>
                      </View>
                    </TouchableOpacity>
                  </View>
                </ScrollView>
           
                <View style={styles.routeDetailsModalButtons}>
                  <TouchableOpacity
                    style={styles.routeDetailsCancelButton}
                    onPress={() => setShowRouteDetailsModal(false)}
                  >
                    <Text style={styles.routeDetailsCancelButtonText}>CANCEL</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.routeDetailsConfirmButton}
                    onPress={() => {
                      setShowRouteDetailsModal(false);
                      handleConfirmBookingFromModal();
                    }}
                  >
                    <Text style={styles.routeDetailsConfirmButtonText}>BOOK RIDE</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </View>
          </Modal>
       
          {/* Ride Details Modal - New modal matching the screenshot */}
          <Modal
            animationType="slide"
            transparent={true}
            visible={showRideOptions && !showRouteDetailsModal}
            onRequestClose={() => setShowRideOptions(false)}
          >
            <View style={styles.rideDetailsModalOverlay}>
              <View style={styles.rideDetailsModalContainer}>
                <View style={styles.rideDetailsHeader}>
                  <Text style={styles.rideDetailsTitle}>RIDE DETAILS</Text>
                  <TouchableOpacity onPress={() => setShowRideOptions(false)}>
                    <MaterialIcons name="close" size={24} color="#333" />
                  </TouchableOpacity>
                </View>
             
                <ScrollView style={styles.rideDetailsContent} showsVerticalScrollIndicator={false}>
                  <View style={styles.rideDetailsSection}>
                    <Text style={styles.rideDetailsSectionTitle}>Pickup Location</Text>
                    <Text style={styles.rideDetailsLocationText}>{pickup || '---'}</Text>
                  </View>
               
                  <View style={styles.rideDetailsSection}>
                    <Text style={styles.rideDetailsSectionTitle}>Drop-off</Text>
                    <Text style={styles.rideDetailsLocationText}>{dropoff || '---'}</Text>
                  </View>
               
                  <View style={styles.rideDetailsRow}>
                    <Text style={styles.rideDetailsLabel}>Distance:</Text>
                    <Text style={styles.rideDetailsValue}>{distance || '---'}</Text>
                  </View>
               
                  <View style={styles.rideDetailsRow}>
                    <Text style={styles.rideDetailsLabel}>Price:</Text>
                    <Text style={styles.rideDetailsValue}>₹{estimatedPrice || '---'}</Text>
                  </View>
               
                  <View style={styles.rideDetailsRow}>
                    <Text style={styles.rideDetailsLabel}>Return trip:</Text>
                    <Switch
                      value={wantReturn}
                      onValueChange={setWantReturn}
                      trackColor={{ false: '#767577', true: '#4CAF50' }}
                      thumbColor={wantReturn ? '#FFFFFF' : '#f4f3f4'}
                    />
                  </View>
                </ScrollView>
             
                <View style={styles.rideDetailsButtons}>
                  <TouchableOpacity
                    style={styles.bookMyRideButton}
                    onPress={handleBookRide}
                    disabled={!isBookRideButtonEnabled}
                  >
                    <Text style={styles.bookMyRideButtonText}>BOOK MY RIDE</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </View>
          </Modal>
    
          {/* Confirm Modal */}
          <Modal
            animationType="slide"
            transparent={true}
            visible={showConfirmModal}
            onRequestClose={() => setShowConfirmModal(false)}
          >
            <View style={styles.modalOverlay}>
              <View style={styles.modalContainer}>
                <View style={styles.modalHeader}>
                  <Text style={styles.modalTitle}>Confirm Booking</Text>
                  <TouchableOpacity onPress={() => setShowConfirmModal(false)}>
                    <MaterialIcons name="close" size={24} color="#666" />
                  </TouchableOpacity>
                </View>
                <View style={styles.modalContent}>
                  <View style={styles.modalIconContainer}>
                    <Ionicons name="checkmark-circle" size={60} color="#4CAF50" />
                  </View>
                  <Text style={styles.modalMessage}>
                    Thank you for choosing EAZY GO!
                  </Text>
                  <Text style={styles.modalSubMessage}>
                    Your ride has been successfully booked.
                  </Text>
                  <View style={styles.otpContainer}>
                    <Text style={styles.otpLabel}>Your pickup OTP is:</Text>
                    <Text style={styles.otpValue}>{bookingOTP}</Text>
                  </View>
                  <Text style={styles.otpWarning}>
                    Please don't share it with anyone. Only share with our driver.
                  </Text>
                </View>
                <View style={styles.modalButtons}>
                  <TouchableOpacity
                    style={styles.modalCancelButton}
                    onPress={() => setShowConfirmModal(false)}
                  >
                    <Text style={styles.modalCancelButtonText}>Cancel</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.modalConfirmButton}
                    onPress={handleConfirmBooking}
                  >
                    <Text style={styles.modalConfirmButtonText}>Confirm</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </View>
          </Modal>
          {/* Bill Modal */}
          <Modal
            animationType="slide"
            transparent={true}
            visible={showBillModal}
            onRequestClose={handleBillModalClose}
          >
            <View style={styles.modalOverlay}>
              <View style={styles.modalContainer}>
                <View style={styles.modalHeader}>
                  <Text style={styles.modalTitle}>Ride Bill</Text>
                  <TouchableOpacity onPress={handleBillModalClose}>
                    <MaterialIcons name="close" size={24} color="#666" />
                  </TouchableOpacity>
                </View>
                <View style={styles.modalContent}>
                  <View style={styles.modalIconContainer}>
                    <Ionicons name="receipt" size={60} color="#4CAF50" />
                  </View>
                  <Text style={styles.modalMessage}>
                    Thank you for choosing EAZY GO!
                  </Text>
                  <Text style={styles.modalSubMessage}>
                    Your ride has been completed.
                  </Text>
                  <View style={styles.billDetailsContainer}>
                    <View style={styles.billRow}>
                      <Text style={styles.billLabel}>Driver Name:</Text>
                      <Text style={styles.billValue}>{billDetails.driverName}</Text>
                    </View>
                    <View style={styles.billRow}>
                      <Text style={styles.billLabel}>Vehicle Type:</Text>
                      <Text style={styles.billValue}>{billDetails.vehicleType}</Text>
                    </View>
                    <View style={styles.billRow}>
                      <Text style={styles.billLabel}>Distance:</Text>
                      <Text style={styles.billValue}>{billDetails.distance}</Text>
                    </View>
                    <View style={styles.billRow}>
                      <Text style={styles.billLabel}>Travel Time:</Text>
                      <Text style={styles.billValue}>{billDetails.travelTime}</Text>
                    </View>
                    <View style={styles.billDivider} />
                    <View style={styles.billRow}>
                      <Text style={styles.billTotalLabel}>Total Amount:</Text>
                      <Text style={styles.billTotalValue}>₹{billDetails.charge}</Text>
                    </View>
                  </View>
                </View>
                <View style={styles.modalButtons}>
                  <TouchableOpacity
                    style={styles.modalConfirmButton}
                    onPress={handleBillModalClose}
                  >
                    <Text style={styles.modalConfirmButtonText}>OK</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </View>
          </Modal>
         
          {/* Searching Overlay - Matches Figma design */}
          {rideStatus === "searching" && (
            <View style={styles.searchingOverlay}>
              <Image
                source={SearchingIllustration}
                style={styles.searchingIllustration}
              />
              <ActivityIndicator size="large" color="#4CAF50" style={styles.progressBar} />
              <Text style={styles.searchingMessage}>PLEASE HOLD! WE ARE SEARCHING FOR NEARBY DRIVER FOR YOU.</Text>
              <TouchableOpacity style={styles.cancelRideButton} onPress={handleCancelRide}>
                <Text style={styles.cancelRideButtonText}>Cancel Ride</Text>
              </TouchableOpacity>
            </View>
          )}
         
          {/* Driver Assigned Overlay - Same style as searching overlay */}
          {showDriverAssignedModal && (
            <View style={styles.searchingOverlay}>
            {/*  <Image
                source={DriverAssignedIllustration}
                style={styles.driverAssignedIllustration}
              /> */}
              <View style={styles.driverAssignedHeader}>
                <Text style={styles.driverAssignedTitle}>Driver Assigned</Text>
              </View>
              <View style={styles.driverInfoRow}>
                <View style={styles.driverProfileImageContainer}>
                  <FontAwesome name="user-circle" size={60} color="#4CAF50" />
                </View>
                <View style={styles.driverDetailsContainer}>
                  <Text style={styles.driverNameText}>{acceptedDriver?.name || 'Driver'}</Text>
                  <Text style={styles.driverVehicleText}>{acceptedDriver?.vehicleType || 'Taxi'}</Text>
                </View>
              </View>
              <View style={styles.driverContactContainer}>
                <Text style={styles.driverContactLabel}>Contact Number</Text>
                <View style={styles.driverPhoneRow}>
                  <Text style={styles.driverPhoneText}>
                    {formatPhoneNumber(acceptedDriver?.driverMobile)}
                  </Text>
                  <TouchableOpacity style={styles.phoneIconContainer} onPress={handlePhoneCall}>
                    <MaterialIcons name="phone" size={24} color="#4CAF50" />
                  </TouchableOpacity>
                </View>
              </View>
              <View style={styles.otpInfoContainer}>
                <Text style={styles.otpInfoText}>
                  Our Driver once reached. please share this OTP:
                </Text>
                <View style={styles.otpDisplayContainer}>
                  <Text style={styles.otpDisplayText}>{bookingOTP}</Text>
                </View>
              </View>
            </View>
          )}
         
          {/* Driver Arrived Overlay */}
          {showDriverArrivedOverlay && (
            <View style={styles.searchingOverlay}>
              <Image
                source={DriverArrivedIllustration}
                style={styles.searchingIllustration}
              />
              <Text style={styles.searchingMessage}>DRIVER HAS ARRIVED!</Text>
              <Text style={styles.driverArrivedSubMessage}>Please share your OTP: {bookingOTP}</Text>
            </View>
          )}
        </>
      )}
    </View>
  );
};
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#F5F5F5' },
  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
  loadingText: { color: '#757575', fontSize: 16, marginTop: 10 },
  mapContainer: {
    height: Dimensions.get('window').height * 0.6, // 60% of screen
    width: '100%',
    borderRadius: 15,
    overflow: 'hidden',
    marginBottom: 15,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4
  },
  map: { ...StyleSheet.absoluteFillObject },
  centerMarker: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: [{ translateX: -24 }, { translateY: -48 }],
    zIndex: 10,
  },
  driversCountOverlay: {
    position: 'absolute',
    top: 10,
    left: 10,
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2
  },
  driversCountText: { fontSize: 14, fontWeight: '600', color: '#333333' },
  driverInfoContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 15,
    marginHorizontal: 20,
    marginBottom: 15,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4
  },
  driverInfoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 10
  },
  driverDetailsRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8
  },
  driverDetailText: {
    fontSize: 14,
    color: '#555555',
    marginLeft: 10
  },
  statusContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 15,
    marginHorizontal: 20,
    marginBottom: 15,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4
  },
  statusIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8
  },
  statusText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#4CAF50',
    marginLeft: 10
  },
  statusSubText: {
    fontSize: 14,
    color: '#757575',
    textAlign: 'center'
  },
  inputContainer: {
    marginHorizontal: 20,
    marginBottom: 15,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE'
  },
  inputWrapper: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingVertical: 5,
  },
  inputIconContainer: {
    marginRight: 10,
    justifyContent: 'center',
    alignItems: 'center'
  },
  distanceText: {
    fontSize: 12,
    fontWeight: 'normal',
    color: '#666666',
  },
  input: { flex: 1, fontSize: 16, paddingVertical: 12, color: '#333' },
  selectMapButton: {
    paddingHorizontal: 10,
    paddingVertical: 5,
    backgroundColor: '#4CAF50',
    borderRadius: 5,
    marginRight: 10,
  },
  selectMapButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
  },
  suggestionsContainer: {
    marginTop: 5,
    marginHorizontal: 15,
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    maxHeight: 200
  },
  suggestionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE'
  },
  suggestionIcon: { marginRight: 12 },
  suggestionTextContainer: { flex: 1 },
  suggestionMainText: { fontSize: 16, fontWeight: '500', color: '#333333' },
  suggestionSubText: { fontSize: 12, color: '#757575', marginTop: 2 },
  noSuggestionsContainer: { paddingVertical: 12, alignItems: 'center' },
  noSuggestionsText: { fontSize: 14, color: '#666666' },
  distanceTimeContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginHorizontal: 20,
    marginBottom: 15,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 15,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4
  },
  distanceTimeItem: { flexDirection: 'row', alignItems: 'center' },
  distanceTimeLabel: { fontSize: 14, fontWeight: '600', color: '#757575', marginLeft: 8 },
  distanceTimeValue: { fontSize: 14, fontWeight: 'bold', color: '#333333', marginLeft: 5 },
  rideTypeContainer: {
    marginHorizontal: 20,
    marginBottom: 15,
  },
  rideTypeButton: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 5,
    marginBottom: 10,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4
  },
  selectedRideTypeButton: {
    backgroundColor: '#4caf50',
    borderWidth: 2,
    borderColor: '#4caf50'
  },
  rideIconContainer: {
    marginRight: 15,
    justifyContent: 'center',
    alignItems: 'center'
  },
  rideInfoContainer: {
    flex: 1,
  },
  rideTypeText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 4,
  },
  selectedRideTypeText: {
    color: '#FFFFFF'
  },
  rideDetailsText: {
    fontSize: 14,
    color: '#757575',
    marginBottom: 6,
  },
  selectedRideDetailsText: {
    color: '#FFFFFF'
  },
  ridePriceText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333333',
  },
  checkmarkContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    paddingLeft: 10,
  },
  // New styles for action buttons
  actionButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginHorizontal: 20,
    marginBottom: 20,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    paddingVertical: 15,
    borderRadius: 12,
    alignItems: 'center',
    marginRight: 10,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4
  },
  cancelButtonText: {
    color: '#666666',
    fontSize: 16,
    fontWeight: '600'
  },
  bookRideButton: {
    flex: 1,
    paddingVertical: 15,
    borderRadius: 12,
    alignItems: 'center',
    marginLeft: 10,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4
  },
  enabledBookRideButton: { backgroundColor: '#4caf50' },
  disabledBookRideButton: { backgroundColor: '#BDBDBD' },
  bookRideButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600'
  },
  errorContainer: {
    marginHorizontal: 20,
    marginBottom: 15,
    backgroundColor: '#FFEBEE',
    borderRadius: 12,
    padding: 15,
    borderLeftWidth: 4,
    borderLeftColor: '#F44336'
  },
  errorText: {
    color: '#D32F2F',
    fontSize: 14,
    textAlign: 'center'
  },
  pricePanel: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 20,
    maxHeight: Dimensions.get('window').height * 0.5,
    elevation: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -3 },
    shadowOpacity: 0.2,
    shadowRadius: 6
  },
  panelHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
    paddingBottom: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE'
  },
  panelTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333'
  },
  priceDetailsContainer: {
    flexDirection: 'row',
    marginBottom: 8
  },
  driverMarkerContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    width: 50,
    height: 50,
  },
  vehicleIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#4CAF50',
    alignItems: 'center',
    justifyContent: 'center',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.3,
    shadowRadius: 2
  },
  priceInfoContainer: {
    flex: 1
  },
  priceRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10
  },
  priceLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#757575',
    flex: 1
  },
  priceValue: {
    fontSize: 13,
    fontWeight: 'bold',
    color: '#333333',
    flex: 2,
    textAlign: 'right'
  },
  returnTripRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 5
  },
  bookButtonContainer: {
    marginTop: 10
  },
  bookMyRideButton: {
    backgroundColor: '#4CAF50',
    paddingVertical: 15,
    borderRadius: 12,
    alignItems: 'center',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4
  },
  bookMyRideButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600'
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center'
  },
  modalContainer: {
    width: '85%',
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    padding: 20,
    elevation: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 6
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333333'
  },
  modalContent: {
    alignItems: 'center',
    marginBottom: 20
  },
  modalIconContainer: {
    marginBottom: 15
  },
  modalMessage: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    textAlign: 'center',
    marginBottom: 5
  },
  modalSubMessage: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
    marginBottom: 20
  },
  otpContainer: {
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    padding: 15,
    alignItems: 'center',
    marginBottom: 15,
    width: '100%'
  },
  otpLabel: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 5
  },
  otpValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4caf50'
  },
  otpWarning: {
    fontSize: 12,
    color: '#F44336',
    textAlign: 'center',
    fontStyle: 'italic'
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  modalCancelButton: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    paddingVertical: 12,
    borderRadius: 10,
    marginRight: 10,
    alignItems: 'center'
  },
  modalCancelButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#666666'
  },
  modalConfirmButton: {
    flex: 1,
    backgroundColor: '#4CAF50',
    paddingVertical: 12,
    borderRadius: 10,
    marginLeft: 10,
    alignItems: 'center'
  },
  modalConfirmButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF'
  },
  vehicleMarkerContainer: {
    borderRadius: 20,
    padding: 5,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.3,
    shadowRadius: 2
  },
  // Bill Modal Styles
  billDetailsContainer: {
    width: '100%',
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    padding: 15,
    marginBottom: 15
  },
  billRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10
  },
  billLabel: {
    fontSize: 14,
    color: '#666666'
  },
  billValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333333'
  },
  billDivider: {
    height: 1,
    backgroundColor: '#DDDDDD',
    marginVertical: 10
  },
  billTotalLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333'
  },
  billTotalValue: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#4CAF50'
  },
  // Route Details Modal Styles
  routeDetailsModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end', // Position at bottom
    alignItems: 'center',
  },
  routeDetailsModalContainer: {
    width: '100%', // Full width
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 20,
    maxHeight: '70%', // Limit height to 70% of screen
    elevation: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -3 },
    shadowOpacity: 0.2,
    shadowRadius: 6,
  },
  routeDetailsModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
    paddingBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE'
  },
  routeDetailsModalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333'
  },
  routeDetailsContent: {
    marginBottom: 15,
    maxHeight: 300, // Limit content height
  },
  routeDetailsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  routeDetailsLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333'
  },
  routeDetailsValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#4CAF50'
  },
  routeDetailsDivider: {
    height: 1,
    backgroundColor: '#EEEEEE',
    marginVertical: 10,
  },
  availableDriversText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 10,
  },
  rideOptionsContainer: {
    marginBottom: 5,
  },
  rideOptionButton: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    padding: 10,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#EEEEEE',
  },
  selectedRideOptionButton: {
    backgroundColor: '#4caf50',
    borderWidth: 1,
    borderColor: '#4caf50',
  },
  rideOptionIconContainer: {
    marginRight: 10,
    justifyContent: 'center',
    alignItems: 'center',
  },
  rideOptionInfoContainer: {
    flex: 1,
  },
  rideOptionTypeText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 2,
  },
  selectedRideOptionTypeText: {
    color: '#FFFFFF',
  },
  rideOptionDetailsText: {
    fontSize: 12,
    color: '#757575',
    marginBottom: 4,
  },
  selectedRideOptionDetailsText: {
    color: '#FFFFFF',
  },
  rideOptionPriceText: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#333333',
  },
  routeDetailsModalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#EEEEEE',
  },
  routeDetailsCancelButton: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    paddingVertical: 12,
    borderRadius: 8,
    marginRight: 10,
    alignItems: 'center',
  },
  routeDetailsCancelButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#666666',
  },
  routeDetailsConfirmButton: {
    flex: 1,
    backgroundColor: '#4CAF50',
    paddingVertical: 12,
    borderRadius: 8,
    marginLeft: 10,
    alignItems: 'center',
  },
  routeDetailsConfirmButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  // Ride Details Modal Styles - New modal matching the screenshot
  rideDetailsModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center'
  },
  rideDetailsModalContainer: {
    width: '90%',
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    padding: 20,
    elevation: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 6
  },
  rideDetailsHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
    paddingBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE'
  },
  rideDetailsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333'
  },
  rideDetailsContent: {
    marginBottom: 20
  },
  rideDetailsSection: {
    marginBottom: 15
  },
  rideDetailsSectionTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#757575',
    marginBottom: 5
  },
  rideDetailsLocationText: {
    fontSize: 16,
    color: '#333333'
  },
  rideDetailsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15
  },
  rideDetailsLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333'
  },
  rideDetailsValue: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#4CAF50'
  },
  rideDetailsButtons: {
    marginTop: 10
  },
  // New styles for searching overlay
  searchingOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    height: Dimensions.get('window').height * 0.55,
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
    elevation: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -3 },
    shadowOpacity: 0.2,
    shadowRadius: 6,
  },
  searchingIllustration: {
    width: 200,
    height: 200,
    resizeMode: 'contain',
    marginBottom: 20,
  },
  progressBar: {
    marginBottom: 20,
  },
  searchingMessage: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    textAlign: 'center',
    marginBottom: 30,
  },
  cancelRideButton: {
    backgroundColor: '#4CAF50',
    paddingVertical: 15,
    paddingHorizontal: 40,
    borderRadius: 10,
  },
  cancelRideButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  // New styles for driver assigned overlay - same as searching overlay
  driverAssignedIllustration: {
    width: 450,
    height: 98,
    resizeMode: 'contain',
    marginBottom: 10,
  },
  driverAssignedHeader: {
    width: '100%',
    alignItems: 'center',
    marginBottom: 20,
  },
  driverAssignedTitle: {
    fontSize: 15,
    fontWeight: 'bold',
    color: '#333333',
  },
  driverInfoRow: {
    flexDirection: 'row',
    width: '100%',
    alignItems: 'center',
    marginBottom: 20,
  },
  driverProfileImageContainer: {
    marginRight: 15,
  },
  driverDetailsContainer: {
    flex: 1,
  },
  driverNameText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 5,
  },
  driverVehicleText: {
    fontSize: 14,
    color: '#666666',
  },
  driverContactContainer: {
    width: '100%',
    marginBottom: 20,
  },
  driverContactLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 10,
  },
  driverPhoneRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#F5F5F5',
    padding: 15,
    borderRadius: 10,
  },
  driverPhoneText: {
    fontSize: 16,
    color: '#333333',
  },
  phoneIconContainer: {
    padding: 5,
  },
  otpInfoContainer: {
    width: '100%',
    alignItems: 'center',
    marginBottom: 20,
  },
  otpInfoText: {
    fontSize: 16,
    color: '#333333',
    textAlign: 'center',
    marginBottom: 10,
  },
  otpDisplayContainer: {
    backgroundColor: '#F5F5F5',
    padding: 15,
    borderRadius: 10,
    width: '60%',
    alignItems: 'center',
  },
  otpDisplayText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4CAF50',
  },
  driverArrivedSubMessage: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
    marginBottom: 20,
  },
});
export default TaxiContent;

// import React, { useState, useEffect, useRef, useCallback } from 'react';
// import {
//   View,
//   StyleSheet,
//   Text,
//   TouchableOpacity,
//   Dimensions,
//   Alert,
//   ActivityIndicator,
//   Animated,
//   Switch,
//   Modal,
//   TextInput,
//   PermissionsAndroid,
//   Platform,
//   Image,
//   ScrollView,
//   Linking
// } from 'react-native';
// import MapView, { Marker, Polyline, Region } from 'react-native-maps';
// import Geolocation from '@react-native-community/geolocation';
// import socket from '../../socket';
// import haversine from 'haversine-distance';
// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
// import Ionicons from 'react-native-vector-icons/Ionicons';
// import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
// import FontAwesome from 'react-native-vector-icons/FontAwesome';
// import axios from 'axios';
// import Svg, { Path, Circle, Rect } from 'react-native-svg';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getBackendUrl } from '../../util/backendConfig';
// import BikeIcon from '../../../assets001/bike.svg';
// import LorryIcon from '../../../assets001/lorry.svg';
// import TaxiIcon from '../../../assets001/taxi.svg';
// import LogoImage from '../../../assets/logo4.png';
// import TaxiAlertImage from '../../../assets/taxi.png';
// import SearchingIllustration from '../../../assets/logo4.png';
// import DriverAssignedIllustration from '../../../assets/logo4.png';
// import DriverArrivedIllustration from '../../../assets/logo4.png';

// const RideTypeSelector = ({ selectedRideType, setSelectedRideType, estimatedPrice, distance, dynamicPrices }) => {
//   return (
//     <View style={styles.rideTypeContainer}>
//       {/* Porter Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'port' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('port')}
//         activeOpacity={0.7}
//       >
//         <View style={styles.rideIconContainer}>
//           <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'port' && styles.selectedRideTypeText,
//           ]}>CarGo Porter</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'port' && styles.selectedRideDetailsText,
//           ]}>Max 5 ton</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//           </Text>
//         </View>
//         {selectedRideType === 'port' && (
//           <View style={styles.checkmarkContainer}>
//             <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
//           </View>
//         )}
//       </TouchableOpacity>
 
//       {/* Taxi Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'taxi' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('taxi')}
//         activeOpacity={0.7}
//       >
//         <View style={styles.rideIconContainer}>
//           <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'taxi' && styles.selectedRideTypeText,
//           ]}>Taxi</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'taxi' && styles.selectedRideDetailsText,
//           ]}>4 seats</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//           </Text>
//         </View>
//         {selectedRideType === 'taxi' && (
//           <View style={styles.checkmarkContainer}>
//             <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
//           </View>
//         )}
//       </TouchableOpacity>
 
//       {/* Bike Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'bike' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('bike')}
//         activeOpacity={0.7}
//       >
//         <View style={styles.rideIconContainer}>
//           <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'bike' && styles.selectedRideTypeText,
//           ]}>Motorcycle</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'bike' && styles.selectedRideDetailsText,
//           ]}>1 person</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//           </Text>
//         </View>
//         {selectedRideType === 'bike' && (
//           <View style={styles.checkmarkContainer}>
//             <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
//           </View>
//         )}
//       </TouchableOpacity>
//     </View>
//   );
// };

// interface LocationType {
//   latitude: number;
//   longitude: number;
// }

// interface SuggestionType {
//   id: string;
//   name: string;
//   address: string;
//   lat: string;
//   lon: string;
//   type: string;
//   importance: number;
// }

// interface DriverType {
//   driverId: string;
//   name: string;
//   location: {
//     coordinates: [number, number]; // [longitude, latitude]
//   };
//   vehicleType: string;
//   status?: string;
//   driverMobile?: string;
// }

// interface TaxiContentProps {
//   loadingLocation?: boolean;
//   currentLocation: LocationType | null;
//   lastSavedLocation: LocationType | null;
//   pickup: string;
//   dropoff: string;
//   handlePickupChange: (text: string) => void;
//   handleDropoffChange: (text: string) => void;
// }

// const TaxiContent: React.FC<TaxiContentProps> = ({
//   loadingLocation: propLoadingLocation,
//   currentLocation: propCurrentLocation,
//   lastSavedLocation: propLastSavedLocation,
//   pickup,
//   dropoff,
//   handlePickupChange: propHandlePickupChange,
//   handleDropoffChange: propHandleDropoffChange,
// }) => {
//   const [isLoadingLocation, setIsLoadingLocation] = useState(true);
//   const [selectedRideType, setSelectedRideType] = useState<string>('taxi');
//   const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);
//   const [showPricePanel, setShowPricePanel] = useState(false);
//   const [wantReturn, setWantReturn] = useState(false);
//   const [distance, setDistance] = useState<string>('');
//   const [travelTime, setTravelTime] = useState<string>('');
//   const [showConfirmModal, setShowConfirmModal] = useState(false);
//   const [bookingOTP, setBookingOTP] = useState<string>('');
//   const [apiError, setApiError] = useState<string | null>(null);
//   const [location, setLocation] = useState<LocationType | null>(null);
//   const [pickupLocation, setPickupLocation] = useState<LocationType | null>(null);
//   const [dropoffLocation, setDropoffLocation] = useState<LocationType | null>(null);
//   const [routeCoords, setRouteCoords] = useState<LocationType[]>([]);
//   const [currentRideId, setCurrentRideId] = useState<string | null>(null);
//   const [rideStatus, setRideStatus] = useState<"idle" | "searching" | "onTheWay" | "arrived" | "started" | "completed">("idle");
//   const [driverId, setDriverId] = useState<string | null>(null);
//   const [driverLocation, setDriverLocation] = useState<LocationType | null>(null);
//   const [travelledKm, setTravelledKm] = useState(0);
//   const [lastCoord, setLastCoord] = useState<LocationType | null>(null);
//   const [nearbyDrivers, setNearbyDrivers] = useState<DriverType[]>([]);
//   const [nearbyDriversCount, setNearbyDriversCount] = useState<number>(0);
//   const [pickupSuggestions, setPickupSuggestions] = useState<SuggestionType[]>([]);
//   const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);
//   const [dropoffSuggestions, setDropoffSuggestions] = useState<SuggestionType[]>([]);
//   const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);
//   const [pickupLoading, setPickupLoading] = useState(false);
//   const [dropoffLoading, setDropoffLoading] = useState(false);
//   const [suggestionsError, setSuggestionsError] = useState<string | null>(null);
//   const [pickupCache, setPickupCache] = useState<Record<string, SuggestionType[]>>({});
//   const [dropoffCache, setDropoffCache] = useState<Record<string, SuggestionType[]>>({});
//   const [isPickupCurrent, setIsPickupCurrent] = useState(false);
//   const [socketConnected, setSocketConnected] = useState(false);
//   const [driverArrivedAlertShown, setDriverArrivedAlertShown] = useState(false);
//   const [rideCompletedAlertShown, setRideCompletedAlertShown] = useState(false);
//   const [acceptedDriver, setAcceptedDriver] = useState<DriverType | null>(null);
//   const [isBooking, setIsBooking] = useState(false);
//   const [driverName, setDriverName] = useState<string | null>(null);
//   const [driverMobile, setDriverMobile] = useState<string | null>(null);
//   const [bookedAt, setBookedAt] = useState<Date | null>(null);
//   const [showPickupMapModal, setShowPickupMapModal] = useState(false);
//   const [showDropoffMapModal, setShowDropoffMapModal] = useState(false);
//   const [showRouteDetailsModal, setShowRouteDetailsModal] = useState(false);
//   const [dynamicPrices, setDynamicPrices] = useState({
//     bike: 0,
//     taxi: 0,
//     port: 0,
//   });
//   // New state to control when to show ride options
//   const [showRideOptions, setShowRideOptions] = useState(false);
//   // New state for driver assigned modal
//   const [showDriverAssignedModal, setShowDriverAssignedModal] = useState(false);
//   const [showDriverArrivedOverlay, setShowDriverArrivedOverlay] = useState(false);
//   // New state for bill modal
//   const [showBillModal, setShowBillModal] = useState(false);
//   const [billDetails, setBillDetails] = useState({
//     distance: '0 km',
//     travelTime: '0 mins',
//     charge: 0,
//     driverName: '',
//     vehicleType: ''
//   });
//   // Map selection states
//   const [showPickupSelector, setShowPickupSelector] = useState(false);
//   const [showDropoffSelector, setShowDropoffSelector] = useState(false);
  
//   const pickupDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const dropoffDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const regionChangeTimer = useRef<NodeJS.Timeout | null>(null);
//   const [priceLoading, setPriceLoading] = useState(false);
//   const panelAnimation = useRef(new Animated.Value(0)).current;
//   const mapRef = useRef<MapView | null>(null);
  
//   const fallbackLocation: LocationType = {
//     latitude: 11.3312971,
//     longitude: 77.7167303,
//   };

//   // Distance calculation
//   const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371; // Earth's radius in kilometers
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
//               Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//               Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distance = R * c;
//     console.log(`📍 Distance calculation: (${lat1},${lon1}) to (${lat2},${lon2}) = ${distance.toFixed(4)} km`);
//     return distance;
//   };

//   const calculateDistanceInMeters = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371;
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a =
//       Math.sin(dLat/2) * Math.sin(dLat/2) +
//       Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//       Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distanceKm = R * c;
//     return distanceKm * 1000;
//   };

//   // Fetch nearby drivers
//   const fetchNearbyDrivers = (latitude: number, longitude: number) => {
//     console.log(`Fetching nearby drivers for lat: ${latitude}, lng: ${longitude}`);
//     if (socket && socketConnected) {
//       socket.emit("requestNearbyDrivers", {
//         latitude,
//         longitude,
//         radius: 10000,
//         vehicleType: selectedRideType
//       });
//       console.log("Emitted requestNearbyDrivers event");
//     } else {
//       console.log("Socket not connected, attempting to reconnect...");
//       socket.connect();
//       socket.once("connect", () => {
//         console.log("Socket reconnected, emitting requestNearbyDrivers");
//         socket.emit("requestNearbyDrivers", {
//           latitude,
//           longitude,
//           radius: 10000,
//           vehicleType: selectedRideType
//         });
//       });
//     }
//   };

//   // Handle nearby drivers response
//   useEffect(() => {
//     const handleNearbyDriversResponse = (data: { drivers: DriverType[] }) => {
//       console.log('📍 Received nearby drivers response:', JSON.stringify(data, null, 2));
//       if (!location) {
//         console.log("❌ No location available, can't process drivers");
//         return;
//       }
 
//       console.log('📍 User current location:', location);
//       console.log('📍 Number of drivers received:', data.drivers.length);
 
//       // Active ride: Show only accepted driver
//       if (currentRideId && acceptedDriver) {
//         console.log('🚗 Active ride - Showing only accepted driver');
//         const acceptedDriverData = data.drivers.find(d => d.driverId === acceptedDriver.driverId);
//         if (acceptedDriverData) {
//           setNearbyDrivers([acceptedDriverData]);
//           setNearbyDriversCount(1);
//           console.log('✅ Accepted driver found and displayed');
//         } else {
//           setNearbyDrivers([]);
//           setNearbyDriversCount(0);
//           console.log('❌ Accepted driver not found in response');
//         }
//         return;
//       }
 
//       // No active ride: Show all online drivers
//       const filteredDrivers = data.drivers
//         .filter(driver => {
//           console.log(`🔍 Processing driver: ${driver.driverId} (${driver.name})`);
//           console.log(`📍 Driver location: ${driver.location.coordinates[1]}, ${driver.location.coordinates[0]}`);
     
//           // Check driver status
//           if (driver.status && !["Live", "online", "onRide", "available"].includes(driver.status)) {
//             console.log(`❌ Driver ${driver.driverId} filtered out by status: ${driver.status}`);
//             return false;
//           }
     
//           // Calculate distance
//           const distance = calculateDistance(
//             location.latitude,
//             location.longitude,
//             driver.location.coordinates[1],
//             driver.location.coordinates[0]
//           );
//           console.log(`📏 Driver ${driver.driverId} distance: ${distance.toFixed(2)} km`);
     
//           const isWithinRange = distance <= 10;
//           console.log(`✅ Driver ${driver.driverId} within 10km: ${isWithinRange}`);
     
//           return isWithinRange;
//         })
//         .sort((a, b) => {
//           const distA = calculateDistance(location.latitude, location.longitude, a.location.coordinates[1], a.location.coordinates[0]);
//           const distB = calculateDistance(location.latitude, location.longitude, b.location.coordinates[1], b.location.coordinates[0]);
//           return distA - distB;
//         })
//         .slice(0, 10);
 
//       console.log('✅ Filtered drivers count:', filteredDrivers.length);
//       console.log('📍 Final drivers to display:', filteredDrivers);
 
//       setNearbyDrivers(filteredDrivers);
//       setNearbyDriversCount(filteredDrivers.length);
//     };

//     socket.on("nearbyDriversResponse", handleNearbyDriversResponse);
//     return () => socket.off("nearbyDriversResponse", handleNearbyDriversResponse);
//   }, [location, socketConnected, currentRideId, acceptedDriver]);

//   // Request location on component mount
//   useEffect(() => {
//     const requestLocation = async () => {
//       setIsLoadingLocation(true);
//       if (propCurrentLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using current location from props:`, propCurrentLocation);
//         setLocation(propCurrentLocation);
//         global.currentLocation = propCurrentLocation;
//         fetchNearbyDrivers(propCurrentLocation.latitude, propCurrentLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       if (propLastSavedLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using last saved location from props:`, propLastSavedLocation);
//         setLocation(propLastSavedLocation);
//         global.currentLocation = propLastSavedLocation;
//         fetchNearbyDrivers(propLastSavedLocation.latitude, propLastSavedLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using fallback location:`, fallbackLocation);
//       setLocation(fallbackLocation);
//       global.currentLocation = fallbackLocation;
//       fetchNearbyDrivers(fallbackLocation.latitude, fallbackLocation.longitude);
//       setIsLoadingLocation(false);
//       if (Platform.OS === "android") {
//         const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
//         if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location permission denied`);
//           Alert.alert("Permission Denied", "Location permission is required to proceed.");
//           return;
//         }
//       }
//       Geolocation.getCurrentPosition(
//         (pos) => {
//           const loc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Live location fetched successfully:`, loc);
//           setLocation(loc);
//           global.currentLocation = loc;
//           fetchNearbyDrivers(loc.latitude, loc.longitude);
//         },
//         (err) => {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location error:`, err.code, err.message);
//           Alert.alert("Location Error", "Could not fetch location. Please try again or check your GPS settings.");
//         },
//         { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000, distanceFilter: 10 }
//       );
//     };
//     requestLocation();
//   }, [propCurrentLocation, propLastSavedLocation]);

//   // Socket connection handlers
//   useEffect(() => {
//     const handleConnect = async () => {
//       console.log("Socket connected");
//       setSocketConnected(true);
//       if (location) fetchNearbyDrivers(location.latitude, location.longitude);
 
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User registered with socket:', userId);
//         }
//       } catch (error) {
//         console.error('Error registering user with socket:', error);
//       }
//     };
//     const handleDisconnect = () => { console.log("Socket disconnected"); setSocketConnected(false); };
//     const handleConnectError = (error: Error) => { console.error("Socket connection error:", error); setSocketConnected(false); };
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     socket.on("connect_error", handleConnectError);
//     setSocketConnected(socket.connected);
//     return () => {
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//       socket.off("connect_error", handleConnectError);
//     };
//   }, [location]);

//   // Location update interval
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected]);

//   // Driver location updates
//   useEffect(() => {
//     const handleDriverLiveLocationUpdate = (data: { driverId: string; lat: number; lng: number; status?: string }) => {
//       console.log('📍 Received driver location update:', data);
 
//       // If we have an active ride and this is the accepted driver
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('📍 Updating accepted driver location during active ride');
   
//         // Update driver location state
//         const driverCoords = { latitude: data.lat, longitude: data.lng };
//         setDriverLocation(driverCoords);
   
//         // Update the driver in nearbyDrivers
//         setNearbyDrivers(prev => {
//           if (prev.length > 0 && prev[0].driverId === data.driverId) {
//             return [{
//               ...prev[0],
//               location: { coordinates: [data.lng, data.lat] },
//               status: data.status || "onTheWay"
//             }];
//           }
//           return prev;
//         });
   
//         // Calculate distance if needed
//         if (lastCoord) {
//           const dist = haversine(lastCoord, driverCoords);
//           setTravelledKm(prev => prev + dist / 1000);
//         }
//         setLastCoord(driverCoords);
   
//         // Check if driver is near pickup location
//         if (pickupLocation && rideStatus === "onTheWay") {
//           const distanceToPickup = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             pickupLocation.latitude,
//             pickupLocation.longitude
//           );
//           console.log(`📍 Driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//           if (distanceToPickup <= 50 && !driverArrivedAlertShown) {
//             console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED');
//             setRideStatus("arrived");
//             setDriverArrivedAlertShown(true);
//             setShowDriverArrivedOverlay(true);
       
//             // Update UI state
//             setNearbyDrivers(prev => {
//               if (prev.length > 0 && prev[0].driverId === data.driverId) {
//                 return [{
//                   ...prev[0],
//                   status: "arrived"
//                 }];
//               }
//               return prev;
//             });
       
//             // Get customer ID for OTP
//             AsyncStorage.getItem('customerId').then(customerId => {
//               const otp = customerId ? customerId.slice(-4) : '1234';
//               // Alert.alert removed, using overlay instead
//             });
//           }
//         }
     
//         // Check if driver is near dropoff location
//         if (dropoffLocation && rideStatus === "started") {
//           const distanceToDropoff = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             dropoffLocation.latitude,
//             dropoffLocation.longitude
//           );
     
//           if (distanceToDropoff <= 50 && !rideCompletedAlertShown) {
//             // Notify the backend
//             socket.emit('driverReachedDestination', {
//               rideId: currentRideId,
//               driverId: data.driverId,
//               distance: travelledKm.toFixed(2)
//             });
       
//             // Set a flag to prevent multiple notifications
//             setRideCompletedAlertShown(true);
//           }
//         }
//         return; // Ignore other drivers during active ride
//       }
 
//       // If no active ride, update all drivers
//       setNearbyDrivers((prev) => {
//         const existingIndex = prev.findIndex(d => d.driverId === data.driverId);
//         if (existingIndex >= 0) {
//           const updated = [...prev];
//           updated[existingIndex] = {
//             ...updated[existingIndex],
//             location: { coordinates: [data.lng, data.lat] },
//             status: data.status || "Live"
//           };
//           return updated;
//         } else {
//           if (data.status && !["Live", "online", "onRide", "available"].includes(data.status)) return prev;
//           return [
//             ...prev,
//             {
//               driverId: data.driverId,
//               name: `Driver ${data.driverId}`,
//               location: { coordinates: [data.lng, data.lat] },
//               vehicleType: "taxi",
//               status: data.status || "Live"
//             }
//           ];
//         }
//       });
//     };

//     socket.on("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//     return () => socket.off("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//   }, [location, currentRideId, acceptedDriver, lastCoord, pickupLocation, dropoffLocation, rideStatus, driverArrivedAlertShown, rideCompletedAlertShown]);

//   // Polling for driver arrival
//   useEffect(() => {
//     let intervalId;
//     if (rideStatus === "onTheWay" && pickupLocation && driverLocation && !driverArrivedAlertShown) {
//       intervalId = setInterval(() => {
//         const distanceToPickup = calculateDistanceInMeters(
//           driverLocation.latitude,
//           driverLocation.longitude,
//           pickupLocation.latitude,
//           pickupLocation.longitude
//         );
//         console.log(`📍 Polling driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//         if (distanceToPickup <= 50) {
//           console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED FROM POLLING');
//           setRideStatus("arrived");
//           setDriverArrivedAlertShown(true);
//           setShowDriverArrivedOverlay(true);
//           AsyncStorage.getItem('customerId').then(customerId => {
//             const otp = customerId ? customerId.slice(-4) : '1234';
//             // Alert.alert removed, using overlay
//           });
//           clearInterval(intervalId);
//         }
//       }, 2000); // Poll every 2 seconds
//     }
//     return () => {
//       if (intervalId) clearInterval(intervalId);
//     };
//   }, [rideStatus, pickupLocation, driverLocation, driverArrivedAlertShown, acceptedDriver]);

//   // Ride completion event handler
//   useEffect(() => {
//     const handleRideCompleted = (data: any) => {
//       console.log('🎉 Ride completed event received:', data);
 
//       // Update ride status to completed
//       setRideStatus("completed");
 
//       // Calculate final distance and time if not provided
//       const finalDistance = data.distance || travelledKm.toFixed(2);
//       const finalTime = data.travelTime || travelTime;
//       const finalCharge = data.charge || estimatedPrice;
      
//       // Set bill details
//       setBillDetails({
//         distance: `${finalDistance} km`,
//         travelTime: finalTime,
//         charge: finalCharge,
//         driverName: acceptedDriver?.name || 'Driver',
//         vehicleType: acceptedDriver?.vehicleType || selectedRideType
//       });
      
//       // Show bill modal instead of alert
//       setShowBillModal(true);
 
//       // Clear ride data from storage
//       AsyncStorage.removeItem('currentRideId');
//       AsyncStorage.removeItem('acceptedDriver');
//       AsyncStorage.removeItem('bookedAt');
//       setBookedAt(null);
//     };

//     socket.on("rideCompleted", handleRideCompleted);
//     return () => {
//       socket.off("rideCompleted", handleRideCompleted);
//     };
//   }, [travelledKm, travelTime, estimatedPrice, acceptedDriver, selectedRideType]);

//   // Ride status update handler
//   useEffect(() => {
//     const handleRideStatusUpdate = (data: any) => {
//       console.log('📋 Ride status update received:', data);
 
//       if (data.rideId === currentRideId) {
//         if (data.status === 'completed') {
//           // Handle ride completion
//           setRideStatus("completed");
     
//           // Calculate final distance and time if not provided
//           const finalDistance = data.distance || travelledKm.toFixed(2);
//           const finalTime = data.travelTime || travelTime;
//           const finalCharge = data.charge || estimatedPrice;
          
//           // Set bill details
//           setBillDetails({
//             distance: `${finalDistance} km`,
//             travelTime: finalTime,
//             charge: finalCharge,
//             driverName: acceptedDriver?.name || 'Driver',
//             vehicleType: acceptedDriver?.vehicleType || selectedRideType
//           });
          
//           // Show bill modal instead of alert
//           setShowBillModal(true);
     
//           // Clear ride data from storage
//           AsyncStorage.removeItem('currentRideId');
//           AsyncStorage.removeItem('acceptedDriver');
//           AsyncStorage.removeItem('bookedAt');
//           setBookedAt(null);
//         } else if (data.status === 'started') {
//           setShowDriverArrivedOverlay(false);
//         }
//       }
//     };

//     socket.on("rideStatusUpdate", handleRideStatusUpdate);
//     return () => {
//       socket.off("rideStatusUpdate", handleRideStatusUpdate);
//     };
//   }, [currentRideId, travelledKm, travelTime, estimatedPrice, acceptedDriver, selectedRideType]);

//   // Driver offline handler
//   useEffect(() => {
//     const handleDriverOffline = (data: { driverId: string }) => {
//       console.log(`Driver ${data.driverId} went offline`);
 
//       // Don't remove accepted driver during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('⚠️ Accepted driver went offline during active ride');
//         return;
//       }
 
//       setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//       setNearbyDriversCount(prev => Math.max(0, prev - 1));
//     };

//     socket.on("driverOffline", handleDriverOffline);
//     return () => socket.off("driverOffline", handleDriverOffline);
//   }, [currentRideId, acceptedDriver]);

//   // Driver status update handler
//   useEffect(() => {
//     const handleDriverStatusUpdate = (data: { driverId: string; status: string }) => {
//       console.log(`Driver ${data.driverId} status updated to: ${data.status}`);
 
//       // Don't update accepted driver status during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('Keeping accepted driver status as onTheWay');
//         return;
//       }
 
//       if (data.status === "offline") {
//         setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//         setNearbyDriversCount(prev => Math.max(0, prev - 1));
//         return;
//       }
//       setNearbyDrivers(prev => prev.map(driver =>
//         driver.driverId === data.driverId ? { ...driver, status: data.status } : driver
//       ));
//     };

//     socket.on("driverStatusUpdate", handleDriverStatusUpdate);
//     return () => socket.off("driverStatusUpdate", handleDriverStatusUpdate);
//   }, [currentRideId, acceptedDriver]);

//   // Recover ride data on component mount
//   useEffect(() => {
//     const recoverRideData = async () => {
//       try {
//         const savedRideId = await AsyncStorage.getItem('currentRideId');
//         const savedDriverData = await AsyncStorage.getItem('acceptedDriver');
//         const savedRideStatus = await AsyncStorage.getItem('rideStatus');
//         const savedBookedAt = await AsyncStorage.getItem('bookedAt');
//         const savedBookingOTP = await AsyncStorage.getItem('bookingOTP');
        
//         if (savedRideId) {
//           console.log('🔄 Recovering ride data from storage:', savedRideId);
//           setCurrentRideId(savedRideId);
          
//           // Set the ride status from storage if available
//           if (savedRideStatus) {
//             setRideStatus(savedRideStatus as any);
//           }
          
//           // Set the booking OTP if available
//           if (savedBookingOTP) {
//             setBookingOTP(savedBookingOTP);
//           }
          
//           // Set the bookedAt time if available
//           if (savedBookedAt) {
//             setBookedAt(new Date(savedBookedAt));
//           }
          
//           if (savedDriverData) {
//             const driverData = JSON.parse(savedDriverData);
//             setAcceptedDriver(driverData);
//             setDriverName(driverData.name);
//             setDriverMobile(driverData.driverMobile);
            
//             // Show appropriate UI based on ride status
//             if (savedRideStatus === 'onTheWay') {
//               setShowDriverAssignedModal(true);
//             } else if (savedRideStatus === 'arrived') {
//               setShowDriverArrivedOverlay(true);
//             } else if (savedRideStatus === 'started') {
//               // Ride is in progress
//               setShowDriverAssignedModal(false);
//               setShowDriverArrivedOverlay(false);
//             } else if (savedRideStatus === 'searching') {
//               // Still searching for driver
//               const bookedTime = savedBookedAt ? new Date(savedBookedAt) : new Date();
//               setBookedAt(bookedTime);
              
//               // Restart polling
//               const pollInterval = setInterval(() => {
//                 if (savedRideId) {
//                   socket.emit('getRideStatus', { rideId: savedRideId });
//                 }
//               }, 5000);
//               AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
              
//               // Restart timeout (increased to 60s)
//               const acceptanceTimeout = setTimeout(() => {
//                 if (savedRideStatus === "searching") {
//                   Alert.alert(
//                     "No Driver Available",
//                     "No driver has accepted your ride yet. Please try again or wait longer.",
//                     [{ text: "OK", onPress: () => setRideStatus("idle") }]
//                   );
//                 }
//               }, 60000);
//               AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
//             }
//           } else {
//             // No driver data yet, still searching
//             setRideStatus("searching");
//             const bookedTime = savedBookedAt ? new Date(savedBookedAt) : new Date();
//             setBookedAt(bookedTime);
            
//             // Restart polling
//             const pollInterval = setInterval(() => {
//               if (savedRideId) {
//                 socket.emit('getRideStatus', { rideId: savedRideId });
//               }
//             }, 5000);
//             AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
            
//             // Restart timeout (increased to 60s)
//             const acceptanceTimeout = setTimeout(() => {
//               if (rideStatus === "searching") {
//                 Alert.alert(
//                   "No Driver Available",
//                   "No driver has accepted your ride yet. Please try again or wait longer.",
//                   [{ text: "OK", onPress: () => setRideStatus("idle") }]
//                 );
//               }
//             }, 60000);
//             AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
//           }
          
//           // Request ride status from server
//           socket.emit('getRideStatus', { rideId: savedRideId });
//         }
//       } catch (error) {
//         console.error('Error recovering ride data:', error);
//       }
//     };
    
//     recoverRideData();
//   }, []);

//   // Save ride status to AsyncStorage whenever it changes
//   useEffect(() => {
//     if (currentRideId) {
//       AsyncStorage.setItem('rideStatus', rideStatus);
//     }
//   }, [rideStatus, currentRideId]);

//   // Save booking OTP to AsyncStorage whenever it changes
//   useEffect(() => {
//     if (bookingOTP && currentRideId) {
//       AsyncStorage.setItem('bookingOTP', bookingOTP);
//     }
//   }, [bookingOTP, currentRideId]);

//   // Process ride acceptance
//   const processRideAcceptance = useCallback((data: any) => {
//     console.log('🎯 PROCESSING RIDE ACCEPTANCE:', JSON.stringify(data, null, 2));
//     // Validate required data
//     if (!data.rideId || !data.driverId) {
//       console.error('❌ Invalid ride acceptance data:', data);
//       return;
//     }
//     // Clear existing timeouts and intervals
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Update ride status immediately
//     setRideStatus("onTheWay");
//     setDriverId(data.driverId);
//     setDriverName(data.driverName || 'Driver');
//     setDriverMobile(data.driverMobile || 'N/A');
//     setCurrentRideId(data.rideId);
    
//     // Create accepted driver object
//     const acceptedDriverData: DriverType = {
//       driverId: data.driverId,
//       name: data.driverName || 'Driver',
//       driverMobile: data.driverMobile || 'N/A',
//       location: {
//         coordinates: [data.driverLng || 0, data.driverLat || 0]
//       },
//       vehicleType: data.vehicleType || selectedRideType,
//       status: "onTheWay"
//     };
//     console.log('👨‍💼 Setting accepted driver:', acceptedDriverData);
//     // Update state
//     setAcceptedDriver(acceptedDriverData);
//     setNearbyDrivers([acceptedDriverData]);
//     setNearbyDriversCount(1);
//     // Set initial driver location
//     if (data.driverLat && data.driverLng) {
//       const driverLoc = {
//         latitude: data.driverLat,
//         longitude: data.driverLng
//       };
//       setDriverLocation(driverLoc);
//       console.log('📍 Initial driver location set:', driverLoc);
//     }
//     // Store in AsyncStorage for recovery
//     AsyncStorage.setItem('currentRideId', data.rideId);
//     AsyncStorage.setItem('acceptedDriver', JSON.stringify(acceptedDriverData));
//     AsyncStorage.setItem('rideStatus', 'onTheWay');
//     console.log('✅ Ride acceptance processed successfully for:', data.rideId);
   
//     // Show driver assigned modal
//     setShowDriverAssignedModal(true);
//   }, [selectedRideType]);

//   // Global ride acceptance listener
//   useEffect(() => {
//     console.log('🎯 Setting up GLOBAL ride acceptance listener');
//     const handleRideAccepted = (data: any) => {
//       console.log('🚨 ===== USER APP: RIDE ACCEPTED ====');
//       console.log('📦 Acceptance data:', JSON.stringify(data, null, 2));
//       console.log('🚨 ===== END ACCEPTANCE DATA ====');
//       processRideAcceptance(data);
//     };
//     // Listen on multiple channels
//     socket.on("rideAccepted", handleRideAccepted);
//     // Fixed: Proper async handling
//     socket.on("rideAcceptedBroadcast", async (data) => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (data.targetUserId === userId) {
//           handleRideAccepted(data);
//         }
//       } catch (error) {
//         console.error('Error checking user ID:', error);
//       }
//     });
//     return () => {
//       socket.off("rideAccepted", handleRideAccepted);
//       socket.off("rideAcceptedBroadcast", handleRideAccepted);
//     };
//   }, [processRideAcceptance]);

//   // Critical socket event handlers
//   useEffect(() => {
//     console.log('🔌 Setting up CRITICAL socket event handlers');
//     // Handle getDriverData response
//     const handleDriverDataResponse = (data: any) => {
//       console.log('🚗 Driver data received:', data);
//       if (data.success) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle getRideStatus response
//     const handleRideStatusResponse = (data: any) => {
//       console.log('📋 Ride status received:', data);
//       if (data.driverId) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle backup ride acceptance
//     const handleBackupRideAccepted = (data: any) => {
//       console.log('🔄 Backup ride acceptance:', data);
//       processRideAcceptance(data);
//     };
//     socket.on("driverDataResponse", handleDriverDataResponse);
//     socket.on("rideStatusResponse", handleRideStatusResponse);
//     socket.on("backupRideAccepted", handleBackupRideAccepted);
//     return () => {
//       socket.off("driverDataResponse", handleDriverDataResponse);
//       socket.off("rideStatusResponse", handleRideStatusResponse);
//       socket.off("backupRideAccepted", handleBackupRideAccepted);
//     };
//   }, [selectedRideType]);

//   // Comprehensive socket debugger
//   useEffect(() => {
//     console.log('🔍 Starting comprehensive socket debugging');
//     // Debug all socket events
//     const debugAllEvents = (eventName: string, data: any) => {
//       if (eventName.includes('ride') || eventName.includes('driver') || eventName.includes('Room')) {
//         console.log(`📡 SOCKET EVENT [${eventName}]:`, data);
//       }
//     };
//     // Specific debug for rideAccepted
//     const debugRideAccepted = (data: any) => {
//       console.log('🚨🚨🚨 RIDE ACCEPTED EVENT RECEIVED 🚨🚨🚨');
//       console.log('📦 Data:', JSON.stringify(data, null, 2));
//       console.log('🔍 Current state:', {
//         currentRideId,
//         rideStatus,
//         hasAcceptedDriver: !!acceptedDriver
//       });
 
//       // Process immediately
//       processRideAcceptance(data);
//     };
//     // Debug connection
//     const handleConnect = () => {
//       console.log('✅ Socket connected - ID:', socket.id);
//       setSocketConnected(true);
//     };
//     const handleDisconnect = () => {
//       console.log('❌ Socket disconnected');
//       setSocketConnected(false);
//     };
//     // Add all listeners
//     socket.onAny(debugAllEvents);
//     socket.on("rideAccepted", debugRideAccepted);
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     console.log('🔍 Socket debuggers activated');
//     return () => {
//       socket.offAny(debugAllEvents);
//       socket.off("rideAccepted", debugRideAccepted);
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//     };
//   }, [currentRideId, rideStatus, acceptedDriver, processRideAcceptance]);

//   // User location tracking function
//   const sendUserLocationUpdate = useCallback(async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
 
//       if (!userId || !currentRideId) {
//         console.log('❌ Cannot send location: Missing userId or rideId');
//         return;
//       }
//       console.log(`📍 SENDING USER LOCATION UPDATE: ${latitude}, ${longitude} for ride ${currentRideId}`);
 
//       // Send to socket for real-time updates
//       socket.emit('userLocationUpdate', {
//         userId,
//         rideId: currentRideId,
//         latitude,
//         longitude,
//         timestamp: Date.now()
//       });
//       // Also save to database via REST API
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//           latitude,
//           longitude,
//           rideId: currentRideId
//         }, {
//           headers: {
//             Authorization: `Bearer ${token}`
//           }
//         });
//       }
//       console.log('✅ User location update sent successfully');
//     } catch (error) {
//       console.error('❌ Error sending user location update:', error);
//     }
//   }, [currentRideId]);

//   // Continuous location tracking during active rides
//   useEffect(() => {
//     let locationInterval;
//     if ((rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && location) {
//       console.log('🔄 Starting continuous user location tracking');
 
//       locationInterval = setInterval(() => {
//         if (location) {
//           sendUserLocationUpdate(location.latitude, location.longitude);
//         }
//       }, 5000); // Send every 5 seconds
 
//     }
//     return () => {
//       if (locationInterval) {
//         clearInterval(locationInterval);
//         console.log('🛑 Stopped user location tracking');
//       }
//     };
//   }, [rideStatus, location, sendUserLocationUpdate]);

//   // Update existing location interval to include active ride statuses
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching" || rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
       
//             // Send location update if in active ride
//             if (rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") {
//               sendUserLocationUpdate(newLoc.latitude, newLoc.longitude);
//             }
       
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected, sendUserLocationUpdate]);

//   // Manual ride status polling
//   useEffect(() => {
//     if (currentRideId && rideStatus === "searching") {
//       console.log('🔄 Starting backup polling for ride:', currentRideId);
 
//       const pollInterval = setInterval(() => {
//         console.log('📡 Polling ride status for:', currentRideId);
//         socket.emit('getRideStatus', { rideId: currentRideId }, (data) => {
//           if (data.driverId) {
//             processRideAcceptance(data);
//           } else if (bookedAt && (new Date().getTime() - bookedAt.getTime() > 60000) && rideStatus === "searching") {
//             console.log('⏰ No driver found after 60s');
//             Alert.alert(
//               "No Driver Available",
//               "No driver has accepted your ride yet. Please try again or wait longer.",
//               [{ text: "OK", onPress: () => setRideStatus("idle") }]
//             );
//             clearInterval(pollInterval);
//             AsyncStorage.removeItem('statusPollInterval');
//           }
//         });
//       }, 3000); // Poll every 3 seconds
//       // Store interval ID
//       AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//       return () => {
//         clearInterval(pollInterval);
//         AsyncStorage.removeItem('statusPollInterval');
//       };
//     }
//   }, [currentRideId, rideStatus, bookedAt]);

//   // Ensure user joins their room on socket connection
//   useEffect(() => {
//     const registerUserRoom = async () => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId && socket.connected) {
//           console.log('👤 Registering user with socket room:', userId);
//           socket.emit('registerUser', { userId });
     
//           // Also join the room manually
//           socket.emit('joinRoom', { userId });
//         }
//       } catch (error) {
//         console.error('Error registering user room:', error);
//       }
//     };
//     // Register on connect and every 5 seconds to ensure room membership
//     socket.on('connect', registerUserRoom);
//     registerUserRoom();
//     // Re-register periodically to ensure room membership
//     const interval = setInterval(registerUserRoom, 5000);
//     return () => {
//       socket.off('connect', registerUserRoom);
//       clearInterval(interval);
//     };
//   }, []);

//   // Socket recovery: Handle reconnection and missed events
//   useEffect(() => {
//     const handleReconnect = async () => {
//       console.log('🔌 Socket reconnected, recovering state...');
//       setSocketConnected(true);
 
//       // Re-register user
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User re-registered after reconnect:', userId);
//         }
   
//         // Request current ride status if we have a ride ID
//         const currentRideId = await AsyncStorage.getItem('currentRideId');
//         if (currentRideId) {
//           socket.emit('getRideStatus', { rideId: currentRideId });
//           console.log('🔄 Requesting status for current ride:', currentRideId);
//         }
//       } catch (error) {
//         console.error('Error during socket recovery:', error);
//       }
//     };
//     socket.on("connect", handleReconnect);
//     return () => {
//       socket.off("connect", handleReconnect);
//     };
//   }, []);

//   // Fetch route
//   const fetchRoute = async (dropCoord: LocationType) => {
//     if (!pickupLocation) return;
//     try {
//       const url = `https://router.project-osrm.org/route/v1/driving/${pickupLocation.longitude},${pickupLocation.latitude};${dropCoord.longitude},${dropCoord.latitude}?overview=full&geometries=geojson`;
//       const res = await fetch(url);
//       const data = await res.json();
//       if (data.code === "Ok" && data.routes.length > 0) {
//         const coords = data.routes[0].geometry.coordinates.map(([lng, lat]: number[]) => ({ latitude: lat, longitude: lng }));
//         setRouteCoords(coords);
//         setDistance((data.routes[0].distance / 1000).toFixed(2) + " km");
//         setTravelTime(Math.round(data.routes[0].duration / 60) + " mins");
      
//         // Removed automatic showing of route details modal
//         // This will now only be shown when the user clicks BOOK RIDE
//       } else {
//         setApiError("Failed to fetch route");
//         Alert.alert("Route Error", "Could not find route. Please try different locations.");
//       }
//     } catch (err) {
//       console.error(err);
//       setRouteCoords([]);
//       setApiError("Network error fetching route");
//       Alert.alert("Route Error", "Failed to fetch route. Please check your internet connection.");
//     }
//   };

//   // Fetch suggestions
//   const fetchSuggestions = async (query: string, type: 'pickup' | 'dropoff'): Promise<SuggestionType[]> => {
//     try {
//       console.log(`Fetching suggestions for: ${query}`);
//       const cache = type === 'pickup' ? pickupCache : dropoffCache;
//       if (cache[query]) {
//         console.log(`Returning cached suggestions for: ${query}`);
//         return cache[query];
//       }
//       if (type === 'pickup') setPickupLoading(true);
//       else setDropoffLoading(true);
//       setSuggestionsError(null);
//       const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=5&addressdetails=1&countrycodes=IN`;
//       console.log(`API URL: ${url}`);
 
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
 
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       if (!Array.isArray(data)) throw new Error('Invalid response format');
 
//       const suggestions: SuggestionType[] = data.map((item: any) => ({
//         id: item.place_id || `${item.lat}-${item.lon}`,
//         name: item.display_name,
//         address: extractAddress(item),
//         lat: item.lat,
//         lon: item.lon,
//         type: item.type || 'unknown',
//         importance: item.importance || 0,
//       }));
//       if (type === 'pickup') setPickupCache(prev => ({ ...prev, [query]: suggestions }));
//       else setDropoffCache(prev => ({ ...prev, [query]: suggestions }));
//       return suggestions;
//     } catch (error: any) {
//       console.error('Suggestions fetch error:', error);
//       setSuggestionsError(error.message || 'Failed to fetch suggestions');
//       return [];
//     } finally {
//       if (type === 'pickup') setPickupLoading(false);
//       else setDropoffLoading(false);
//     }
//   };

//   // Extract address
//   const extractAddress = (item: any): string => {
//     if (item.address) {
//       const parts = [];
//       if (item.address.road) parts.push(item.address.road);
//       if (item.address.suburb) parts.push(item.address.suburb);
//       if (item.address.city || item.address.town || item.address.village) parts.push(item.address.city || item.address.town || item.address.village);
//       if (item.address.state) parts.push(item.address.state);
//       if (item.address.postcode) parts.push(item.address.postcode);
//       return parts.join(', ');
//     }
//     return item.display_name;
//   };

//   // Handle pickup change
//   const handlePickupChange = (text: string) => {
//     console.log(`handlePickupChange called with: "${text}"`);
//     propHandlePickupChange(text);
//     if (pickupDebounceTimer.current) {
//       clearTimeout(pickupDebounceTimer.current);
//       pickupDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setPickupLoading(true);
//       setShowPickupSuggestions(true);
//       pickupDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'pickup');
//         setPickupSuggestions(sugg);
//         setPickupLoading(false);
//       }, 500);
//     } else {
//       setShowPickupSuggestions(false);
//       setPickupSuggestions([]);
//     }
//   };

//   // Handle dropoff change
//   const handleDropoffChange = (text: string) => {
//     console.log(`handleDropoffChange called with: "${text}"`);
//     propHandleDropoffChange(text);
//     if (dropoffDebounceTimer.current) {
//       clearTimeout(dropoffDebounceTimer.current);
//       dropoffDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setDropoffLoading(true);
//       setShowDropoffSuggestions(true);
//       dropoffDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'dropoff');
//         setDropoffSuggestions(sugg);
//         setDropoffLoading(false);
//       }, 500);
//     } else {
//       setShowDropoffSuggestions(false);
//       setDropoffSuggestions([]);
//     }
//   };

//   // Select pickup suggestion
//   const selectPickupSuggestion = (suggestion: SuggestionType) => {
//     propHandlePickupChange(suggestion.name);
//     setPickupLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowPickupSuggestions(false);
//     setIsPickupCurrent(false);
//     if (dropoffLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     fetchNearbyDrivers(parseFloat(suggestion.lat), parseFloat(suggestion.lon));
//   };

//   // Select dropoff suggestion
//   const selectDropoffSuggestion = (suggestion: SuggestionType) => {
//     propHandleDropoffChange(suggestion.name);
//     setDropoffLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowDropoffSuggestions(false);
//     if (pickupLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//   };

//   // Update price
//   useEffect(() => {
//     const updatePrice = async () => {
//       if (pickupLocation && dropoffLocation && distance) {
//         const price = await calculatePrice();
//         setEstimatedPrice(price);
//       }
//     };
//     updatePrice();
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   // Update price again
//   useEffect(() => {
//     if (pickupLocation && dropoffLocation && distance) {
//       const price = calculatePrice();
//       setEstimatedPrice(price);
//     }
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   // Panel animation
//   useEffect(() => {
//     if (showPricePanel) {
//       Animated.timing(panelAnimation, {
//         toValue: 1,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     } else {
//       Animated.timing(panelAnimation, {
//         toValue: 0,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     }
//   }, [showPricePanel]);

//   // Fetch ride price
//   const fetchRidePrice = async (vehicleType: string, distance: number) => {
//     // Use ONLY dynamic prices from socket events
//     const pricePerKm = dynamicPrices[vehicleType];
//     // If dynamic prices are not set yet, wait for them
//     if (!pricePerKm || pricePerKm === 0) {
//       console.log(`⏳ Waiting for ${vehicleType} price from admin...`);
//       return 0;
//     }
//     const calculatedPrice = distance * pricePerKm;
//     console.log(`💰 Price calculation: ${distance}km ${vehicleType} × ₹${pricePerKm}/km = ₹${calculatedPrice}`);
//     return calculatedPrice;
//   };

//   // Calculate price
//   const calculatePrice = async (): Promise<number | null> => {
//     if (!pickupLocation || !dropoffLocation || !distance) {
//       console.log('❌ Missing location data for price calculation');
//       return null;
//     }
//     const distanceKm = parseFloat(distance);
//     // DEBUG: Print current prices before calculation
//     console.log('\n💰 PRICE CALCULATION DEBUG:');
//     console.log(`📏 Distance: ${distanceKm}km`);
//     console.log(`🚗 Vehicle Type: ${selectedRideType}`);
//     console.log(`🏍️ BIKE Price/km: ₹${dynamicPrices.bike}`);
//     console.log(`🚕 TAXI Price/km: ₹${dynamicPrices.taxi}`);
//     console.log(`🚛 PORT Price/km: ₹${dynamicPrices.port}`);
//     console.log('─────────────────────────────────────');
//     try {
//       const pricePerKm = dynamicPrices[selectedRideType];
 
//       console.log(`💰 Using price per km: ₹${pricePerKm} for ${selectedRideType}`);
//       // Wait for admin prices - NO TEMPORARY FALLBACK
//       if (!pricePerKm || pricePerKm === 0) {
//         console.log('⏳ Waiting for admin prices to be loaded...');
//         console.log('🚫 Booking blocked until prices are received from admin');
//         return null;
//       }
 
//       const calculatedPrice = distanceKm * pricePerKm;
//       const multiplier = wantReturn ? 2 : 1;
//       const finalPrice = Math.round(calculatedPrice * multiplier);
//       console.log(`✅ Final price calculated: ${distanceKm}km × ₹${pricePerKm}/km × ${multiplier} = ₹${finalPrice}`);
//       return finalPrice;
//     } catch (error) {
//       console.error('❌ Error calculating price:', error);
//       return null;
//     }
//   };

//   // Price update handler
//   useEffect(() => {
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received REAL-TIME price update from admin:', data);
 
//       // Update dynamic prices immediately
//       setDynamicPrices({
//         bike: data.bike,
//         taxi: data.taxi,
//         port: data.port,
//       });
 
//       // Log the new prices
//       console.log('🔄 PRICES UPDATED SUCCESSFULLY:');
//       console.log(`🏍️ BIKE: ₹${data.bike}/km`);
//       console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//       console.log(`🚛 PORT: ₹${data.port}/km`);
 
//       // Immediately recalculate price if a ride is being planned
//       if (pickupLocation && dropoffLocation && distance) {
//         console.log('🔄 Recalculating price with new admin rates...');
//         calculatePrice();
//       }
//     };

//     socket.on('priceUpdate', handlePriceUpdate);
//     return () => {
//       socket.off('priceUpdate', handlePriceUpdate);
//     };
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Request prices on component mount
//   useEffect(() => {
//     console.log('📡 Requesting current prices from admin...');
//     socket.emit('getCurrentPrices');
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received current prices:', data);
//       setDynamicPrices(data);
//     };
//     socket.on('currentPrices', handleCurrentPrices);
//     return () => {
//       socket.off('currentPrices', handleCurrentPrices);
//     };
//   }, []);

//   // Listen for real-time price updates
//   useEffect(() => {
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 REAL-TIME PRICE UPDATE:', data);
//       setDynamicPrices(data);
 
//       console.log('✅ PRICES UPDATED:');
//       console.log(`🏍️ BIKE: ₹${data.bike}/km`);
//       console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//       console.log(`🚛 PORT: ₹${data.port}/km`);
 
//       // Recalculate immediately
//       if (pickupLocation && dropoffLocation && distance) {
//         calculatePrice();
//       }
//     };

//     socket.on('priceUpdate', handlePriceUpdate);
//     return () => socket.off('priceUpdate', handlePriceUpdate);
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Price debugging and console logging
//   useEffect(() => {
//     console.log('💰 INITIALIZING PRICE DEBUGGING SYSTEM');
//     // Function to print current prices to console
//     const printCurrentPrices = () => {
//       console.log('\n🚗 ===== CURRENT RIDE PRICES =====');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${dynamicPrices.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${dynamicPrices.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${dynamicPrices.port}`);
//       console.log('=================================\n');
//     };
//     // Listen for price updates from admin
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 REAL-TIME PRICE UPDATE RECEIVED FROM ADMIN:', data);
 
//       // Update dynamic prices
//       setDynamicPrices({
//         bike: data.bike,
//         taxi: data.taxi,
//         port: data.port,
//       });
 
//       // Print updated prices to console
//       console.log('\n✅ ===== PRICES UPDATED SUCCESSFULLY =====');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//       console.log('=============================================\n');
 
//       // Recalculate price if needed
//       if (pickupLocation && dropoffLocation && distance) {
//         calculatePrice();
//       }
//     };
//     // Listen for initial prices when component mounts
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 RECEIVED CURRENT PRICES FROM SERVER:');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//       console.log('─────────────────────────────────────');
 
//       setDynamicPrices(data);
//     };
//     // Request current prices when component mounts
//     console.log('📡 Requesting current prices from server...');
//     socket.emit('getCurrentPrices');
//     // Set up event listeners
//     socket.on('priceUpdate', handlePriceUpdate);
//     socket.on('currentPrices', handleCurrentPrices);
//     socket.on('ridePricesUpdated', handlePriceUpdate); // Alternative event name
//     // Print initial prices
//     printCurrentPrices();
//     // Set up interval to periodically request prices (as backup)
//     const priceInterval = setInterval(() => {
//       console.log('🔄 Periodic price check...');
//       socket.emit('getCurrentPrices');
//       printCurrentPrices();
//     }, 30000); // Every 30 seconds
//     return () => {
//       // Clean up event listeners
//       socket.off('priceUpdate', handlePriceUpdate);
//       socket.off('currentPrices', handleCurrentPrices);
//       socket.off('ridePricesUpdated', handlePriceUpdate);
//       clearInterval(priceInterval);
//     };
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Request current prices on component mount
//   useEffect(() => {
//     console.log('📡 Requesting current prices from admin...');
//     // Request current prices when component mounts
//     socket.emit('getCurrentPrices');
//     // Also set up a listener for initial price response
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received current prices from admin:', data);
//       setDynamicPrices(data);
//     };
//     socket.on('currentPrices', handleCurrentPrices);
//     return () => {
//       socket.off('currentPrices', handleCurrentPrices);
//     };
//   }, []);

//   // Fetch initial prices
//   useEffect(() => {
//     const fetchInitialPrices = async () => {
//       try {
//         const bikeRate = await fetchRidePrice('bike', 1);
//         const taxiRate = await fetchRidePrice('taxi', 1);
//         const portRate = await fetchRidePrice('port', 1);
//         setDynamicPrices({
//           bike: bikeRate,
//           taxi: taxiRate,
//           port: portRate,
//         });
//         console.log(`BIKE: Today's price per km: ₹${bikeRate}`);
//         console.log(`TAXI: Today's price per km: ₹${taxiRate}`);
//         console.log(`PORT: Today's price per km: ₹${portRate}`);
//       } catch (error) {
//         console.error('❌ Error fetching initial prices:', error);
//         setDynamicPrices({
//           bike: 100,
//           taxi: 500,
//           port: 1000,
//         });
//         console.log(`BIKE: Today's price per km: ₹100 (fallback)`);
//         console.log(`TAXI: Today's price per km: ₹500 (fallback)`);
//         console.log(`PORT: Today's price per km: ₹1000 (fallback)`);
//       }
//     };
//     fetchInitialPrices();
//   }, []);

//   // Handle ride type select
//   const handleRideTypeSelect = async (type: string) => {
//     if (selectedRideType === type) return;
//     setSelectedRideType(type);
//     setShowPricePanel(true);
//     if (pickupLocation && dropoffLocation) {
//       const price = await calculatePrice();
//       setEstimatedPrice(price);
//     }
//     if (location) fetchNearbyDrivers(location.latitude, location.longitude);
//   };

//   // Handle book ride
//   const handleBookRide = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
   
//     // Show route details modal before booking
//     setShowRouteDetailsModal(true);
//   };

//   // Handle confirm booking after route details
//   const handleConfirmBookingFromModal = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
   
//     const price = await calculatePrice(); // Use async price calculation
//     if (!price || price === 0 || dynamicPrices[selectedRideType] === 0) {
//       Alert.alert('Error', 'Admin rates not loaded yet. Please wait or try again.');
//       setShowRouteDetailsModal(false);
//       return;
//     }
   
//     try {
//       setIsBooking(true);

//       const token = await AsyncStorage.getItem('authToken');
//       if (!token) {
//         Alert.alert('Authentication Error', 'Please log in to book a ride');
//         setIsBooking(false);
//         return;
//       }
//       if (!pickupLocation || !dropoffLocation) {
//         Alert.alert('Error', 'Please select both pickup and dropoff locations');
//         setIsBooking(false);
//         return;
//       }
//       if (!estimatedPrice) {
//         Alert.alert('Error', 'Price calculation failed. Please try again.');
//         setIsBooking(false);
//         return;
//       }
//       const userId = await AsyncStorage.getItem('userId');
//       const customerId = (await AsyncStorage.getItem('customerId')) || 'U001';
//       const userName = await AsyncStorage.getItem('userName');
//       const userMobile = await AsyncStorage.getItem('userMobile');
//       let otp;
//       if (customerId && customerId.length >= 4) {
//         otp = customerId.slice(-4);
//       } else {
//         otp = Math.floor(1000 + Math.random() * 9000).toString();
//       }
//       setRideStatus('searching');
//       setBookedAt(new Date());
//       console.log('📋 User Details:', {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup,
//         dropoff,
//         selectedRideType,
//         otp
//       });
//       const rideData = {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup: {
//           lat: pickupLocation.latitude,
//           lng: pickupLocation.longitude,
//           address: pickup,
//         },
//         drop: {
//           lat: dropoffLocation.latitude,
//           lng: dropoffLocation.longitude,
//           address: dropoff,
//         },
//         vehicleType: selectedRideType,
//         otp,
//         estimatedPrice,
//         distance,
//         travelTime,
//         wantReturn,
//         token
//       };
//       socket.emit('bookRide', rideData, (response) => {
//         setIsBooking(false);
   
//         if (response && response.success) {
//           setCurrentRideId(response.rideId);
//           AsyncStorage.setItem('bookedAt', new Date().toISOString());
//           AsyncStorage.setItem('rideStatus', 'searching');
//           setBookingOTP(response.otp);
//           setShowConfirmModal(true);
//           setRideStatus('searching');
//           console.log('✅ Ride booked successfully:', response);
//         } else {
//           Alert.alert('Booking Failed', response?.message || 'Failed to book ride');
//           setRideStatus('idle');
//           setCurrentRideId(null);
//         }
//       });
//     } catch (error) {
//       setIsBooking(false);
//       console.error('Booking error:', error);
//       Alert.alert('Booking Failed', 'An unexpected error occurred. Please try again.');
//       setRideStatus('idle');
//       setCurrentRideId(null);
//     }
//   };

//   // Fetch user data
//   useEffect(() => {
//     const fetchUserData = async () => {
//       try {
//         const token = await AsyncStorage.getItem('authToken');
//         if (!token) return;
//         const backendUrl = getBackendUrl();
//         const response = await axios.get(`${backendUrl}/api/users/profile`, {
//           headers: { Authorization: `Bearer ${token}` }
//         });
   
//         const userProfile = response.data;
   
//         console.log('📋 User Profile:', userProfile);
   
//         const userMobile = userProfile.mobile ||
//                            userProfile.phone ||
//                            userProfile.phoneNumber ||
//                            userProfile.mobileNumber ||
//                            '';
//         await AsyncStorage.setItem('userId', userProfile._id);
//         await AsyncStorage.setItem('customerId', userProfile.customerId || userProfile._id);
//         await AsyncStorage.setItem('userName', userProfile.name || userProfile.username);
//         await AsyncStorage.setItem('userMobile', userProfile.phoneNumber);
//         await AsyncStorage.setItem('userAddress', userProfile.address || '');
   
//       } catch (error) {
//         console.error('Error fetching user data:', error);
//       }
//     };
//     fetchUserData();
//   }, []);

//   // Handle ride created
//   useEffect(() => {
//     const handleRideCreated = (data) => {
//       console.log('Ride created event received:', data);
//       if (data.success) {
//         if (data.rideId && !currentRideId) {
//           setCurrentRideId(data.rideId);
//         }
   
//         AsyncStorage.setItem('lastRideId', data.rideId || currentRideId || '');
   
//         setBookingOTP(data.otp);
//         setShowConfirmModal(true);
//         setRideStatus("searching");
//         AsyncStorage.setItem('rideStatus', 'searching');
//       } else if (data.message) {
//         Alert.alert("Booking Failed", data.message || "Failed to book ride");
//         setRideStatus("idle");
//         setCurrentRideId(null);
//       }
//     };

//     socket.on("rideCreated", handleRideCreated);
//     return () => {
//       socket.off("rideCreated", handleRideCreated);
//     };
//   }, [currentRideId]);

//   // Handle confirm booking
//   const handleConfirmBooking = async () => {
//     console.log('Confirming booking with OTP:', bookingOTP);
//     console.log('Current Ride ID:', currentRideId);
//     let rideIdToUse = currentRideId;
//     if (!rideIdToUse) {
//       rideIdToUse = await AsyncStorage.getItem('currentRideId');
//       console.log('🔄 Using rideId from storage:', rideIdToUse);
//     }
//     if (!rideIdToUse) {
//       Alert.alert("Error", "Invalid booking state. Please try booking again.");
//       setShowConfirmModal(false);
//       return;
//     }
//     setCurrentRideId(rideIdToUse);
//     setRideStatus("searching"); // Change to "searching" first
//     AsyncStorage.setItem('rideStatus', 'searching');
//     setShowConfirmModal(false);
//     console.log('🚀 Waiting for driver to accept ride:', rideIdToUse);
//     // Start polling for ride status updates
//     const statusPollInterval = setInterval(() => {
//       if (currentRideId) {
//         socket.emit('getRideStatus', { rideId: currentRideId });
//       }
//     }, 5000); // Poll every 5 seconds
//     AsyncStorage.setItem('statusPollInterval', statusPollInterval.toString());
//   };

//   // Format phone number to show only first 2 and last 4 digits
//   const formatPhoneNumber = (phoneNumber: string | null): string => {
//     if (!phoneNumber) return 'N/A';
//     if (phoneNumber.length <= 6) return phoneNumber;
//     const firstTwo = phoneNumber.substring(0, 2);
//     const lastFour = phoneNumber.substring(phoneNumber.length - 4);
//     const middleStars = '*'.repeat(phoneNumber.length - 6);
//     return `${firstTwo}${middleStars}${lastFour}`;
//   };

//   // Handle phone call
//   const handlePhoneCall = () => {
//     if (acceptedDriver && acceptedDriver.driverMobile) {
//       Linking.openURL(`tel:${acceptedDriver.driverMobile}`)
//         .catch(err => console.error('Error opening phone dialer:', err));
//     }
//   };

//   // Render vehicle icon
//   const renderVehicleIcon = (type: 'bike' | 'taxi' | 'port', size: number = 24, color: string = '#000000') => {
//     try {
//       switch (type) {
//         case 'bike': return <BikeIcon width={size} height={size} fill={color} />;
//         case 'taxi': return <TaxiIcon width={size} height={size} fill={color} />;
//         case 'port': return <LorryIcon width={size} height={size} fill={color} />;
//         default: return <TaxiIcon width={size} height={size} fill={color} />;
//       }
//     } catch (error) {
//       return <TaxiIcon width={size} height={size} fill={color} />;
//     }
//   };

//   // Render suggestion item
//   const renderSuggestionItem = (item: SuggestionType, onSelect: () => void, key: string) => {
//     let iconName = 'location-on';
//     let iconColor = '#A9A9A9';
//     if (item.type.includes('railway') || item.type.includes('station')) { iconName = 'train'; iconColor = '#3F51B5'; }
//     else if (item.type.includes('airport')) { iconName = 'flight'; iconColor = '#2196F3'; }
//     else if (item.type.includes('bus')) { iconName = 'directions-bus'; iconColor = '#FF9800'; }
//     else if (item.type.includes('hospital')) { iconName = 'local-hospital'; iconColor = '#F44336'; }
//     else if (item.type.includes('school') || item.type.includes('college')) { iconName = 'school'; iconColor = '#4CAF50'; }
//     else if (item.type.includes('place_of_worship')) { iconName = 'church'; iconColor = '#9C27B0'; }
//     else if (item.type.includes('shop') || item.type.includes('mall')) { iconName = 'shopping-mall'; iconColor = '#E91E63'; }
//     else if (item.type.includes('park')) { iconName = 'park'; iconColor = '#4CAF50'; }
//     return (
//       <TouchableOpacity key={key} style={styles.suggestionItem} onPress={onSelect}>
//         <MaterialIcons name={iconName as any} size={20} color={iconColor} style={styles.suggestionIcon} />
//         <View style={styles.suggestionTextContainer}>
//           <Text style={styles.suggestionMainText} numberOfLines={1}>{extractMainName(item.name)}</Text>
//           <Text style={styles.suggestionSubText} numberOfLines={1}>{item.address}</Text>
//         </View>
//       </TouchableOpacity>
//     );
//   };

//   // Extract main name
//   const extractMainName = (fullName: string): string => {
//     const parts = fullName.split(',');
//     return parts[0].trim();
//   };

//   // Check if book ride button is enabled
//   const isBookRideButtonEnabled = pickup && dropoff && selectedRideType && estimatedPrice !== null;

//   // Reverse geocode
//   const reverseGeocode = async (lat: number, lon: number): Promise<string | null> => {
//     try {
//       const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1&countrycodes=IN`;
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       return data.display_name || null;
//     } catch (error) {
//       console.error('Reverse geocode error:', error);
//       return null;
//     }
//   };

//   // Handle region change complete
//   const handleRegionChangeComplete = async (region: Region, isPickup: boolean) => {
//     if (regionChangeTimer.current) {
//       clearTimeout(regionChangeTimer.current);
//     }
//     regionChangeTimer.current = setTimeout(async () => {
//       const addr = await reverseGeocode(region.latitude, region.longitude);
//       if (addr) {
//         if (isPickup) {
//           propHandlePickupChange(addr);
//           setPickupLocation({ latitude: region.latitude, longitude: region.longitude });
//           setIsPickupCurrent(false);
//           if (dropoffLocation) fetchRoute(dropoffLocation);
//           fetchNearbyDrivers(region.latitude, region.longitude);
//         } else {
//           propHandleDropoffChange(addr);
//           setDropoffLocation({ latitude: region.latitude, longitude: region.longitude });
//           if (pickupLocation) fetchRoute({ latitude: region.latitude, longitude: region.longitude });
//         }
//       }
//     }, 500);
//   };

//   // Handle cancel button
//   const handleCancel = () => {
//     // Reset all states
//     setPickupLocation(null);
//     setDropoffLocation(null);
//     setRouteCoords([]);
//     setDistance('');
//     setTravelTime('');
//     setEstimatedPrice(null);
//     propHandlePickupChange('');
//     propHandleDropoffChange('');
//     setShowPickupSelector(false);
//     setShowDropoffSelector(false);
//     setShowRideOptions(false);
//   };

//   // Handle cancel ride during searching
//   const handleCancelRide = () => {
//     if (currentRideId) {
//       socket.emit('cancelRide', { rideId: currentRideId });
//     }
//     setRideStatus("idle");
//     setCurrentRideId(null);
//     setShowConfirmModal(false);
//     // Clear polling interval
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Clear acceptance timeout if any
//     AsyncStorage.getItem('acceptanceTimeout').then(id => {
//       if (id) {
//         clearTimeout(parseInt(id));
//         AsyncStorage.removeItem('acceptanceTimeout');
//       }
//     });
//     AsyncStorage.removeItem('currentRideId');
//     AsyncStorage.removeItem('rideStatus');
//     AsyncStorage.removeItem('bookedAt');
//     setBookedAt(null);
//     Alert.alert("Ride Cancelled", "Your ride booking has been cancelled.");
//   };

//   // Handle ride cancelled from server
//   useEffect(() => {
//     const handleRideCancelled = (data: { rideId: string }) => {
//       if (data.rideId === currentRideId) {
//         setRideStatus("idle");
//         setCurrentRideId(null);
//         AsyncStorage.removeItem('currentRideId');
//         AsyncStorage.removeItem('rideStatus');
//         Alert.alert("Ride Cancelled", "Your ride has been cancelled.");
//       }
//     };

//     socket.on("rideCancelled", handleRideCancelled);
//     return () => socket.off("rideCancelled", handleRideCancelled);
//   }, [currentRideId]);

//   // Handle bill modal close and reset
//   const handleBillModalClose = () => {
//     setShowBillModal(false);
//     // Reset all ride states after bill is shown
//     setTimeout(() => {
//       setCurrentRideId(null);
//       setDriverId(null);
//       setDriverLocation(null);
//       setAcceptedDriver(null);
//       setRouteCoords([]);
//       setPickupLocation(null);
//       setDropoffLocation(null);
//       propHandlePickupChange("");
//       propHandleDropoffChange("");
//       setRideStatus("idle");
//       setDriverArrivedAlertShown(false);
//       setRideCompletedAlertShown(false);
//       setShowRideOptions(false);
//       setShowDriverAssignedModal(false);
//       setShowDriverArrivedOverlay(false);
//       setTravelledKm(0);
//       setLastCoord(null);
//       setDistance('');
//       setTravelTime('');
//       setEstimatedPrice(null);
      
//       // Fetch all drivers again after ride completion
//       if (location) {
//         fetchNearbyDrivers(location.latitude, location.longitude);
//       }
//     }, 1000);
//   };

//   return (
//     <View style={styles.container}>
//       {isLoadingLocation ? (
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#4CAF50" />
//           <Text style={styles.loadingText}>Fetching your location...</Text>
//         </View>
//       ) : (
//         <>
//           <View style={styles.mapContainer}>
//             {location && (
//               <MapView
//                 ref={mapRef}
//                 style={styles.map}
//                 initialRegion={{
//                   latitude: location.latitude,
//                   longitude: location.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => {
//                   if (showPickupSelector)
//                     handleRegionChangeComplete(region, true);
//                   else if (showDropoffSelector)
//                     handleRegionChangeComplete(region, false);
//                 }}
//                 showsUserLocation
//               >
//                 {/* Pickup & Drop markers */}
//                 {pickupLocation && (
//                   <Marker
//                     coordinate={pickupLocation}
//                     title="Pickup"
//                     pinColor="blue"
//                   />
//                 )}
//                 {dropoffLocation && (
//                   <Marker
//                     coordinate={dropoffLocation}
//                     title="Dropoff"
//                     pinColor="red"
//                   />
//                 )}
//                 {/* Driver marker */}
//                 {driverLocation && (
//                   <Marker
//                     coordinate={driverLocation}
//                     title="Driver"
//                     key={`driver-${driverLocation.latitude}-${driverLocation.longitude}`}
//                   >
//                     <View style={styles.driverMarkerContainer}>
//                       <View
//                         style={[
//                           styles.vehicleIconContainer,
//                           {
//                             backgroundColor:
//                               rideStatus === "onTheWay" ||
//                               rideStatus === "arrived" ||
//                               rideStatus === "started"
//                                 ? "#FF6B00"
//                                 : "#4CAF50",
//                           },
//                         ]}
//                       >
//                         {renderVehicleIcon(selectedRideType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                       </View>
//                     </View>
//                   </Marker>
//                 )}
//                 {/* Nearby Drivers */}
//                 {(rideStatus === "idle" || rideStatus === "searching") &&
//                   nearbyDrivers &&
//                   nearbyDrivers.length > 0 &&
//                   nearbyDrivers.map((driver) => (
//                     <Marker
//                       key={`nearby-${driver.driverId}-${driver.location.coordinates[1]}-${driver.location.coordinates[0]}`}
//                       coordinate={{
//                         latitude: driver.location.coordinates[1],
//                         longitude: driver.location.coordinates[0],
//                       }}
//                       title={`${driver.name} (${driver.status || "Live"})`}
//                     >
//                       <View style={styles.driverMarkerContainer}>
//                         <View style={styles.vehicleIconContainer}>
//                           {renderVehicleIcon(driver.vehicleType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                         </View>
//                       </View>
//                     </Marker>
//                   ))}
//                 {/* Route polyline */}
//                 {routeCoords && routeCoords.length > 0 && (
//                   <Polyline
//                     coordinates={routeCoords}
//                     strokeWidth={5}
//                     strokeColor="#4CAF50"
//                   />
//                 )}
//               </MapView>
//             )}
       
//             {/* Center Pin when selecting */}
//             {(showPickupSelector || showDropoffSelector) && (
//               <View style={styles.centerMarker}>
//                 <MaterialIcons
//                   name="location-pin"
//                   size={48}
//                   color={showPickupSelector ? '#4CAF50' : '#F44336'}
//                 />
//               </View>
//             )}
       
//             {/* Driver count display based on ride status */}
//             {(rideStatus === "idle" || rideStatus === "searching") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Available Drivers Nearby: {nearbyDriversCount}
//                 </Text>
//               </View>
//             )}
//             {/* Active ride: Show driver status */}
//             {(rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Your Driver is on the way
//                 </Text>
//               </View>
//             )}
//           </View>
        
//           {/* Driver Info Section */}
//           {acceptedDriver && (
//             <View style={styles.driverInfoContainer}>
//               <Text style={styles.driverInfoTitle}>Your Driver</Text>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="person" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.name}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="phone" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.driverMobile || 'N/A'}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="directions-car" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.vehicleType}</Text>
//               </View>
//             </View>
//           )}
        
//           {/* Status Indicator */}
//           {rideStatus === "onTheWay" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Driver is on the way
//                 {driverLocation && pickupLocation && (
//                   <Text style={styles.distanceText}>
//                     {"\n"}Estimated arrival: {calculateDistance(
//                       pickupLocation.latitude,
//                       pickupLocation.longitude,
//                       driverLocation.latitude,
//                       driverLocation.longitude
//                     ).toFixed(1)} km away
//                   </Text>
//                 )}
//               </Text>
//             </View>
//           )}
//           {rideStatus === "arrived" && (
//             <View style={[styles.driversCountOverlay, { backgroundColor: '#4CAF50' }]}>
//               <Text style={[styles.driversCountText, { color: '#FFFFFF' }]}>
//                 🎉 Driver Has Arrived!
//               </Text>
//             </View>
//           )}
//           {rideStatus === "started" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Ride in Progress...
//               </Text>
//             </View>
//           )}
        
//           {/* Input Container - Hide when not idle */}
//           {rideStatus === "idle" && (
//             <View style={styles.inputContainer}>
//               <View style={styles.inputRow}>
//                 <View style={styles.inputWrapper}>
//                   <View style={styles.inputIconContainer}>
//                     <MaterialIcons name="my-location" size={20} color="#4CAF50" />
//                   </View>
//                   <TextInput
//                     style={styles.input}
//                     placeholder="Enter pickup location"
//                     value={pickup}
//                     onChangeText={handlePickupChange}
//                     placeholderTextColor="#999"
//                   />
//                 </View>
//                 <TouchableOpacity
//                   style={styles.selectMapButton}
//                   onPress={() => {
//                     setShowPickupSelector((prev) => !prev);
//                     setShowDropoffSelector(false);
//                   }}
//                 >
//                   <Text style={styles.selectMapButtonText}>
//                     {showPickupSelector ? 'Done' : 'Select on Map'}
//                   </Text>
//                 </TouchableOpacity>
//               </View>
         
//               {showPickupSuggestions && (
//                 <View style={styles.suggestionsContainer}>
//                   {pickupLoading ? (
//                     <View style={styles.loadingContainer}>
//                       <ActivityIndicator size="small" color="#4CAF50" />
//                       <Text style={styles.loadingText}>Loading suggestions...</Text>
//                     </View>
//                   ) : suggestionsError ? (
//                     <View style={styles.errorContainer}>
//                       <Text style={styles.errorText}>{suggestionsError}</Text>
//                     </View>
//                   ) : pickupSuggestions.length > 0 ? (
//                     pickupSuggestions.map((item) => (
//                       renderSuggestionItem(item, () => selectPickupSuggestion(item), item.id)
//                     ))
//                   ) : (
//                     <View style={styles.noSuggestionsContainer}>
//                       <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                     </View>
//                   )}
//                 </View>
//               )}
         
//               <View style={styles.inputRow}>
//                 <View style={styles.inputWrapper}>
//                   <View style={styles.inputIconContainer}>
//                     <MaterialIcons name="place" size={20} color="#F44336" />
//                   </View>
//                   <TextInput
//                     style={styles.input}
//                     placeholder="Enter dropoff location"
//                     value={dropoff}
//                     onChangeText={handleDropoffChange}
//                     placeholderTextColor="#999"
//                   />
//                 </View>
//                 <TouchableOpacity
//                   style={styles.selectMapButton}
//                   onPress={() => {
//                     setShowDropoffSelector((prev) => !prev);
//                     setShowPickupSelector(false);
//                   }}
//                 >
//                   <Text style={styles.selectMapButtonText}>
//                     {showDropoffSelector ? 'Done' : 'Select on Map'}
//                   </Text>
//                 </TouchableOpacity>
//               </View>
         
//               {showDropoffSuggestions && (
//                 <View style={styles.suggestionsContainer}>
//                   {dropoffLoading ? (
//                     <View style={styles.loadingContainer}>
//                       <ActivityIndicator size="small" color="#4CAF50" />
//                       <Text style={styles.loadingText}>Loading suggestions...</Text>
//                     </View>
//                   ) : suggestionsError ? (
//                     <View style={styles.errorContainer}>
//                       <Text style={styles.errorText}>{suggestionsError}</Text>
//                     </View>
//                   ) : dropoffSuggestions.length > 0 ? (
//                     dropoffSuggestions.map((item) => (
//                       renderSuggestionItem(item, () => selectDropoffSuggestion(item), item.id)
//                     ))
//                   ) : (
//                     <View style={styles.noSuggestionsContainer}>
//                       <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                     </View>
//                   )}
//                 </View>
//               )}
//             </View>
//           )}
     
//           {/* API Error */}
//           {apiError && (
//             <View style={styles.errorContainer}>
//               <Text style={styles.errorText}>{apiError}</Text>
//             </View>
//           )}
        
//           {/* Cancel and Book Ride Buttons - Hide when not idle */}
//           {rideStatus === "idle" && (
//             <View style={styles.actionButtonsContainer}>
//               <TouchableOpacity
//                 style={styles.cancelButton}
//                 onPress={handleCancel}
//               >
//                 <Text style={styles.cancelButtonText}>CANCEL</Text>
//               </TouchableOpacity>
//               <TouchableOpacity
//                 style={[
//                   styles.bookRideButton,
//                   isBookRideButtonEnabled ? styles.enabledBookRideButton : styles.disabledBookRideButton,
//                 ]}
//                 onPress={handleBookRide}
//                 disabled={!isBookRideButtonEnabled}
//               >
//                 <Text style={styles.bookRideButtonText}>BOOK RIDE</Text>
//               </TouchableOpacity>
//             </View>
//           )}

//           {/* Route Details Modal */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showRouteDetailsModal}
//             onRequestClose={() => setShowRouteDetailsModal(false)}
//           >
//             <View style={styles.routeDetailsModalOverlay}>
//               <View style={styles.routeDetailsModalContainer}>
//                 <View style={styles.routeDetailsModalHeader}>
//                   <Text style={styles.routeDetailsModalTitle}>RIDE DETAILS</Text>
//                   <TouchableOpacity onPress={() => setShowRouteDetailsModal(false)}>
//                     <MaterialIcons name="close" size={24} color="#333" />
//                   </TouchableOpacity>
//                 </View>
            
//                 <ScrollView style={styles.routeDetailsContent} showsVerticalScrollIndicator={false}>
//                   <View style={styles.routeDetailsRow}>
//                     <Text style={styles.routeDetailsLabel}>DISTANCE:</Text>
//                     <Text style={styles.routeDetailsValue}>{distance || '---'}</Text>
//                   </View>
//                   <View style={styles.routeDetailsRow}>
//                     <Text style={styles.routeDetailsLabel}>TRAVEL TIME:</Text>
//                     <Text style={styles.routeDetailsValue}>{travelTime || '---'}</Text>
//                   </View>
//                   <View style={styles.routeDetailsRow}>
//                     <Text style={styles.routeDetailsLabel}>PRICE:</Text>
//                     <Text style={styles.routeDetailsValue}>₹{estimatedPrice || 'Calculating...'}</Text>
//                   </View>
                
//                   <View style={styles.routeDetailsDivider} />
                
//                   <Text style={styles.availableDriversText}>Available Drivers Nearby: {nearbyDriversCount}</Text>
                
//                   <View style={styles.rideOptionsContainer}>
//                     {/* Porter Option */}
//                     <TouchableOpacity
//                       style={[
//                         styles.rideOptionButton,
//                         selectedRideType === 'port' && styles.selectedRideOptionButton,
//                       ]}
//                       onPress={() => {
//                         setSelectedRideType('port');
//                       }}
//                     >
//                       <View style={styles.rideOptionIconContainer}>
//                         <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//                       </View>
//                       <View style={styles.rideOptionInfoContainer}>
//                         <Text style={[
//                           styles.rideOptionTypeText,
//                           selectedRideType === 'port' && styles.selectedRideOptionTypeText,
//                         ]}>CarGo Porter</Text>
//                         <Text style={[
//                           styles.rideOptionDetailsText,
//                           selectedRideType === 'port' && styles.selectedRideOptionDetailsText,
//                         ]}>Max 5 ton</Text>
//                         <Text style={styles.rideOptionPriceText}>
//                           {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//                         </Text>
//                       </View>
//                     </TouchableOpacity>
                  
//                     {/* Taxi Option */}
//                     <TouchableOpacity
//                       style={[
//                         styles.rideOptionButton,
//                         selectedRideType === 'taxi' && styles.selectedRideOptionButton,
//                       ]}
//                       onPress={() => {
//                         setSelectedRideType('taxi');
//                       }}
//                     >
//                       <View style={styles.rideOptionIconContainer}>
//                         <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//                       </View>
//                       <View style={styles.rideOptionInfoContainer}>
//                         <Text style={[
//                           styles.rideOptionTypeText,
//                           selectedRideType === 'taxi' && styles.selectedRideOptionTypeText,
//                         ]}>Taxi</Text>
//                         <Text style={[
//                           styles.rideOptionDetailsText,
//                           selectedRideType === 'taxi' && styles.selectedRideOptionDetailsText,
//                         ]}>4 seats</Text>
//                         <Text style={styles.rideOptionPriceText}>
//                           {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//                         </Text>
//                       </View>
//                     </TouchableOpacity>
                  
//                     {/* Bike Option */}
//                     <TouchableOpacity
//                       style={[
//                         styles.rideOptionButton,
//                         selectedRideType === 'bike' && styles.selectedRideOptionButton,
//                       ]}
//                       onPress={() => {
//                         setSelectedRideType('bike');
//                       }}
//                     >
//                       <View style={styles.rideOptionIconContainer}>
//                         <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//                       </View>
//                       <View style={styles.rideOptionInfoContainer}>
//                         <Text style={[
//                           styles.rideOptionTypeText,
//                           selectedRideType === 'bike' && styles.selectedRideOptionTypeText,
//                         ]}>Motorcycle</Text>
//                         <Text style={[
//                           styles.rideOptionDetailsText,
//                           selectedRideType === 'bike' && styles.selectedRideOptionDetailsText,
//                         ]}>1 person</Text>
//                         <Text style={styles.rideOptionPriceText}>
//                           {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//                         </Text>
//                       </View>
//                     </TouchableOpacity>
//                   </View>
//                 </ScrollView>
            
//                 <View style={styles.routeDetailsModalButtons}>
//                   <TouchableOpacity
//                     style={styles.routeDetailsCancelButton}
//                     onPress={() => setShowRouteDetailsModal(false)}
//                   >
//                     <Text style={styles.routeDetailsCancelButtonText}>CANCEL</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={styles.routeDetailsConfirmButton}
//                     onPress={() => {
//                       setShowRouteDetailsModal(false);
//                       handleConfirmBookingFromModal();
//                     }}
//                   >
//                     <Text style={styles.routeDetailsConfirmButtonText}>BOOK RIDE</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
        
//           {/* Ride Details Modal - New modal matching the screenshot */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showRideOptions && !showRouteDetailsModal}
//             onRequestClose={() => setShowRideOptions(false)}
//           >
//             <View style={styles.rideDetailsModalOverlay}>
//               <View style={styles.rideDetailsModalContainer}>
//                 <View style={styles.rideDetailsHeader}>
//                   <Text style={styles.rideDetailsTitle}>RIDE DETAILS</Text>
//                   <TouchableOpacity onPress={() => setShowRideOptions(false)}>
//                     <MaterialIcons name="close" size={24} color="#333" />
//                   </TouchableOpacity>
//                 </View>
              
//                 <ScrollView style={styles.rideDetailsContent} showsVerticalScrollIndicator={false}>
//                   <View style={styles.rideDetailsSection}>
//                     <Text style={styles.rideDetailsSectionTitle}>Pickup Location</Text>
//                     <Text style={styles.rideDetailsLocationText}>{pickup || '---'}</Text>
//                   </View>
                
//                   <View style={styles.rideDetailsSection}>
//                     <Text style={styles.rideDetailsSectionTitle}>Drop-off</Text>
//                     <Text style={styles.rideDetailsLocationText}>{dropoff || '---'}</Text>
//                   </View>
                
//                   <View style={styles.rideDetailsRow}>
//                     <Text style={styles.rideDetailsLabel}>Distance:</Text>
//                     <Text style={styles.rideDetailsValue}>{distance || '---'}</Text>
//                   </View>
                
//                   <View style={styles.rideDetailsRow}>
//                     <Text style={styles.rideDetailsLabel}>Price:</Text>
//                     <Text style={styles.rideDetailsValue}>₹{estimatedPrice || '---'}</Text>
//                   </View>
                
//                   <View style={styles.rideDetailsRow}>
//                     <Text style={styles.rideDetailsLabel}>Return trip:</Text>
//                     <Switch
//                       value={wantReturn}
//                       onValueChange={setWantReturn}
//                       trackColor={{ false: '#767577', true: '#4CAF50' }}
//                       thumbColor={wantReturn ? '#FFFFFF' : '#f4f3f4'}
//                     />
//                   </View>
//                 </ScrollView>
              
//                 <View style={styles.rideDetailsButtons}>
//                   <TouchableOpacity
//                     style={styles.bookMyRideButton}
//                     onPress={handleBookRide}
//                     disabled={!isBookRideButtonEnabled}
//                   >
//                     <Text style={styles.bookMyRideButtonText}>BOOK MY RIDE</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
     
//           {/* Confirm Modal */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showConfirmModal}
//             onRequestClose={() => setShowConfirmModal(false)}
//           >
//             <View style={styles.modalOverlay}>
//               <View style={styles.modalContainer}>
//                 <View style={styles.modalHeader}>
//                   <Text style={styles.modalTitle}>Confirm Booking</Text>
//                   <TouchableOpacity onPress={() => setShowConfirmModal(false)}>
//                     <MaterialIcons name="close" size={24} color="#666" />
//                   </TouchableOpacity>
//                 </View>
//                 <View style={styles.modalContent}>
//                   <View style={styles.modalIconContainer}>
//                     <Ionicons name="checkmark-circle" size={60} color="#4CAF50" />
//                   </View>
//                   <Text style={styles.modalMessage}>
//                     Thank you for choosing EAZY GO!
//                   </Text>
//                   <Text style={styles.modalSubMessage}>
//                     Your ride has been successfully booked.
//                   </Text>
//                   <View style={styles.otpContainer}>
//                     <Text style={styles.otpLabel}>Your pickup OTP is:</Text>
//                     <Text style={styles.otpValue}>{bookingOTP}</Text>
//                   </View>
//                   <Text style={styles.otpWarning}>
//                     Please don't share it with anyone. Only share with our driver.
//                   </Text>
//                 </View>
//                 <View style={styles.modalButtons}>
//                   <TouchableOpacity
//                     style={styles.modalCancelButton}
//                     onPress={() => setShowConfirmModal(false)}
//                   >
//                     <Text style={styles.modalCancelButtonText}>Cancel</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={styles.modalConfirmButton}
//                     onPress={handleConfirmBooking}
//                   >
//                     <Text style={styles.modalConfirmButtonText}>Confirm</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>

//           {/* Bill Modal */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showBillModal}
//             onRequestClose={handleBillModalClose}
//           >
//             <View style={styles.modalOverlay}>
//               <View style={styles.modalContainer}>
//                 <View style={styles.modalHeader}>
//                   <Text style={styles.modalTitle}>Ride Bill</Text>
//                   <TouchableOpacity onPress={handleBillModalClose}>
//                     <MaterialIcons name="close" size={24} color="#666" />
//                   </TouchableOpacity>
//                 </View>
//                 <View style={styles.modalContent}>
//                   <View style={styles.modalIconContainer}>
//                     <Ionicons name="receipt" size={60} color="#4CAF50" />
//                   </View>
//                   <Text style={styles.modalMessage}>
//                     Thank you for choosing EAZY GO!
//                   </Text>
//                   <Text style={styles.modalSubMessage}>
//                     Your ride has been completed.
//                   </Text>
//                   <View style={styles.billDetailsContainer}>
//                     <View style={styles.billRow}>
//                       <Text style={styles.billLabel}>Driver Name:</Text>
//                       <Text style={styles.billValue}>{billDetails.driverName}</Text>
//                     </View>
//                     <View style={styles.billRow}>
//                       <Text style={styles.billLabel}>Vehicle Type:</Text>
//                       <Text style={styles.billValue}>{billDetails.vehicleType}</Text>
//                     </View>
//                     <View style={styles.billRow}>
//                       <Text style={styles.billLabel}>Distance:</Text>
//                       <Text style={styles.billValue}>{billDetails.distance}</Text>
//                     </View>
//                     <View style={styles.billRow}>
//                       <Text style={styles.billLabel}>Travel Time:</Text>
//                       <Text style={styles.billValue}>{billDetails.travelTime}</Text>
//                     </View>
//                     <View style={styles.billDivider} />
//                     <View style={styles.billRow}>
//                       <Text style={styles.billTotalLabel}>Total Amount:</Text>
//                       <Text style={styles.billTotalValue}>₹{billDetails.charge}</Text>
//                     </View>
//                   </View>
//                 </View>
//                 <View style={styles.modalButtons}>
//                   <TouchableOpacity
//                     style={styles.modalConfirmButton}
//                     onPress={handleBillModalClose}
//                   >
//                     <Text style={styles.modalConfirmButtonText}>OK</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
          
//           {/* Searching Overlay - Matches Figma design */}
//           {rideStatus === "searching" && (
//             <View style={styles.searchingOverlay}>
//               <Image
//                 source={SearchingIllustration}
//                 style={styles.searchingIllustration}
//               />
//               <ActivityIndicator size="large" color="#4CAF50" style={styles.progressBar} />
//               <Text style={styles.searchingMessage}>PLEASE HOLD! WE ARE SEARCHING FOR NEARBY DRIVER FOR YOU.</Text>
//               <TouchableOpacity style={styles.cancelRideButton} onPress={handleCancelRide}>
//                 <Text style={styles.cancelRideButtonText}>Cancel Ride</Text>
//               </TouchableOpacity>
//             </View>
//           )}
          
//           {/* Driver Assigned Overlay - Same style as searching overlay */}
//           {showDriverAssignedModal && (
//             <View style={styles.searchingOverlay}>
//               <Image
//                 source={DriverAssignedIllustration}
//                 style={styles.driverAssignedIllustration}
//               />
//               <View style={styles.driverAssignedHeader}>
//                 <Text style={styles.driverAssignedTitle}>Driver Assigned</Text>
//               </View>
//               <View style={styles.driverInfoRow}>
//                 <View style={styles.driverProfileImageContainer}>
//                   <FontAwesome name="user-circle" size={60} color="#4CAF50" />
//                 </View>
//                 <View style={styles.driverDetailsContainer}>
//                   <Text style={styles.driverNameText}>{acceptedDriver?.name || 'Driver'}</Text>
//                   <Text style={styles.driverVehicleText}>{acceptedDriver?.vehicleType || 'Taxi'}</Text>
//                 </View>
//               </View>
//               <View style={styles.driverContactContainer}>
//                 <Text style={styles.driverContactLabel}>Contact Number</Text>
//                 <View style={styles.driverPhoneRow}>
//                   <Text style={styles.driverPhoneText}>
//                     {formatPhoneNumber(acceptedDriver?.driverMobile)}
//                   </Text>
//                   <TouchableOpacity style={styles.phoneIconContainer} onPress={handlePhoneCall}>
//                     <MaterialIcons name="phone" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                 </View>
//               </View>
//               <View style={styles.otpInfoContainer}>
//                 <Text style={styles.otpInfoText}>
//                   Our Driver once reached. please share this OTP:
//                 </Text>
//                 <View style={styles.otpDisplayContainer}>
//                   <Text style={styles.otpDisplayText}>{bookingOTP}</Text>
//                 </View>
//               </View>
//             </View>
//           )}
          
//           {/* Driver Arrived Overlay */}
//           {showDriverArrivedOverlay && (
//             <View style={styles.searchingOverlay}>
//               <Image
//                 source={DriverArrivedIllustration}
//                 style={styles.searchingIllustration}
//               />
//               <Text style={styles.searchingMessage}>DRIVER HAS ARRIVED!</Text>
//               <Text style={styles.driverArrivedSubMessage}>Please share your OTP: {bookingOTP}</Text>
//             </View>
//           )}
//         </>
//       )}
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: { flex: 1, backgroundColor: '#F5F5F5' },
//   loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
//   loadingText: { color: '#757575', fontSize: 16, marginTop: 10 },
//   mapContainer: {
//     height: Dimensions.get('window').height * 0.6, // 60% of screen
//     width: '100%',
//     borderRadius: 15,
//     overflow: 'hidden',
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   map: { ...StyleSheet.absoluteFillObject },
//   centerMarker: {
//     position: 'absolute',
//     top: '50%',
//     left: '50%',
//     transform: [{ translateX: -24 }, { translateY: -48 }],
//     zIndex: 10,
//   },
//   driversCountOverlay: {
//     position: 'absolute',
//     top: 10,
//     left: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     paddingHorizontal: 12,
//     paddingVertical: 8,
//     borderRadius: 20,
//     elevation: 2,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.2,
//     shadowRadius: 2
//   },
//   driversCountText: { fontSize: 14, fontWeight: '600', color: '#333333' },
//   driverInfoContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   driverInfoTitle: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#333333',
//     marginBottom: 10
//   },
//   driverDetailsRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   driverDetailText: {
//     fontSize: 14,
//     color: '#555555',
//     marginLeft: 10
//   },
//   statusContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   statusIndicator: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   statusText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#4CAF50',
//     marginLeft: 10
//   },
//   statusSubText: {
//     fontSize: 14,
//     color: '#757575',
//     textAlign: 'center'
//   },
//   inputContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   inputRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   inputWrapper: {
//     flex: 1,
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingHorizontal: 15,
//     paddingVertical: 5,
//   },
//   inputIconContainer: {
//     marginRight: 10,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   distanceText: {
//     fontSize: 12,
//     fontWeight: 'normal',
//     color: '#666666',
//   },
//   input: { flex: 1, fontSize: 16, paddingVertical: 12, color: '#333' },
//   selectMapButton: {
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     backgroundColor: '#4CAF50',
//     borderRadius: 5,
//     marginRight: 10,
//   },
//   selectMapButtonText: {
//     color: '#FFFFFF',
//     fontSize: 12,
//   },
//   suggestionsContainer: {
//     marginTop: 5,
//     marginHorizontal: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 8,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     maxHeight: 200
//   },
//   suggestionItem: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingVertical: 12,
//     paddingHorizontal: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   suggestionIcon: { marginRight: 12 },
//   suggestionTextContainer: { flex: 1 },
//   suggestionMainText: { fontSize: 16, fontWeight: '500', color: '#333333' },
//   suggestionSubText: { fontSize: 12, color: '#757575', marginTop: 2 },
//   noSuggestionsContainer: { paddingVertical: 12, alignItems: 'center' },
//   noSuggestionsText: { fontSize: 14, color: '#666666' },
//   distanceTimeContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   distanceTimeItem: { flexDirection: 'row', alignItems: 'center' },
//   distanceTimeLabel: { fontSize: 14, fontWeight: '600', color: '#757575', marginLeft: 8 },
//   distanceTimeValue: { fontSize: 14, fontWeight: 'bold', color: '#333333', marginLeft: 5 },
//   rideTypeContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//   },
//   rideTypeButton: {
//     width: '100%',
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 5,
//     marginBottom: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   selectedRideTypeButton: {
//     backgroundColor: '#4caf50',
//     borderWidth: 2,
//     borderColor: '#4caf50'
//   },
//   rideIconContainer: {
//     marginRight: 15,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideInfoContainer: {
//     flex: 1,
//   },
//   rideTypeText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 4,
//   },
//   selectedRideTypeText: {
//     color: '#FFFFFF'
//   },
//   rideDetailsText: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 6,
//   },
//   selectedRideDetailsText: {
//     color: '#FFFFFF'
//   },
//   ridePriceText: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   checkmarkContainer: {
//     justifyContent: 'center',
//     alignItems: 'center',
//     paddingLeft: 10,
//   },
//   // New styles for action buttons
//   actionButtonsContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 20,
//   },
//   cancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     marginRight: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   cancelButtonText: {
//     color: '#666666',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   bookRideButton: {
//     flex: 1,
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     marginLeft: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   enabledBookRideButton: { backgroundColor: '#4caf50' },
//   disabledBookRideButton: { backgroundColor: '#BDBDBD' },
//   bookRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   errorContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFEBEE',
//     borderRadius: 12,
//     padding: 15,
//     borderLeftWidth: 4,
//     borderLeftColor: '#F44336'
//   },
//   errorText: {
//     color: '#D32F2F',
//     fontSize: 14,
//     textAlign: 'center'
//   },
//   pricePanel: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     padding: 20,
//     maxHeight: Dimensions.get('window').height * 0.5,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   panelHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//     paddingBottom: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   panelTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   priceDetailsContainer: {
//     flexDirection: 'row',
//     marginBottom: 8
//   },
//   driverMarkerContainer: {
//     alignItems: 'center',
//     justifyContent: 'center',
//     width: 50,
//     height: 50,
//   },
//   vehicleIconContainer: {
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     backgroundColor: '#4CAF50',
//     alignItems: 'center',
//     justifyContent: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   priceInfoContainer: {
//     flex: 1
//   },
//   priceRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 10
//   },
//   priceLabel: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     flex: 1
//   },
//   priceValue: {
//     fontSize: 13,
//     fontWeight: 'bold',
//     color: '#333333',
//     flex: 2,
//     textAlign: 'right'
//   },
//   returnTripRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginTop: 5
//   },
//   bookButtonContainer: {
//     marginTop: 10
//   },
//   bookMyRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   bookMyRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   modalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   modalContainer: {
//     width: '85%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   modalHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   modalContent: {
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalIconContainer: {
//     marginBottom: 15
//   },
//   modalMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 5
//   },
//   modalSubMessage: {
//     fontSize: 16,
//     color: '#666666',
//     textAlign: 'center',
//     marginBottom: 20
//   },
//   otpContainer: {
//     backgroundColor: '#F5F5F5',
//     borderRadius: 10,
//     padding: 15,
//     alignItems: 'center',
//     marginBottom: 15,
//     width: '100%'
//   },
//   otpLabel: {
//     fontSize: 14,
//     color: '#666666',
//     marginBottom: 5
//   },
//   otpValue: {
//     fontSize: 24,
//     fontWeight: 'bold',
//     color: '#4caf50'
//   },
//   otpWarning: {
//     fontSize: 12,
//     color: '#F44336',
//     textAlign: 'center',
//     fontStyle: 'italic'
//   },
//   modalButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between'
//   },
//   modalCancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginRight: 10,
//     alignItems: 'center'
//   },
//   modalCancelButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#666666'
//   },
//   modalConfirmButton: {
//     flex: 1,
//     backgroundColor: '#4CAF50',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginLeft: 10,
//     alignItems: 'center'
//   },
//   modalConfirmButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#FFFFFF'
//   },
//   vehicleMarkerContainer: {
//     borderRadius: 20,
//     padding: 5,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   // Bill Modal Styles
//   billDetailsContainer: {
//     width: '100%',
//     backgroundColor: '#F5F5F5',
//     borderRadius: 10,
//     padding: 15,
//     marginBottom: 15
//   },
//   billRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 10
//   },
//   billLabel: {
//     fontSize: 14,
//     color: '#666666'
//   },
//   billValue: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   billDivider: {
//     height: 1,
//     backgroundColor: '#DDDDDD',
//     marginVertical: 10
//   },
//   billTotalLabel: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   billTotalValue: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#4CAF50'
//   },
//   // Route Details Modal Styles
//   routeDetailsModalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'flex-end', // Position at bottom
//     alignItems: 'center',
//   },
//   routeDetailsModalContainer: {
//     width: '100%', // Full width
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     padding: 20,
//     maxHeight: '70%', // Limit height to 70% of screen
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6,
//   },
//   routeDetailsModalHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//     paddingBottom: 10,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   routeDetailsModalTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   routeDetailsContent: {
//     marginBottom: 15,
//     maxHeight: 300, // Limit content height
//   },
//   routeDetailsRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 10,
//   },
//   routeDetailsLabel: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#333333'
//   },
//   routeDetailsValue: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#4CAF50'
//   },
//   routeDetailsDivider: {
//     height: 1,
//     backgroundColor: '#EEEEEE',
//     marginVertical: 10,
//   },
//   availableDriversText: {
//     fontSize: 12,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 10,
//   },
//   rideOptionsContainer: {
//     marginBottom: 5,
//   },
//   rideOptionButton: {
//     width: '100%',
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 8,
//     padding: 10,
//     marginBottom: 8,
//     borderWidth: 1,
//     borderColor: '#EEEEEE',
//   },
//   selectedRideOptionButton: {
//     backgroundColor: '#4caf50',
//     borderWidth: 1,
//     borderColor: '#4caf50',
//   },
//   rideOptionIconContainer: {
//     marginRight: 10,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   rideOptionInfoContainer: {
//     flex: 1,
//   },
//   rideOptionTypeText: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 2,
//   },
//   selectedRideOptionTypeText: {
//     color: '#FFFFFF',
//   },
//   rideOptionDetailsText: {
//     fontSize: 12,
//     color: '#757575',
//     marginBottom: 4,
//   },
//   selectedRideOptionDetailsText: {
//     color: '#FFFFFF',
//   },
//   rideOptionPriceText: {
//     fontSize: 12,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   routeDetailsModalButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     paddingTop: 10,
//     borderTopWidth: 1,
//     borderTopColor: '#EEEEEE',
//   },
//   routeDetailsCancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 12,
//     borderRadius: 8,
//     marginRight: 10,
//     alignItems: 'center',
//   },
//   routeDetailsCancelButtonText: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#666666',
//   },
//   routeDetailsConfirmButton: {
//     flex: 1,
//     backgroundColor: '#4CAF50',
//     paddingVertical: 12,
//     borderRadius: 8,
//     marginLeft: 10,
//     alignItems: 'center',
//   },
//   routeDetailsConfirmButtonText: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#FFFFFF',
//   },
//   // Ride Details Modal Styles - New modal matching the screenshot
//   rideDetailsModalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideDetailsModalContainer: {
//     width: '90%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   rideDetailsHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20,
//     paddingBottom: 10,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   rideDetailsTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   rideDetailsContent: {
//     marginBottom: 20
//   },
//   rideDetailsSection: {
//     marginBottom: 15
//   },
//   rideDetailsSectionTitle: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     marginBottom: 5
//   },
//   rideDetailsLocationText: {
//     fontSize: 16,
//     color: '#333333'
//   },
//   rideDetailsRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15
//   },
//   rideDetailsLabel: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333'
//   },
//   rideDetailsValue: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#4CAF50'
//   },
//   rideDetailsButtons: {
//     marginTop: 10
//   },
//   // New styles for searching overlay
//   searchingOverlay: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     height: Dimensions.get('window').height * 0.55,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     alignItems: 'center',
//     justifyContent: 'center',
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6,
//   },
//   searchingIllustration: {
//     width: 200,
//     height: 200,
//     resizeMode: 'contain',
//     marginBottom: 20,
//   },
//   progressBar: {
//     marginBottom: 20,
//   },
//   searchingMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 30,
//   },
//   cancelRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     paddingHorizontal: 40,
//     borderRadius: 10,
//   },
//   cancelRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600',
//   },
//   // New styles for driver assigned overlay - same as searching overlay
//   driverAssignedIllustration: {
//     width: 450,
//     height: 98,
//     resizeMode: 'contain',
//     marginBottom: 10,
//   },
//   driverAssignedHeader: {
//     width: '100%',
//     alignItems: 'center',
//     marginBottom: 20,
//   },
//   driverAssignedTitle: {
//     fontSize: 15,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   driverInfoRow: {
//     flexDirection: 'row',
//     width: '100%',
//     alignItems: 'center',
//     marginBottom: 20,
//   },
//   driverProfileImageContainer: {
//     marginRight: 15,
//   },
//   driverDetailsContainer: {
//     flex: 1,
//   },
//   driverNameText: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     marginBottom: 5,
//   },
//   driverVehicleText: {
//     fontSize: 14,
//     color: '#666666',
//   },
//   driverContactContainer: {
//     width: '100%',
//     marginBottom: 20,
//   },
//   driverContactLabel: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 10,
//   },
//   driverPhoneRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     justifyContent: 'space-between',
//     backgroundColor: '#F5F5F5',
//     padding: 15,
//     borderRadius: 10,
//   },
//   driverPhoneText: {
//     fontSize: 16,
//     color: '#333333',
//   },
//   phoneIconContainer: {
//     padding: 5,
//   },
//   otpInfoContainer: {
//     width: '100%',
//     alignItems: 'center',
//     marginBottom: 20,
//   },
//   otpInfoText: {
//     fontSize: 16,
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 10,
//   },
//   otpDisplayContainer: {
//     backgroundColor: '#F5F5F5',
//     padding: 15,
//     borderRadius: 10,
//     width: '60%',
//     alignItems: 'center',
//   },
//   otpDisplayText: {
//     fontSize: 24,
//     fontWeight: 'bold',
//     color: '#4CAF50',
//   },
//   driverArrivedSubMessage: {
//     fontSize: 16,
//     color: '#666666',
//     textAlign: 'center',
//     marginBottom: 20,
//   },
// });

// export default TaxiContent;











































































































































































































































































































































































































































































































































































































































































































// import React, { useState, useEffect, useRef, useCallback } from 'react';
// import {
//   View,
//   StyleSheet,
//   Text,
//   TouchableOpacity,
//   Dimensions,
//   Alert,
//   ActivityIndicator,
//   Animated,
//   Switch,
//   Modal,
//   TextInput,
//   PermissionsAndroid,
//   Platform,
//   Image,
//   ScrollView,
//   Linking
// } from 'react-native';
// import MapView, { Marker, Polyline, Region } from 'react-native-maps';
// import Geolocation from '@react-native-community/geolocation';
// import socket from '../../socket';
// import haversine from 'haversine-distance';
// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
// import Ionicons from 'react-native-vector-icons/Ionicons';
// import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
// import FontAwesome from 'react-native-vector-icons/FontAwesome';
// import axios from 'axios';
// import Svg, { Path, Circle, Rect } from 'react-native-svg';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getBackendUrl } from '../../util/backendConfig';
// import BikeIcon from '../../../assets001/bike.svg';
// import LorryIcon from '../../../assets001/lorry.svg';
// import TaxiIcon from '../../../assets001/taxi.svg';
// import LogoImage from '../../../assets/logo4.png';
// import TaxiAlertImage from '../../../assets/taxi.png';

// const RideTypeSelector = ({ selectedRideType, setSelectedRideType, estimatedPrice, distance, dynamicPrices }) => {
//   return (
//     <View style={styles.rideTypeContainer}>
//       {/* Porter Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'port' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('port')}
//         activeOpacity={0.7}
//       >
//         <View style={styles.rideIconContainer}>
//           <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'port' && styles.selectedRideTypeText,
//           ]}>CarGo Porter</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'port' && styles.selectedRideDetailsText,
//           ]}>Max 5 ton</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//           </Text>
//         </View>
//         {selectedRideType === 'port' && (
//           <View style={styles.checkmarkContainer}>
//             <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
//           </View>
//         )}
//       </TouchableOpacity>
  
//       {/* Taxi Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'taxi' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('taxi')}
//         activeOpacity={0.7}
//       >
//         <View style={styles.rideIconContainer}>
//           <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'taxi' && styles.selectedRideTypeText,
//           ]}>Taxi</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'taxi' && styles.selectedRideDetailsText,
//           ]}>4 seats</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//           </Text>
//         </View>
//         {selectedRideType === 'taxi' && (
//           <View style={styles.checkmarkContainer}>
//             <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
//           </View>
//         )}
//       </TouchableOpacity>
  
//       {/* Bike Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'bike' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('bike')}
//         activeOpacity={0.7}
//       >
//         <View style={styles.rideIconContainer}>
//           <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'bike' && styles.selectedRideTypeText,
//           ]}>Motorcycle</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'bike' && styles.selectedRideDetailsText,
//           ]}>1 person</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//           </Text>
//         </View>
//         {selectedRideType === 'bike' && (
//           <View style={styles.checkmarkContainer}>
//             <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
//           </View>
//         )}
//       </TouchableOpacity>
//     </View>
//   );
// };

// interface LocationType {
//   latitude: number;
//   longitude: number;
// }

// interface SuggestionType {
//   id: string;
//   name: string;
//   address: string;
//   lat: string;
//   lon: string;
//   type: string;
//   importance: number;
// }

// interface DriverType {
//   driverId: string;
//   name: string;
//   location: {
//     coordinates: [number, number]; // [longitude, latitude]
//   };
//   vehicleType: string;
//   status?: string;
//   driverMobile?: string;
// }

// interface TaxiContentProps {
//   loadingLocation?: boolean;
//   currentLocation: LocationType | null;
//   lastSavedLocation: LocationType | null;
//   pickup: string;
//   dropoff: string;
//   handlePickupChange: (text: string) => void;
//   handleDropoffChange: (text: string) => void;
// }

// const TaxiContent: React.FC<TaxiContentProps> = ({
//   loadingLocation: propLoadingLocation,
//   currentLocation: propCurrentLocation,
//   lastSavedLocation: propLastSavedLocation,
//   pickup,
//   dropoff,
//   handlePickupChange: propHandlePickupChange,
//   handleDropoffChange: propHandleDropoffChange,
// }) => {
//   const [isLoadingLocation, setIsLoadingLocation] = useState(true);
//   const [selectedRideType, setSelectedRideType] = useState<string>('taxi');
//   const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);
//   const [showPricePanel, setShowPricePanel] = useState(false);
//   const [wantReturn, setWantReturn] = useState(false);
//   const [distance, setDistance] = useState<string>('');
//   const [travelTime, setTravelTime] = useState<string>('');
//   const [showConfirmModal, setShowConfirmModal] = useState(false);
//   const [bookingOTP, setBookingOTP] = useState<string>('');
//   const [apiError, setApiError] = useState<string | null>(null);
//   const [location, setLocation] = useState<LocationType | null>(null);
//   const [pickupLocation, setPickupLocation] = useState<LocationType | null>(null);
//   const [dropoffLocation, setDropoffLocation] = useState<LocationType | null>(null);
//   const [routeCoords, setRouteCoords] = useState<LocationType[]>([]);
//   const [currentRideId, setCurrentRideId] = useState<string | null>(null);
//   const [rideStatus, setRideStatus] = useState<"idle" | "searching" | "onTheWay" | "arrived" | "started" | "completed">("idle");
//   const [driverId, setDriverId] = useState<string | null>(null);
//   const [driverLocation, setDriverLocation] = useState<LocationType | null>(null);
//   const [travelledKm, setTravelledKm] = useState(0);
//   const [lastCoord, setLastCoord] = useState<LocationType | null>(null);
//   const [nearbyDrivers, setNearbyDrivers] = useState<DriverType[]>([]);
//   const [nearbyDriversCount, setNearbyDriversCount] = useState<number>(0);
//   const [pickupSuggestions, setPickupSuggestions] = useState<SuggestionType[]>([]);
//   const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);
//   const [dropoffSuggestions, setDropoffSuggestions] = useState<SuggestionType[]>([]);
//   const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);
//   const [pickupLoading, setPickupLoading] = useState(false);
//   const [dropoffLoading, setDropoffLoading] = useState(false);
//   const [suggestionsError, setSuggestionsError] = useState<string | null>(null);
//   const [pickupCache, setPickupCache] = useState<Record<string, SuggestionType[]>>({});
//   const [dropoffCache, setDropoffCache] = useState<Record<string, SuggestionType[]>>({});
//   const [isPickupCurrent, setIsPickupCurrent] = useState(false);
//   const [socketConnected, setSocketConnected] = useState(false);
//   const [driverArrivedAlertShown, setDriverArrivedAlertShown] = useState(false);
//   const [rideCompletedAlertShown, setRideCompletedAlertShown] = useState(false);
//   const [acceptedDriver, setAcceptedDriver] = useState<DriverType | null>(null);
//   const [isBooking, setIsBooking] = useState(false);
//   const [driverName, setDriverName] = useState<string | null>(null);
//   const [driverMobile, setDriverMobile] = useState<string | null>(null);
//   const [bookedAt, setBookedAt] = useState<Date | null>(null);
//   const [showPickupMapModal, setShowPickupMapModal] = useState(false);
//   const [showDropoffMapModal, setShowDropoffMapModal] = useState(false);
//   const [showRouteDetailsModal, setShowRouteDetailsModal] = useState(false);
//   const [dynamicPrices, setDynamicPrices] = useState({
//     bike: 0,
//     taxi: 0,
//     port: 0,
//   });
//   // New state to control when to show ride options
//   const [showRideOptions, setShowRideOptions] = useState(false);
//   // New state for driver assigned modal
//   const [showDriverAssignedModal, setShowDriverAssignedModal] = useState(false);
 
//   // Map selection states
//   const [showPickupSelector, setShowPickupSelector] = useState(false);
//   const [showDropoffSelector, setShowDropoffSelector] = useState(false);
 
//   const pickupDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const dropoffDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const regionChangeTimer = useRef<NodeJS.Timeout | null>(null);
//   const [priceLoading, setPriceLoading] = useState(false);
//   const panelAnimation = useRef(new Animated.Value(0)).current;
//   const mapRef = useRef<MapView | null>(null);
 
//   const fallbackLocation: LocationType = {
//     latitude: 11.3312971,
//     longitude: 77.7167303,
//   };

//   // Distance calculation
//   const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371; // Earth's radius in kilometers
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
//               Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//               Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distance = R * c;
//     console.log(`📍 Distance calculation: (${lat1},${lon1}) to (${lat2},${lon2}) = ${distance.toFixed(4)} km`);
//     return distance;
//   };

//   const calculateDistanceInMeters = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371;
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a =
//       Math.sin(dLat/2) * Math.sin(dLat/2) +
//       Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//       Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distanceKm = R * c;
//     return distanceKm * 1000;
//   };

//   // Fetch nearby drivers
//   const fetchNearbyDrivers = (latitude: number, longitude: number) => {
//     console.log(`Fetching nearby drivers for lat: ${latitude}, lng: ${longitude}`);
//     if (socket && socketConnected) {
//       socket.emit("requestNearbyDrivers", {
//         latitude,
//         longitude,
//         radius: 10000,
//         vehicleType: selectedRideType
//       });
//       console.log("Emitted requestNearbyDrivers event");
//     } else {
//       console.log("Socket not connected, attempting to reconnect...");
//       socket.connect();
//       socket.once("connect", () => {
//         console.log("Socket reconnected, emitting requestNearbyDrivers");
//         socket.emit("requestNearbyDrivers", {
//           latitude,
//           longitude,
//           radius: 10000,
//           vehicleType: selectedRideType
//         });
//       });
//     }
//   };

//   // Handle nearby drivers response
//   useEffect(() => {
//     const handleNearbyDriversResponse = (data: { drivers: DriverType[] }) => {
//       console.log('📍 Received nearby drivers response:', JSON.stringify(data, null, 2));
//       if (!location) {
//         console.log("❌ No location available, can't process drivers");
//         return;
//       }
  
//       console.log('📍 User current location:', location);
//       console.log('📍 Number of drivers received:', data.drivers.length);
  
//       // Active ride: Show only accepted driver
//       if (currentRideId && acceptedDriver) {
//         console.log('🚗 Active ride - Showing only accepted driver');
//         const acceptedDriverData = data.drivers.find(d => d.driverId === acceptedDriver.driverId);
//         if (acceptedDriverData) {
//           setNearbyDrivers([acceptedDriverData]);
//           setNearbyDriversCount(1);
//           console.log('✅ Accepted driver found and displayed');
//         } else {
//           setNearbyDrivers([]);
//           setNearbyDriversCount(0);
//           console.log('❌ Accepted driver not found in response');
//         }
//         return;
//       }
  
//       // No active ride: Show all online drivers
//       const filteredDrivers = data.drivers
//         .filter(driver => {
//           console.log(`🔍 Processing driver: ${driver.driverId} (${driver.name})`);
//           console.log(`📍 Driver location: ${driver.location.coordinates[1]}, ${driver.location.coordinates[0]}`);
      
//           // Check driver status
//           if (driver.status && !["Live", "online", "onRide", "available"].includes(driver.status)) {
//             console.log(`❌ Driver ${driver.driverId} filtered out by status: ${driver.status}`);
//             return false;
//           }
      
//           // Calculate distance
//           const distance = calculateDistance(
//             location.latitude,
//             location.longitude,
//             driver.location.coordinates[1],
//             driver.location.coordinates[0]
//           );
//           console.log(`📏 Driver ${driver.driverId} distance: ${distance.toFixed(2)} km`);
      
//           const isWithinRange = distance <= 10;
//           console.log(`✅ Driver ${driver.driverId} within 10km: ${isWithinRange}`);
      
//           return isWithinRange;
//         })
//         .sort((a, b) => {
//           const distA = calculateDistance(location.latitude, location.longitude, a.location.coordinates[1], a.location.coordinates[0]);
//           const distB = calculateDistance(location.latitude, location.longitude, b.location.coordinates[1], b.location.coordinates[0]);
//           return distA - distB;
//         })
//         .slice(0, 10);
  
//       console.log('✅ Filtered drivers count:', filteredDrivers.length);
//       console.log('📍 Final drivers to display:', filteredDrivers);
  
//       setNearbyDrivers(filteredDrivers);
//       setNearbyDriversCount(filteredDrivers.length);
//     };

//     socket.on("nearbyDriversResponse", handleNearbyDriversResponse);
//     return () => socket.off("nearbyDriversResponse", handleNearbyDriversResponse);
//   }, [location, socketConnected, currentRideId, acceptedDriver]);

//   // Request location on component mount
//   useEffect(() => {
//     const requestLocation = async () => {
//       setIsLoadingLocation(true);
//       if (propCurrentLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using current location from props:`, propCurrentLocation);
//         setLocation(propCurrentLocation);
//         global.currentLocation = propCurrentLocation;
//         fetchNearbyDrivers(propCurrentLocation.latitude, propCurrentLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       if (propLastSavedLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using last saved location from props:`, propLastSavedLocation);
//         setLocation(propLastSavedLocation);
//         global.currentLocation = propLastSavedLocation;
//         fetchNearbyDrivers(propLastSavedLocation.latitude, propLastSavedLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using fallback location:`, fallbackLocation);
//       setLocation(fallbackLocation);
//       global.currentLocation = fallbackLocation;
//       fetchNearbyDrivers(fallbackLocation.latitude, fallbackLocation.longitude);
//       setIsLoadingLocation(false);
//       if (Platform.OS === "android") {
//         const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
//         if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location permission denied`);
//           Alert.alert("Permission Denied", "Location permission is required to proceed.");
//           return;
//         }
//       }
//       Geolocation.getCurrentPosition(
//         (pos) => {
//           const loc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Live location fetched successfully:`, loc);
//           setLocation(loc);
//           global.currentLocation = loc;
//           fetchNearbyDrivers(loc.latitude, loc.longitude);
//         },
//         (err) => {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location error:`, err.code, err.message);
//           Alert.alert("Location Error", "Could not fetch location. Please try again or check your GPS settings.");
//         },
//         { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000, distanceFilter: 10 }
//       );
//     };
//     requestLocation();
//   }, [propCurrentLocation, propLastSavedLocation]);

//   // Socket connection handlers
//   useEffect(() => {
//     const handleConnect = async () => {
//       console.log("Socket connected");
//       setSocketConnected(true);
//       if (location) fetchNearbyDrivers(location.latitude, location.longitude);
  
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User registered with socket:', userId);
//         }
//       } catch (error) {
//         console.error('Error registering user with socket:', error);
//       }
//     };
//     const handleDisconnect = () => { console.log("Socket disconnected"); setSocketConnected(false); };
//     const handleConnectError = (error: Error) => { console.error("Socket connection error:", error); setSocketConnected(false); };
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     socket.on("connect_error", handleConnectError);
//     setSocketConnected(socket.connected);
//     return () => {
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//       socket.off("connect_error", handleConnectError);
//     };
//   }, [location]);

//   // Location update interval
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected]);

//   // Driver location updates
//   useEffect(() => {
//     const handleDriverLiveLocationUpdate = (data: { driverId: string; lat: number; lng: number; status?: string }) => {
//       console.log('📍 Received driver location update:', data);
  
//       // If we have an active ride and this is the accepted driver
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('📍 Updating accepted driver location during active ride');
    
//         // Update driver location state
//         const driverCoords = { latitude: data.lat, longitude: data.lng };
//         setDriverLocation(driverCoords);
    
//         // Update the driver in nearbyDrivers
//         setNearbyDrivers(prev => {
//           if (prev.length > 0 && prev[0].driverId === data.driverId) {
//             return [{
//               ...prev[0],
//               location: { coordinates: [data.lng, data.lat] },
//               status: data.status || "onTheWay"
//             }];
//           }
//           return prev;
//         });
    
//         // Calculate distance if needed
//         if (lastCoord) {
//           const dist = haversine(lastCoord, driverCoords);
//           setTravelledKm(prev => prev + dist / 1000);
//         }
//         setLastCoord(driverCoords);
    
//         // Check if driver is near pickup location
//         if (pickupLocation && rideStatus === "onTheWay") {
//           const distanceToPickup = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             pickupLocation.latitude,
//             pickupLocation.longitude
//           );
//           console.log(`📍 Driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//           if (distanceToPickup <= 50 && !driverArrivedAlertShown) {
//             console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED');
//             setRideStatus("arrived");
//             setDriverArrivedAlertShown(true);
        
//             // Update UI state
//             setNearbyDrivers(prev => {
//               if (prev.length > 0 && prev[0].driverId === data.driverId) {
//                 return [{
//                   ...prev[0],
//                   status: "arrived"
//                 }];
//               }
//               return prev;
//             });
        
//             // Get customer ID for OTP
//             AsyncStorage.getItem('customerId').then(customerId => {
//               const otp = customerId ? customerId.slice(-4) : '1234';
//               Alert.alert(
//                 "🎉 Driver Arrived!",
//                 `Our driver (${acceptedDriver.name}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//                 [{ text: "OK", onPress: () => {
//                   console.log('✅ User acknowledged driver arrival');
//                 }}]
//               );
//             });
//           }
//         }
      
//         // Check if driver is near dropoff location
//         if (dropoffLocation && rideStatus === "started") {
//           const distanceToDropoff = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             dropoffLocation.latitude,
//             dropoffLocation.longitude
//           );
      
//           if (distanceToDropoff <= 50 && !rideCompletedAlertShown) {
//             // Notify the backend
//             socket.emit('driverReachedDestination', {
//               rideId: currentRideId,
//               driverId: data.driverId,
//               distance: travelledKm.toFixed(2)
//             });
        
//             // Set a flag to prevent multiple notifications
//             setRideCompletedAlertShown(true);
//           }
//         }
//         return; // Ignore other drivers during active ride
//       }
  
//       // If no active ride, update all drivers
//       setNearbyDrivers((prev) => {
//         const existingIndex = prev.findIndex(d => d.driverId === data.driverId);
//         if (existingIndex >= 0) {
//           const updated = [...prev];
//           updated[existingIndex] = {
//             ...updated[existingIndex],
//             location: { coordinates: [data.lng, data.lat] },
//             status: data.status || "Live"
//           };
//           return updated;
//         } else {
//           if (data.status && !["Live", "online", "onRide", "available"].includes(data.status)) return prev;
//           return [
//             ...prev,
//             {
//               driverId: data.driverId,
//               name: `Driver ${data.driverId}`,
//               location: { coordinates: [data.lng, data.lat] },
//               vehicleType: "taxi",
//               status: data.status || "Live"
//             }
//           ];
//         }
//       });
//     };

//     socket.on("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//     return () => socket.off("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//   }, [location, currentRideId, acceptedDriver, lastCoord, pickupLocation, dropoffLocation, rideStatus, driverArrivedAlertShown, rideCompletedAlertShown]);

//   // Polling for driver arrival
//   useEffect(() => {
//     let intervalId;
//     if (rideStatus === "onTheWay" && pickupLocation && driverLocation && !driverArrivedAlertShown) {
//       intervalId = setInterval(() => {
//         const distanceToPickup = calculateDistanceInMeters(
//           driverLocation.latitude,
//           driverLocation.longitude,
//           pickupLocation.latitude,
//           pickupLocation.longitude
//         );
//         console.log(`📍 Polling driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//         if (distanceToPickup <= 50) {
//           console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED FROM POLLING');
//           setRideStatus("arrived");
//           setDriverArrivedAlertShown(true);
//           AsyncStorage.getItem('customerId').then(customerId => {
//             const otp = customerId ? customerId.slice(-4) : '1234';
//             Alert.alert(
//               "🎉 Driver Arrived!",
//               `Our driver (${acceptedDriver?.name || 'Driver'}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//               [{ text: "OK", onPress: () => {
//                 console.log('✅ User acknowledged driver arrival');
//               }}]
//             );
//           });
//           clearInterval(intervalId);
//         }
//       }, 2000); // Poll every 2 seconds
//     }
//     return () => {
//       if (intervalId) clearInterval(intervalId);
//     };
//   }, [rideStatus, pickupLocation, driverLocation, driverArrivedAlertShown, acceptedDriver]);

//   // Ride completion event handler
//   useEffect(() => {
//     const handleRideCompleted = (data: any) => {
//       console.log('🎉 Ride completed event received:', data);
  
//       // Update ride status to completed
//       setRideStatus("completed");
  
//       // Calculate final distance and time if not provided
//       const finalDistance = data.distance || travelledKm.toFixed(2);
//       const finalTime = data.travelTime || travelTime;
//       const finalCharge = data.charge || estimatedPrice;
  
//       // Show completion alert
//       Alert.alert(
//         "Ride Completed",
//         `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//         [
//           {
//             text: "OK",
//             onPress: () => {
//               // Reset ride state after completion
//               setTimeout(() => {
//                 setCurrentRideId(null);
//                 setDriverId(null);
//                 setDriverLocation(null);
//                 setAcceptedDriver(null);
//                 setRouteCoords([]);
//                 setPickupLocation(null);
//                 setDropoffLocation(null);
//                 propHandlePickupChange("");
//                 propHandleDropoffChange("");
//                 setRideStatus("idle");
//                 setDriverArrivedAlertShown(false);
//                 setRideCompletedAlertShown(false);
//                 setShowRideOptions(false); // Hide ride options after ride completion
            
//                 // Fetch all drivers again after ride completion
//                 if (location) {
//                   fetchNearbyDrivers(location.latitude, location.longitude);
//                 }
//               }, 2000);
//             }
//           }
//         ]
//       );
  
//       // Clear ride data from storage
//       AsyncStorage.removeItem('currentRideId');
//       AsyncStorage.removeItem('acceptedDriver');
//       AsyncStorage.removeItem('bookedAt');
//       setBookedAt(null);
//     };

//     socket.on("rideCompleted", handleRideCompleted);
//     return () => {
//       socket.off("rideCompleted", handleRideCompleted);
//     };
//   }, [travelledKm, travelTime, estimatedPrice, location]);

//   // Ride status update handler
//   useEffect(() => {
//     const handleRideStatusUpdate = (data: any) => {
//       console.log('📋 Ride status update received:', data);
  
//       if (data.rideId === currentRideId) {
//         if (data.status === 'completed') {
//           // Handle ride completion
//           setRideStatus("completed");
      
//           // Calculate final distance and time if not provided
//           const finalDistance = data.distance || travelledKm.toFixed(2);
//           const finalTime = data.travelTime || travelTime;
//           const finalCharge = data.charge || estimatedPrice;
      
//           // Show completion alert
//           Alert.alert(
//             "Ride Completed",
//             `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//             [
//               {
//                 text: "OK",
//                 onPress: () => {
//                   // Reset ride state after completion
//                   setTimeout(() => {
//                     setCurrentRideId(null);
//                     setDriverId(null);
//                     setDriverLocation(null);
//                     setAcceptedDriver(null);
//                     setRouteCoords([]);
//                     setPickupLocation(null);
//                     setDropoffLocation(null);
//                     propHandlePickupChange("");
//                     propHandleDropoffChange("");
//                     setRideStatus("idle");
//                     setDriverArrivedAlertShown(false);
//                     setRideCompletedAlertShown(false);
//                     setShowRideOptions(false); // Hide ride options after ride completion
                
//                     // Fetch all drivers again after ride completion
//                     if (location) {
//                       fetchNearbyDrivers(location.latitude, location.longitude);
//                     }
//                   }, 2000);
//                 }
//               }
//             ]
//           );
      
//           // Clear ride data from storage
//           AsyncStorage.removeItem('currentRideId');
//           AsyncStorage.removeItem('acceptedDriver');
//           AsyncStorage.removeItem('bookedAt');
//           setBookedAt(null);
//         }
//       }
//     };

//     socket.on("rideStatusUpdate", handleRideStatusUpdate);
//     return () => {
//       socket.off("rideStatusUpdate", handleRideStatusUpdate);
//     };
//   }, [currentRideId, travelledKm, travelTime, estimatedPrice, location]);

//   // Driver offline handler
//   useEffect(() => {
//     const handleDriverOffline = (data: { driverId: string }) => {
//       console.log(`Driver ${data.driverId} went offline`);
  
//       // Don't remove accepted driver during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('⚠️ Accepted driver went offline during active ride');
//         return;
//       }
  
//       setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//       setNearbyDriversCount(prev => Math.max(0, prev - 1));
//     };

//     socket.on("driverOffline", handleDriverOffline);
//     return () => socket.off("driverOffline", handleDriverOffline);
//   }, [currentRideId, acceptedDriver]);

//   // Driver status update handler
//   useEffect(() => {
//     const handleDriverStatusUpdate = (data: { driverId: string; status: string }) => {
//       console.log(`Driver ${data.driverId} status updated to: ${data.status}`);
  
//       // Don't update accepted driver status during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('Keeping accepted driver status as onTheWay');
//         return;
//       }
  
//       if (data.status === "offline") {
//         setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//         setNearbyDriversCount(prev => Math.max(0, prev - 1));
//         return;
//       }
//       setNearbyDrivers(prev => prev.map(driver =>
//         driver.driverId === data.driverId ? { ...driver, status: data.status } : driver
//       ));
//     };

//     socket.on("driverStatusUpdate", handleDriverStatusUpdate);
//     return () => socket.off("driverStatusUpdate", handleDriverStatusUpdate);
//   }, [currentRideId, acceptedDriver]);

//   // Recover ride data on component mount
//   useEffect(() => {
//     const recoverRideData = async () => {
//       try {
//         const savedRideId = await AsyncStorage.getItem('currentRideId');
//         const savedDriverData = await AsyncStorage.getItem('acceptedDriver');
    
//         if (savedRideId && !currentRideId) {
//           console.log('🔄 Recovering ride data from storage:', savedRideId);
//           setCurrentRideId(savedRideId);
      
//           if (savedDriverData) {
//             const driverData = JSON.parse(savedDriverData);
//             setAcceptedDriver(driverData);
//             setDriverName(driverData.name);
//             setDriverMobile(driverData.driverMobile);
//             setRideStatus("onTheWay");
//             setShowRideOptions(true); // Show ride options if there's an active ride
//             setShowDriverAssignedModal(true); // Show driver assigned modal
//           } else {
//             setRideStatus("searching");
//             const bookedStr = await AsyncStorage.getItem('bookedAt');
//             setBookedAt(bookedStr ? new Date(bookedStr) : new Date());
//             // Restart polling
//             const pollInterval = setInterval(() => {
//               if (currentRideId) {
//                 socket.emit('getRideStatus', { rideId: currentRideId });
//               }
//             }, 5000);
//             AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//             // Restart timeout (increased to 60s)
//             const acceptanceTimeout = setTimeout(() => {
//               if (rideStatus === "searching") {
//                 Alert.alert(
//                   "No Driver Available",
//                   "No driver has accepted your ride yet. Please try again or wait longer.",
//                   [{ text: "OK", onPress: () => setRideStatus("idle") }]
//                 );
//               }
//             }, 60000);
//             AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
//           }
      
//           // Request ride status from server
//           socket.emit('getRideStatus', { rideId: savedRideId });
//         }
//       } catch (error) {
//         console.error('Error recovering ride data:', error);
//       }
//     };
//     recoverRideData();
//   }, []);

//   // Process ride acceptance
//   const processRideAcceptance = useCallback((data: any) => {
//     console.log('🎯 PROCESSING RIDE ACCEPTANCE:', JSON.stringify(data, null, 2));
//     // Validate required data
//     if (!data.rideId || !data.driverId) {
//       console.error('❌ Invalid ride acceptance data:', data);
//       return;
//     }
//     // Clear existing timeouts and intervals
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Update ride status immediately
//     setRideStatus("onTheWay");
//     setDriverId(data.driverId);
//     setDriverName(data.driverName || 'Driver');
//     setDriverMobile(data.driverMobile || 'N/A');
//     setCurrentRideId(data.rideId);
//     // Create accepted driver object
//     const acceptedDriverData: DriverType = {
//       driverId: data.driverId,
//       name: data.driverName || 'Driver',
//       driverMobile: data.driverMobile || 'N/A',
//       location: {
//         coordinates: [data.driverLng || 0, data.driverLat || 0]
//       },
//       vehicleType: data.vehicleType || selectedRideType,
//       status: "onTheWay"
//     };
//     console.log('👨‍💼 Setting accepted driver:', acceptedDriverData);
//     // Update state
//     setAcceptedDriver(acceptedDriverData);
//     setNearbyDrivers([acceptedDriverData]);
//     setNearbyDriversCount(1);
//     // Set initial driver location
//     if (data.driverLat && data.driverLng) {
//       const driverLoc = {
//         latitude: data.driverLat,
//         longitude: data.driverLng
//       };
//       setDriverLocation(driverLoc);
//       console.log('📍 Initial driver location set:', driverLoc);
//     }
//     // Store in AsyncStorage for recovery
//     AsyncStorage.setItem('currentRideId', data.rideId);
//     AsyncStorage.setItem('acceptedDriver', JSON.stringify(acceptedDriverData));
//     console.log('✅ Ride acceptance processed successfully for:', data.rideId);
    
//     // Show driver assigned modal
//     setShowDriverAssignedModal(true);
//   }, [selectedRideType]);

//   // Global ride acceptance listener
//   useEffect(() => {
//     console.log('🎯 Setting up GLOBAL ride acceptance listener');
//     const handleRideAccepted = (data: any) => {
//       console.log('🚨 ===== USER APP: RIDE ACCEPTED ====');
//       console.log('📦 Acceptance data:', JSON.stringify(data, null, 2));
//       console.log('🚨 ===== END ACCEPTANCE DATA ====');
//       processRideAcceptance(data);
//     };
//     // Listen on multiple channels
//     socket.on("rideAccepted", handleRideAccepted);
//     // Fixed: Proper async handling
//     socket.on("rideAcceptedBroadcast", async (data) => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (data.targetUserId === userId) {
//           handleRideAccepted(data);
//         }
//       } catch (error) {
//         console.error('Error checking user ID:', error);
//       }
//     });
//     return () => {
//       socket.off("rideAccepted", handleRideAccepted);
//       socket.off("rideAcceptedBroadcast", handleRideAccepted);
//     };
//   }, [processRideAcceptance]);

//   // Critical socket event handlers
//   useEffect(() => {
//     console.log('🔌 Setting up CRITICAL socket event handlers');
//     // Handle getDriverData response
//     const handleDriverDataResponse = (data: any) => {
//       console.log('🚗 Driver data received:', data);
//       if (data.success) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle getRideStatus response
//     const handleRideStatusResponse = (data: any) => {
//       console.log('📋 Ride status received:', data);
//       if (data.driverId) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle backup ride acceptance
//     const handleBackupRideAccepted = (data: any) => {
//       console.log('🔄 Backup ride acceptance:', data);
//       processRideAcceptance(data);
//     };
//     socket.on("driverDataResponse", handleDriverDataResponse);
//     socket.on("rideStatusResponse", handleRideStatusResponse);
//     socket.on("backupRideAccepted", handleBackupRideAccepted);
//     return () => {
//       socket.off("driverDataResponse", handleDriverDataResponse);
//       socket.off("rideStatusResponse", handleRideStatusResponse);
//       socket.off("backupRideAccepted", handleBackupRideAccepted);
//     };
//   }, [selectedRideType]);

//   // Comprehensive socket debugger
//   useEffect(() => {
//     console.log('🔍 Starting comprehensive socket debugging');
//     // Debug all socket events
//     const debugAllEvents = (eventName: string, data: any) => {
//       if (eventName.includes('ride') || eventName.includes('driver') || eventName.includes('Room')) {
//         console.log(`📡 SOCKET EVENT [${eventName}]:`, data);
//       }
//     };
//     // Specific debug for rideAccepted
//     const debugRideAccepted = (data: any) => {
//       console.log('🚨🚨🚨 RIDE ACCEPTED EVENT RECEIVED 🚨🚨🚨');
//       console.log('📦 Data:', JSON.stringify(data, null, 2));
//       console.log('🔍 Current state:', {
//         currentRideId,
//         rideStatus,
//         hasAcceptedDriver: !!acceptedDriver
//       });
  
//       // Process immediately
//       processRideAcceptance(data);
//     };
//     // Debug connection
//     const handleConnect = () => {
//       console.log('✅ Socket connected - ID:', socket.id);
//       setSocketConnected(true);
//     };
//     const handleDisconnect = () => {
//       console.log('❌ Socket disconnected');
//       setSocketConnected(false);
//     };
//     // Add all listeners
//     socket.onAny(debugAllEvents);
//     socket.on("rideAccepted", debugRideAccepted);
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     console.log('🔍 Socket debuggers activated');
//     return () => {
//       socket.offAny(debugAllEvents);
//       socket.off("rideAccepted", debugRideAccepted);
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//     };
//   }, [currentRideId, rideStatus, acceptedDriver, processRideAcceptance]);

//   // User location tracking function
//   const sendUserLocationUpdate = useCallback(async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
  
//       if (!userId || !currentRideId) {
//         console.log('❌ Cannot send location: Missing userId or rideId');
//         return;
//       }
//       console.log(`📍 SENDING USER LOCATION UPDATE: ${latitude}, ${longitude} for ride ${currentRideId}`);
  
//       // Send to socket for real-time updates
//       socket.emit('userLocationUpdate', {
//         userId,
//         rideId: currentRideId,
//         latitude,
//         longitude,
//         timestamp: Date.now()
//       });
//       // Also save to database via REST API
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//           latitude,
//           longitude,
//           rideId: currentRideId
//         }, {
//           headers: {
//             Authorization: `Bearer ${token}`
//           }
//         });
//       }
//       console.log('✅ User location update sent successfully');
//     } catch (error) {
//       console.error('❌ Error sending user location update:', error);
//     }
//   }, [currentRideId]);

//   // Continuous location tracking during active rides
//   useEffect(() => {
//     let locationInterval;
//     if ((rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && location) {
//       console.log('🔄 Starting continuous user location tracking');
  
//       locationInterval = setInterval(() => {
//         if (location) {
//           sendUserLocationUpdate(location.latitude, location.longitude);
//         }
//       }, 5000); // Send every 5 seconds
  
//     }
//     return () => {
//       if (locationInterval) {
//         clearInterval(locationInterval);
//         console.log('🛑 Stopped user location tracking');
//       }
//     };
//   }, [rideStatus, location, sendUserLocationUpdate]);

//   // Update existing location interval to include active ride statuses
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching" || rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
        
//             // Send location update if in active ride
//             if (rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") {
//               sendUserLocationUpdate(newLoc.latitude, newLoc.longitude);
//             }
        
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected, sendUserLocationUpdate]);

//   // Manual ride status polling
//   useEffect(() => {
//     if (currentRideId && rideStatus === "searching") {
//       console.log('🔄 Starting backup polling for ride:', currentRideId);
  
//       const pollInterval = setInterval(() => {
//         console.log('📡 Polling ride status for:', currentRideId);
//         socket.emit('getRideStatus', { rideId: currentRideId }, (data) => {
//           if (data.driverId) {
//             processRideAcceptance(data);
//           } else if (bookedAt && (new Date().getTime() - bookedAt.getTime() > 60000) && rideStatus === "searching") {
//             console.log('⏰ No driver found after 60s');
//             Alert.alert(
//               "No Driver Available",
//               "No driver has accepted your ride yet. Please try again or wait longer.",
//               [{ text: "OK", onPress: () => setRideStatus("idle") }]
//             );
//             clearInterval(pollInterval);
//             AsyncStorage.removeItem('statusPollInterval');
//           }
//         });
//       }, 3000); // Poll every 3 seconds
//       // Store interval ID
//       AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//       return () => {
//         clearInterval(pollInterval);
//         AsyncStorage.removeItem('statusPollInterval');
//       };
//     }
//   }, [currentRideId, rideStatus, bookedAt]);

//   // Ensure user joins their room on socket connection
//   useEffect(() => {
//     const registerUserRoom = async () => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId && socket.connected) {
//           console.log('👤 Registering user with socket room:', userId);
//           socket.emit('registerUser', { userId });
      
//           // Also join the room manually
//           socket.emit('joinRoom', { userId });
//         }
//       } catch (error) {
//         console.error('Error registering user room:', error);
//       }
//     };
//     // Register on connect and every 5 seconds to ensure room membership
//     socket.on('connect', registerUserRoom);
//     registerUserRoom();
//     // Re-register periodically to ensure room membership
//     const interval = setInterval(registerUserRoom, 5000);
//     return () => {
//       socket.off('connect', registerUserRoom);
//       clearInterval(interval);
//     };
//   }, []);

//   // Socket recovery: Handle reconnection and missed events
//   useEffect(() => {
//     const handleReconnect = async () => {
//       console.log('🔌 Socket reconnected, recovering state...');
//       setSocketConnected(true);
  
//       // Re-register user
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User re-registered after reconnect:', userId);
//         }
    
//         // Request current ride status if we have a ride ID
//         const currentRideId = await AsyncStorage.getItem('currentRideId');
//         if (currentRideId) {
//           socket.emit('getRideStatus', { rideId: currentRideId });
//           console.log('🔄 Requesting status for current ride:', currentRideId);
//         }
//       } catch (error) {
//         console.error('Error during socket recovery:', error);
//       }
//     };
//     socket.on("connect", handleReconnect);
//     return () => {
//       socket.off("connect", handleReconnect);
//     };
//   }, []);

//   // Fetch route
//   const fetchRoute = async (dropCoord: LocationType) => {
//     if (!pickupLocation) return;
//     try {
//       const url = `https://router.project-osrm.org/route/v1/driving/${pickupLocation.longitude},${pickupLocation.latitude};${dropCoord.longitude},${dropCoord.latitude}?overview=full&geometries=geojson`;
//       const res = await fetch(url);
//       const data = await res.json();
//       if (data.code === "Ok" && data.routes.length > 0) {
//         const coords = data.routes[0].geometry.coordinates.map(([lng, lat]: number[]) => ({ latitude: lat, longitude: lng }));
//         setRouteCoords(coords);
//         setDistance((data.routes[0].distance / 1000).toFixed(2) + " km");
//         setTravelTime(Math.round(data.routes[0].duration / 60) + " mins");
       
//         // Removed automatic showing of route details modal
//         // This will now only be shown when the user clicks BOOK RIDE
//       } else {
//         setApiError("Failed to fetch route");
//         Alert.alert("Route Error", "Could not find route. Please try different locations.");
//       }
//     } catch (err) {
//       console.error(err);
//       setRouteCoords([]);
//       setApiError("Network error fetching route");
//       Alert.alert("Route Error", "Failed to fetch route. Please check your internet connection.");
//     }
//   };

//   // Fetch suggestions
//   const fetchSuggestions = async (query: string, type: 'pickup' | 'dropoff'): Promise<SuggestionType[]> => {
//     try {
//       console.log(`Fetching suggestions for: ${query}`);
//       const cache = type === 'pickup' ? pickupCache : dropoffCache;
//       if (cache[query]) {
//         console.log(`Returning cached suggestions for: ${query}`);
//         return cache[query];
//       }
//       if (type === 'pickup') setPickupLoading(true);
//       else setDropoffLoading(true);
//       setSuggestionsError(null);
//       const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=5&addressdetails=1&countrycodes=IN`;
//       console.log(`API URL: ${url}`);
  
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
  
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       if (!Array.isArray(data)) throw new Error('Invalid response format');
  
//       const suggestions: SuggestionType[] = data.map((item: any) => ({
//         id: item.place_id || `${item.lat}-${item.lon}`,
//         name: item.display_name,
//         address: extractAddress(item),
//         lat: item.lat,
//         lon: item.lon,
//         type: item.type || 'unknown',
//         importance: item.importance || 0,
//       }));
//       if (type === 'pickup') setPickupCache(prev => ({ ...prev, [query]: suggestions }));
//       else setDropoffCache(prev => ({ ...prev, [query]: suggestions }));
//       return suggestions;
//     } catch (error: any) {
//       console.error('Suggestions fetch error:', error);
//       setSuggestionsError(error.message || 'Failed to fetch suggestions');
//       return [];
//     } finally {
//       if (type === 'pickup') setPickupLoading(false);
//       else setDropoffLoading(false);
//     }
//   };

//   // Extract address
//   const extractAddress = (item: any): string => {
//     if (item.address) {
//       const parts = [];
//       if (item.address.road) parts.push(item.address.road);
//       if (item.address.suburb) parts.push(item.address.suburb);
//       if (item.address.city || item.address.town || item.address.village) parts.push(item.address.city || item.address.town || item.address.village);
//       if (item.address.state) parts.push(item.address.state);
//       if (item.address.postcode) parts.push(item.address.postcode);
//       return parts.join(', ');
//     }
//     return item.display_name;
//   };

//   // Handle pickup change
//   const handlePickupChange = (text: string) => {
//     console.log(`handlePickupChange called with: "${text}"`);
//     propHandlePickupChange(text);
//     if (pickupDebounceTimer.current) {
//       clearTimeout(pickupDebounceTimer.current);
//       pickupDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setPickupLoading(true);
//       setShowPickupSuggestions(true);
//       pickupDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'pickup');
//         setPickupSuggestions(sugg);
//         setPickupLoading(false);
//       }, 500);
//     } else {
//       setShowPickupSuggestions(false);
//       setPickupSuggestions([]);
//     }
//   };

//   // Handle dropoff change
//   const handleDropoffChange = (text: string) => {
//     console.log(`handleDropoffChange called with: "${text}"`);
//     propHandleDropoffChange(text);
//     if (dropoffDebounceTimer.current) {
//       clearTimeout(dropoffDebounceTimer.current);
//       dropoffDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setDropoffLoading(true);
//       setShowDropoffSuggestions(true);
//       dropoffDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'dropoff');
//         setDropoffSuggestions(sugg);
//         setDropoffLoading(false);
//       }, 500);
//     } else {
//       setShowDropoffSuggestions(false);
//       setDropoffSuggestions([]);
//     }
//   };

//   // Select pickup suggestion
//   const selectPickupSuggestion = (suggestion: SuggestionType) => {
//     propHandlePickupChange(suggestion.name);
//     setPickupLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowPickupSuggestions(false);
//     setIsPickupCurrent(false);
//     if (dropoffLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     fetchNearbyDrivers(parseFloat(suggestion.lat), parseFloat(suggestion.lon));
//   };

//   // Select dropoff suggestion
//   const selectDropoffSuggestion = (suggestion: SuggestionType) => {
//     propHandleDropoffChange(suggestion.name);
//     setDropoffLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowDropoffSuggestions(false);
//     if (pickupLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//   };

//   // Update price
//   useEffect(() => {
//     const updatePrice = async () => {
//       if (pickupLocation && dropoffLocation && distance) {
//         const price = await calculatePrice();
//         setEstimatedPrice(price);
//       }
//     };
//     updatePrice();
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   // Update price again
//   useEffect(() => {
//     if (pickupLocation && dropoffLocation && distance) {
//       const price = calculatePrice();
//       setEstimatedPrice(price);
//     }
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   // Panel animation
//   useEffect(() => {
//     if (showPricePanel) {
//       Animated.timing(panelAnimation, {
//         toValue: 1,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     } else {
//       Animated.timing(panelAnimation, {
//         toValue: 0,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     }
//   }, [showPricePanel]);

//   // Fetch ride price
//   const fetchRidePrice = async (vehicleType: string, distance: number) => {
//     // Use ONLY dynamic prices from socket events
//     const pricePerKm = dynamicPrices[vehicleType];
//     // If dynamic prices are not set yet, wait for them
//     if (!pricePerKm || pricePerKm === 0) {
//       console.log(`⏳ Waiting for ${vehicleType} price from admin...`);
//       return 0;
//     }
//     const calculatedPrice = distance * pricePerKm;
//     console.log(`💰 Price calculation: ${distance}km ${vehicleType} × ₹${pricePerKm}/km = ₹${calculatedPrice}`);
//     return calculatedPrice;
//   };

//   // Calculate price
//   const calculatePrice = async (): Promise<number | null> => {
//     if (!pickupLocation || !dropoffLocation || !distance) {
//       console.log('❌ Missing location data for price calculation');
//       return null;
//     }
//     const distanceKm = parseFloat(distance);
//     // DEBUG: Print current prices before calculation
//     console.log('\n💰 PRICE CALCULATION DEBUG:');
//     console.log(`📏 Distance: ${distanceKm}km`);
//     console.log(`🚗 Vehicle Type: ${selectedRideType}`);
//     console.log(`🏍️ BIKE Price/km: ₹${dynamicPrices.bike}`);
//     console.log(`🚕 TAXI Price/km: ₹${dynamicPrices.taxi}`);
//     console.log(`🚛 PORT Price/km: ₹${dynamicPrices.port}`);
//     console.log('─────────────────────────────────────');
//     try {
//       const pricePerKm = dynamicPrices[selectedRideType];
  
//       console.log(`💰 Using price per km: ₹${pricePerKm} for ${selectedRideType}`);
//       // Wait for admin prices - NO TEMPORARY FALLBACK
//       if (!pricePerKm || pricePerKm === 0) {
//         console.log('⏳ Waiting for admin prices to be loaded...');
//         console.log('🚫 Booking blocked until prices are received from admin');
//         return null;
//       }
  
//       const calculatedPrice = distanceKm * pricePerKm;
//       const multiplier = wantReturn ? 2 : 1;
//       const finalPrice = Math.round(calculatedPrice * multiplier);
//       console.log(`✅ Final price calculated: ${distanceKm}km × ₹${pricePerKm}/km × ${multiplier} = ₹${finalPrice}`);
//       return finalPrice;
//     } catch (error) {
//       console.error('❌ Error calculating price:', error);
//       return null;
//     }
//   };

//   // Price update handler
//   useEffect(() => {
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received REAL-TIME price update from admin:', data);
  
//       // Update dynamic prices immediately
//       setDynamicPrices({
//         bike: data.bike,
//         taxi: data.taxi,
//         port: data.port,
//       });
  
//       // Log the new prices
//       console.log('🔄 PRICES UPDATED SUCCESSFULLY:');
//       console.log(`🏍️ BIKE: ₹${data.bike}/km`);
//       console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//       console.log(`🚛 PORT: ₹${data.port}/km`);
  
//       // Immediately recalculate price if a ride is being planned
//       if (pickupLocation && dropoffLocation && distance) {
//         console.log('🔄 Recalculating price with new admin rates...');
//         calculatePrice();
//       }
//     };

//     socket.on('priceUpdate', handlePriceUpdate);
//     return () => {
//       socket.off('priceUpdate', handlePriceUpdate);
//     };
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Request prices on component mount
//   useEffect(() => {
//     console.log('📡 Requesting current prices from admin...');
//     socket.emit('getCurrentPrices');
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received current prices:', data);
//       setDynamicPrices(data);
//     };
//     socket.on('currentPrices', handleCurrentPrices);
//     return () => {
//       socket.off('currentPrices', handleCurrentPrices);
//     };
//   }, []);

//   // Listen for real-time price updates
//   useEffect(() => {
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 REAL-TIME PRICE UPDATE:', data);
//       setDynamicPrices(data);
  
//       console.log('✅ PRICES UPDATED:');
//       console.log(`🏍️ BIKE: ₹${data.bike}/km`);
//       console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//       console.log(`🚛 PORT: ₹${data.port}/km`);
  
//       // Recalculate immediately
//       if (pickupLocation && dropoffLocation && distance) {
//         calculatePrice();
//       }
//     };

//     socket.on('priceUpdate', handlePriceUpdate);
//     return () => socket.off('priceUpdate', handlePriceUpdate);
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Price debugging and console logging
//   useEffect(() => {
//     console.log('💰 INITIALIZING PRICE DEBUGGING SYSTEM');
//     // Function to print current prices to console
//     const printCurrentPrices = () => {
//       console.log('\n🚗 ===== CURRENT RIDE PRICES =====');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${dynamicPrices.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${dynamicPrices.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${dynamicPrices.port}`);
//       console.log('=================================\n');
//     };
//     // Listen for price updates from admin
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 REAL-TIME PRICE UPDATE RECEIVED FROM ADMIN:', data);
  
//       // Update dynamic prices
//       setDynamicPrices({
//         bike: data.bike,
//         taxi: data.taxi,
//         port: data.port,
//       });
  
//       // Print updated prices to console
//       console.log('\n✅ ===== PRICES UPDATED SUCCESSFULLY =====');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//       console.log('=============================================\n');
  
//       // Recalculate price if needed
//       if (pickupLocation && dropoffLocation && distance) {
//         calculatePrice();
//       }
//     };
//     // Listen for initial prices when component mounts
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 RECEIVED CURRENT PRICES FROM SERVER:');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//       console.log('─────────────────────────────────────');
  
//       setDynamicPrices(data);
//     };
//     // Request current prices when component mounts
//     console.log('📡 Requesting current prices from server...');
//     socket.emit('getCurrentPrices');
//     // Set up event listeners
//     socket.on('priceUpdate', handlePriceUpdate);
//     socket.on('currentPrices', handleCurrentPrices);
//     socket.on('ridePricesUpdated', handlePriceUpdate); // Alternative event name
//     // Print initial prices
//     printCurrentPrices();
//     // Set up interval to periodically request prices (as backup)
//     const priceInterval = setInterval(() => {
//       console.log('🔄 Periodic price check...');
//       socket.emit('getCurrentPrices');
//       printCurrentPrices();
//     }, 30000); // Every 30 seconds
//     return () => {
//       // Clean up event listeners
//       socket.off('priceUpdate', handlePriceUpdate);
//       socket.off('currentPrices', handleCurrentPrices);
//       socket.off('ridePricesUpdated', handlePriceUpdate);
//       clearInterval(priceInterval);
//     };
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Request current prices on component mount
//   useEffect(() => {
//     console.log('📡 Requesting current prices from admin...');
//     // Request current prices when component mounts
//     socket.emit('getCurrentPrices');
//     // Also set up a listener for initial price response
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received current prices from admin:', data);
//       setDynamicPrices(data);
//     };
//     socket.on('currentPrices', handleCurrentPrices);
//     return () => {
//       socket.off('currentPrices', handleCurrentPrices);
//     };
//   }, []);

//   // Fetch initial prices
//   useEffect(() => {
//     const fetchInitialPrices = async () => {
//       try {
//         const bikeRate = await fetchRidePrice('bike', 1);
//         const taxiRate = await fetchRidePrice('taxi', 1);
//         const portRate = await fetchRidePrice('port', 1);
//         setDynamicPrices({
//           bike: bikeRate,
//           taxi: taxiRate,
//           port: portRate,
//         });
//         console.log(`BIKE: Today's price per km: ₹${bikeRate}`);
//         console.log(`TAXI: Today's price per km: ₹${taxiRate}`);
//         console.log(`PORT: Today's price per km: ₹${portRate}`);
//       } catch (error) {
//         console.error('❌ Error fetching initial prices:', error);
//         setDynamicPrices({
//           bike: 100,
//           taxi: 500,
//           port: 1000,
//         });
//         console.log(`BIKE: Today's price per km: ₹100 (fallback)`);
//         console.log(`TAXI: Today's price per km: ₹500 (fallback)`);
//         console.log(`PORT: Today's price per km: ₹1000 (fallback)`);
//       }
//     };
//     fetchInitialPrices();
//   }, []);

//   // Handle ride type select
//   const handleRideTypeSelect = async (type: string) => {
//     if (selectedRideType === type) return;
//     setSelectedRideType(type);
//     setShowPricePanel(true);
//     if (pickupLocation && dropoffLocation) {
//       const price = await calculatePrice();
//       setEstimatedPrice(price);
//     }
//     if (location) fetchNearbyDrivers(location.latitude, location.longitude);
//   };

//   // Handle book ride
//   const handleBookRide = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
    
//     // Show route details modal before booking
//     setShowRouteDetailsModal(true);
//   };

//   // Handle confirm booking after route details
//   const handleConfirmBookingFromModal = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
    
//     const price = await calculatePrice(); // Use async price calculation
//     if (!price) {
//       Alert.alert('Error', 'Price calculation failed. Please try again.');
//       return;
//     }
    
//     try {
//       setIsBooking(true);
  
//       const token = await AsyncStorage.getItem('authToken');
//       if (!token) {
//         Alert.alert('Authentication Error', 'Please log in to book a ride');
//         setIsBooking(false);
//         return;
//       }
//       if (!pickupLocation || !dropoffLocation) {
//         Alert.alert('Error', 'Please select both pickup and dropoff locations');
//         setIsBooking(false);
//         return;
//       }
//       if (!estimatedPrice) {
//         Alert.alert('Error', 'Price calculation failed. Please try again.');
//         setIsBooking(false);
//         return;
//       }
//       const userId = await AsyncStorage.getItem('userId');
//       const customerId = (await AsyncStorage.getItem('customerId')) || 'U001';
//       const userName = await AsyncStorage.getItem('userName');
//       const userMobile = await AsyncStorage.getItem('userMobile');
//       let otp;
//       if (customerId && customerId.length >= 4) {
//         otp = customerId.slice(-4);
//       } else {
//         otp = Math.floor(1000 + Math.random() * 9000).toString();
//       }
//       setRideStatus('searching');
//       setBookedAt(new Date());
//       console.log('📋 User Details:', {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup,
//         dropoff,
//         selectedRideType,
//         otp
//       });
//       const rideData = {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup: {
//           lat: pickupLocation.latitude,
//           lng: pickupLocation.longitude,
//           address: pickup,
//         },
//         drop: {
//           lat: dropoffLocation.latitude,
//           lng: dropoffLocation.longitude,
//           address: dropoff,
//         },
//         vehicleType: selectedRideType,
//         otp,
//         estimatedPrice,
//         distance,
//         travelTime,
//         wantReturn,
//         token
//       };
//       socket.emit('bookRide', rideData, (response) => {
//         setIsBooking(false);
    
//         if (response && response.success) {
//           setCurrentRideId(response.rideId);
//           AsyncStorage.setItem('bookedAt', new Date().toISOString());
//           setBookingOTP(response.otp);
//           setShowConfirmModal(true);
//           setRideStatus('searching');
//           console.log('✅ Ride booked successfully:', response);
//         } else {
//           Alert.alert('Booking Failed', response?.message || 'Failed to book ride');
//           setRideStatus('idle');
//           setCurrentRideId(null);
//         }
//       });
//     } catch (error) {
//       setIsBooking(false);
//       console.error('Booking error:', error);
//       Alert.alert('Booking Failed', 'An unexpected error occurred. Please try again.');
//       setRideStatus('idle');
//       setCurrentRideId(null);
//     }
//   };

//   // Fetch user data
//   useEffect(() => {
//     const fetchUserData = async () => {
//       try {
//         const token = await AsyncStorage.getItem('authToken');
//         if (!token) return;
//         const backendUrl = getBackendUrl();
//         const response = await axios.get(`${backendUrl}/api/users/profile`, {
//           headers: { Authorization: `Bearer ${token}` }
//         });
    
//         const userProfile = response.data;
    
//         console.log('📋 User Profile:', userProfile);
    
//         const userMobile = userProfile.mobile ||
//                            userProfile.phone ||
//                            userProfile.phoneNumber ||
//                            userProfile.mobileNumber ||
//                            '';
//         await AsyncStorage.setItem('userId', userProfile._id);
//         await AsyncStorage.setItem('customerId', userProfile.customerId || userProfile._id);
//         await AsyncStorage.setItem('userName', userProfile.name || userProfile.username);
//         await AsyncStorage.setItem('userMobile', userProfile.phoneNumber);
//         await AsyncStorage.setItem('userAddress', userProfile.address || '');
    
//       } catch (error) {
//         console.error('Error fetching user data:', error);
//       }
//     };
//     fetchUserData();
//   }, []);

//   // Handle ride created
//   useEffect(() => {
//     const handleRideCreated = (data) => {
//       console.log('Ride created event received:', data);
//       if (data.success) {
//         if (data.rideId && !currentRideId) {
//           setCurrentRideId(data.rideId);
//         }
    
//         AsyncStorage.setItem('lastRideId', data.rideId || currentRideId || '');
    
//         setBookingOTP(data.otp);
//         setShowConfirmModal(true);
//         setRideStatus("searching");
//       } else if (data.message) {
//         Alert.alert("Booking Failed", data.message || "Failed to book ride");
//         setRideStatus("idle");
//         setCurrentRideId(null);
//       }
//     };
//     socket.on("rideCreated", handleRideCreated);
//     return () => {
//       socket.off("rideCreated", handleRideCreated);
//     };
//   }, [currentRideId]);

//   // Handle confirm booking
//   const handleConfirmBooking = async () => {
//     console.log('Confirming booking with OTP:', bookingOTP);
//     console.log('Current Ride ID:', currentRideId);
//     let rideIdToUse = currentRideId;
//     if (!rideIdToUse) {
//       rideIdToUse = await AsyncStorage.getItem('currentRideId');
//       console.log('🔄 Using rideId from storage:', rideIdToUse);
//     }
//     if (!rideIdToUse) {
//       Alert.alert("Error", "Invalid booking state. Please try booking again.");
//       setShowConfirmModal(false);
//       return;
//     }
//     setCurrentRideId(rideIdToUse);
//     setRideStatus("searching"); // Change to "searching" first
//     setShowConfirmModal(false);
//     console.log('🚀 Waiting for driver to accept ride:', rideIdToUse);
//     // Start polling for ride status updates
//     const statusPollInterval = setInterval(() => {
//       if (currentRideId) {
//         socket.emit('getRideStatus', { rideId: currentRideId });
//       }
//     }, 5000); // Poll every 5 seconds
//     AsyncStorage.setItem('statusPollInterval', statusPollInterval.toString());
//   };

//   // Format phone number to show only first 2 and last 4 digits
//   const formatPhoneNumber = (phoneNumber: string | null): string => {
//     if (!phoneNumber) return 'N/A';
//     if (phoneNumber.length <= 6) return phoneNumber;
//     const firstTwo = phoneNumber.substring(0, 2);
//     const lastFour = phoneNumber.substring(phoneNumber.length - 4);
//     const middleStars = '*'.repeat(phoneNumber.length - 6);
//     return `${firstTwo}${middleStars}${lastFour}`;
//   };

//   // Handle phone call
//   const handlePhoneCall = () => {
//     if (acceptedDriver && acceptedDriver.driverMobile) {
//       Linking.openURL(`tel:${acceptedDriver.driverMobile}`)
//         .catch(err => console.error('Error opening phone dialer:', err));
//     }
//   };

//   // Render vehicle icon
//   const renderVehicleIcon = (type: 'bike' | 'taxi' | 'port', size: number = 24, color: string = '#000000') => {
//     try {
//       switch (type) {
//         case 'bike': return <BikeIcon width={size} height={size} fill={color} />;
//         case 'taxi': return <TaxiIcon width={size} height={size} fill={color} />;
//         case 'port': return <LorryIcon width={size} height={size} fill={color} />;
//         default: return <TaxiIcon width={size} height={size} fill={color} />;
//       }
//     } catch (error) {
//       return <TaxiIcon width={size} height={size} fill={color} />;
//     }
//   };

//   // Render suggestion item
//   const renderSuggestionItem = (item: SuggestionType, onSelect: () => void, key: string) => {
//     let iconName = 'location-on';
//     let iconColor = '#A9A9A9';
//     if (item.type.includes('railway') || item.type.includes('station')) { iconName = 'train'; iconColor = '#3F51B5'; }
//     else if (item.type.includes('airport')) { iconName = 'flight'; iconColor = '#2196F3'; }
//     else if (item.type.includes('bus')) { iconName = 'directions-bus'; iconColor = '#FF9800'; }
//     else if (item.type.includes('hospital')) { iconName = 'local-hospital'; iconColor = '#F44336'; }
//     else if (item.type.includes('school') || item.type.includes('college')) { iconName = 'school'; iconColor = '#4CAF50'; }
//     else if (item.type.includes('place_of_worship')) { iconName = 'church'; iconColor = '#9C27B0'; }
//     else if (item.type.includes('shop') || item.type.includes('mall')) { iconName = 'shopping-mall'; iconColor = '#E91E63'; }
//     else if (item.type.includes('park')) { iconName = 'park'; iconColor = '#4CAF50'; }
//     return (
//       <TouchableOpacity key={key} style={styles.suggestionItem} onPress={onSelect}>
//         <MaterialIcons name={iconName as any} size={20} color={iconColor} style={styles.suggestionIcon} />
//         <View style={styles.suggestionTextContainer}>
//           <Text style={styles.suggestionMainText} numberOfLines={1}>{extractMainName(item.name)}</Text>
//           <Text style={styles.suggestionSubText} numberOfLines={1}>{item.address}</Text>
//         </View>
//       </TouchableOpacity>
//     );
//   };

//   // Extract main name
//   const extractMainName = (fullName: string): string => {
//     const parts = fullName.split(',');
//     return parts[0].trim();
//   };

//   // Check if book ride button is enabled
//   const isBookRideButtonEnabled = pickup && dropoff && selectedRideType && estimatedPrice !== null;

//   // Reverse geocode
//   const reverseGeocode = async (lat: number, lon: number): Promise<string | null> => {
//     try {
//       const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1&countrycodes=IN`;
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       return data.display_name || null;
//     } catch (error) {
//       console.error('Reverse geocode error:', error);
//       return null;
//     }
//   };

//   // Handle region change complete
//   const handleRegionChangeComplete = async (region: Region, isPickup: boolean) => {
//     if (regionChangeTimer.current) {
//       clearTimeout(regionChangeTimer.current);
//     }
//     regionChangeTimer.current = setTimeout(async () => {
//       const addr = await reverseGeocode(region.latitude, region.longitude);
//       if (addr) {
//         if (isPickup) {
//           propHandlePickupChange(addr);
//           setPickupLocation({ latitude: region.latitude, longitude: region.longitude });
//           setIsPickupCurrent(false);
//           if (dropoffLocation) fetchRoute(dropoffLocation);
//           fetchNearbyDrivers(region.latitude, region.longitude);
//         } else {
//           propHandleDropoffChange(addr);
//           setDropoffLocation({ latitude: region.latitude, longitude: region.longitude });
//           if (pickupLocation) fetchRoute({ latitude: region.latitude, longitude: region.longitude });
//         }
//       }
//     }, 500);
//   };

//   // Handle cancel button
//   const handleCancel = () => {
//     // Reset all states
//     setPickupLocation(null);
//     setDropoffLocation(null);
//     setRouteCoords([]);
//     setDistance('');
//     setTravelTime('');
//     setEstimatedPrice(null);
//     propHandlePickupChange('');
//     propHandleDropoffChange('');
//     setShowPickupSelector(false);
//     setShowDropoffSelector(false);
//     setShowRideOptions(false);
//   };

//   // Handle cancel ride during searching
//   const handleCancelRide = () => {
//     if (currentRideId) {
//       socket.emit('cancelRide', { rideId: currentRideId });
//     }
//     setRideStatus("idle");
//     setCurrentRideId(null);
//     setShowConfirmModal(false);
//     // Clear polling interval
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Clear acceptance timeout if any
//     AsyncStorage.getItem('acceptanceTimeout').then(id => {
//       if (id) {
//         clearTimeout(parseInt(id));
//         AsyncStorage.removeItem('acceptanceTimeout');
//       }
//     });
//     AsyncStorage.removeItem('currentRideId');
//     AsyncStorage.removeItem('bookedAt');
//     setBookedAt(null);
//     Alert.alert("Ride Cancelled", "Your ride booking has been cancelled.");
//   };

//   // Handle ride cancelled from server
//   useEffect(() => {
//     const handleRideCancelled = (data: { rideId: string }) => {
//       if (data.rideId === currentRideId) {
//         setRideStatus("idle");
//         setCurrentRideId(null);
//         Alert.alert("Ride Cancelled", "Your ride has been cancelled.");
//       }
//     };
//     socket.on("rideCancelled", handleRideCancelled);
//     return () => socket.off("rideCancelled", handleRideCancelled);
//   }, [currentRideId]);

//   return (
//     <View style={styles.container}>
//       {isLoadingLocation ? (
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#4CAF50" />
//           <Text style={styles.loadingText}>Fetching your location...</Text>
//         </View>
//       ) : (
//         <>
//           <View style={styles.mapContainer}>
//             {location && (
//               <MapView
//                 ref={mapRef}
//                 style={styles.map}
//                 initialRegion={{
//                   latitude: location.latitude,
//                   longitude: location.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => {
//                   if (showPickupSelector)
//                     handleRegionChangeComplete(region, true);
//                   else if (showDropoffSelector)
//                     handleRegionChangeComplete(region, false);
//                 }}
//                 showsUserLocation
//               >
//                 {/* Pickup & Drop markers */}
//                 {pickupLocation && (
//                   <Marker
//                     coordinate={pickupLocation}
//                     title="Pickup"
//                     pinColor="blue"
//                   />
//                 )}
//                 {dropoffLocation && (
//                   <Marker
//                     coordinate={dropoffLocation}
//                     title="Dropoff"
//                     pinColor="red"
//                   />
//                 )}
//                 {/* Driver marker */}
//                 {driverLocation && (
//                   <Marker
//                     coordinate={driverLocation}
//                     title="Driver"
//                     key={`driver-${driverLocation.latitude}-${driverLocation.longitude}`}
//                   >
//                     <View style={styles.driverMarkerContainer}>
//                       <View
//                         style={[
//                           styles.vehicleIconContainer,
//                           {
//                             backgroundColor:
//                               rideStatus === "onTheWay" ||
//                               rideStatus === "arrived" ||
//                               rideStatus === "started"
//                                 ? "#FF6B00"
//                                 : "#4CAF50",
//                           },
//                         ]}
//                       >
//                         {renderVehicleIcon(selectedRideType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                       </View>
//                     </View>
//                   </Marker>
//                 )}
//                 {/* Nearby Drivers */}
//                 {(rideStatus === "idle" || rideStatus === "searching") &&
//                   nearbyDrivers &&
//                   nearbyDrivers.length > 0 &&
//                   nearbyDrivers.map((driver) => (
//                     <Marker
//                       key={`nearby-${driver.driverId}-${driver.location.coordinates[1]}-${driver.location.coordinates[0]}`}
//                       coordinate={{
//                         latitude: driver.location.coordinates[1],
//                         longitude: driver.location.coordinates[0],
//                       }}
//                       title={`${driver.name} (${driver.status || "Live"})`}
//                     >
//                       <View style={styles.driverMarkerContainer}>
//                         <View style={styles.vehicleIconContainer}>
//                           {renderVehicleIcon(driver.vehicleType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                         </View>
//                       </View>
//                     </Marker>
//                   ))}
//                 {/* Route polyline */}
//                 {routeCoords && routeCoords.length > 0 && (
//                   <Polyline
//                     coordinates={routeCoords}
//                     strokeWidth={5}
//                     strokeColor="#4CAF50"
//                   />
//                 )}
//               </MapView>
//             )}
        
//             {/* Center Pin when selecting */}
//             {(showPickupSelector || showDropoffSelector) && (
//               <View style={styles.centerMarker}>
//                 <MaterialIcons
//                   name="location-pin"
//                   size={48}
//                   color={showPickupSelector ? '#4CAF50' : '#F44336'}
//                 />
//               </View>
//             )}
        
//             {/* Driver count display based on ride status */}
//             {(rideStatus === "idle" || rideStatus === "searching") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Available Drivers Nearby: {nearbyDriversCount}
//                 </Text>
//               </View>
//             )}
//             {/* Active ride: Show driver status */}
//             {(rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Your Driver is on the way
//                 </Text>
//               </View>
//             )}
//           </View>
         
//           {/* Driver Info Section */}
//           {acceptedDriver && (
//             <View style={styles.driverInfoContainer}>
//               <Text style={styles.driverInfoTitle}>Your Driver</Text>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="person" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.name}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="phone" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.driverMobile || 'N/A'}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="directions-car" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.vehicleType}</Text>
//               </View>
//             </View>
//           )}
         
//           {/* Status Indicator */}
//           {rideStatus === "onTheWay" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Driver is on the way
//                 {driverLocation && pickupLocation && (
//                   <Text style={styles.distanceText}>
//                     {"\n"}Estimated arrival: {calculateDistance(
//                       pickupLocation.latitude,
//                       pickupLocation.longitude,
//                       driverLocation.latitude,
//                       driverLocation.longitude
//                     ).toFixed(1)} km away
//                   </Text>
//                 )}
//               </Text>
//             </View>
//           )}
//           {rideStatus === "arrived" && (
//             <View style={[styles.driversCountOverlay, { backgroundColor: '#4CAF50' }]}>
//               <Text style={[styles.driversCountText, { color: '#FFFFFF' }]}>
//                 🎉 Driver Has Arrived!
//               </Text>
//             </View>
//           )}
//           {rideStatus === "started" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Ride in Progress...
//               </Text>
//             </View>
//           )}
         
//           {/* Input Container - Hide when not idle */}
//           {rideStatus === "idle" && (
//             <View style={styles.inputContainer}>
//               <View style={styles.inputRow}>
//                 <View style={styles.inputWrapper}>
//                   <View style={styles.inputIconContainer}>
//                     <MaterialIcons name="my-location" size={20} color="#4CAF50" />
//                   </View>
//                   <TextInput
//                     style={styles.input}
//                     placeholder="Enter pickup location"
//                     value={pickup}
//                     onChangeText={handlePickupChange}
//                     placeholderTextColor="#999"
//                   />
//                 </View>
//                 <TouchableOpacity
//                   style={styles.selectMapButton}
//                   onPress={() => {
//                     setShowPickupSelector((prev) => !prev);
//                     setShowDropoffSelector(false);
//                   }}
//                 >
//                   <Text style={styles.selectMapButtonText}>
//                     {showPickupSelector ? 'Done' : 'Select on Map'}
//                   </Text>
//                 </TouchableOpacity>
//               </View>
          
//               {showPickupSuggestions && (
//                 <View style={styles.suggestionsContainer}>
//                   {pickupLoading ? (
//                     <View style={styles.loadingContainer}>
//                       <ActivityIndicator size="small" color="#4CAF50" />
//                       <Text style={styles.loadingText}>Loading suggestions...</Text>
//                     </View>
//                   ) : suggestionsError ? (
//                     <View style={styles.errorContainer}>
//                       <Text style={styles.errorText}>{suggestionsError}</Text>
//                     </View>
//                   ) : pickupSuggestions.length > 0 ? (
//                     pickupSuggestions.map((item) => (
//                       renderSuggestionItem(item, () => selectPickupSuggestion(item), item.id)
//                     ))
//                   ) : (
//                     <View style={styles.noSuggestionsContainer}>
//                       <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                     </View>
//                   )}
//                 </View>
//               )}
          
//               <View style={styles.inputRow}>
//                 <View style={styles.inputWrapper}>
//                   <View style={styles.inputIconContainer}>
//                     <MaterialIcons name="place" size={20} color="#F44336" />
//                   </View>
//                   <TextInput
//                     style={styles.input}
//                     placeholder="Enter dropoff location"
//                     value={dropoff}
//                     onChangeText={handleDropoffChange}
//                     placeholderTextColor="#999"
//                   />
//                 </View>
//                 <TouchableOpacity
//                   style={styles.selectMapButton}
//                   onPress={() => {
//                     setShowDropoffSelector((prev) => !prev);
//                     setShowPickupSelector(false);
//                   }}
//                 >
//                   <Text style={styles.selectMapButtonText}>
//                     {showDropoffSelector ? 'Done' : 'Select on Map'}
//                   </Text>
//                 </TouchableOpacity>
//               </View>
          
//               {showDropoffSuggestions && (
//                 <View style={styles.suggestionsContainer}>
//                   {dropoffLoading ? (
//                     <View style={styles.loadingContainer}>
//                       <ActivityIndicator size="small" color="#4CAF50" />
//                       <Text style={styles.loadingText}>Loading suggestions...</Text>
//                     </View>
//                   ) : suggestionsError ? (
//                     <View style={styles.errorContainer}>
//                       <Text style={styles.errorText}>{suggestionsError}</Text>
//                     </View>
//                   ) : dropoffSuggestions.length > 0 ? (
//                     dropoffSuggestions.map((item) => (
//                       renderSuggestionItem(item, () => selectDropoffSuggestion(item), item.id)
//                     ))
//                   ) : (
//                     <View style={styles.noSuggestionsContainer}>
//                       <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                     </View>
//                   )}
//                 </View>
//               )}
//             </View>
//           )}
      
//           {/* API Error */}
//           {apiError && (
//             <View style={styles.errorContainer}>
//               <Text style={styles.errorText}>{apiError}</Text>
//             </View>
//           )}
         
//           {/* Cancel and Book Ride Buttons - Hide when not idle */}
//           {rideStatus === "idle" && (
//             <View style={styles.actionButtonsContainer}>
//               <TouchableOpacity
//                 style={styles.cancelButton}
//                 onPress={handleCancel}
//               >
//                 <Text style={styles.cancelButtonText}>CANCEL</Text>
//               </TouchableOpacity>
//               <TouchableOpacity
//                 style={[
//                   styles.bookRideButton,
//                   isBookRideButtonEnabled ? styles.enabledBookRideButton : styles.disabledBookRideButton,
//                 ]}
//                 onPress={handleBookRide}
//                 disabled={!isBookRideButtonEnabled}
//               >
//                 <Text style={styles.bookRideButtonText}>BOOK RIDE</Text>
//               </TouchableOpacity>
//             </View>
//           )}

// {/* Route Details Modal */}
// <Modal
//   animationType="slide"
//   transparent={true}
//   visible={showRouteDetailsModal}
//   onRequestClose={() => setShowRouteDetailsModal(false)}
// >
//   <View style={styles.routeDetailsModalOverlay}>
//     <View style={styles.routeDetailsModalContainer}>
//       <View style={styles.routeDetailsModalHeader}>
//         <Text style={styles.routeDetailsModalTitle}>RIDE DETAILS</Text>
//         <TouchableOpacity onPress={() => setShowRouteDetailsModal(false)}>
//           <MaterialIcons name="close" size={24} color="#333" />
//         </TouchableOpacity>
//       </View>
     
//       <ScrollView style={styles.routeDetailsContent} showsVerticalScrollIndicator={false}>
//         <View style={styles.routeDetailsRow}>
//           <Text style={styles.routeDetailsLabel}>DISTANCE:</Text>
//           <Text style={styles.routeDetailsValue}>{distance || '---'}</Text>
//         </View>
//         <View style={styles.routeDetailsRow}>
//           <Text style={styles.routeDetailsLabel}>TRAVEL TIME:</Text>
//           <Text style={styles.routeDetailsValue}>{travelTime || '---'}</Text>
//         </View>
       
//         <View style={styles.routeDetailsDivider} />
       
//         <Text style={styles.availableDriversText}>Available Drivers Nearby: {nearbyDriversCount}</Text>
       
//         <View style={styles.rideOptionsContainer}>
//           {/* Porter Option */}
//           <TouchableOpacity
//             style={[
//               styles.rideOptionButton,
//               selectedRideType === 'port' && styles.selectedRideOptionButton,
//             ]}
//             onPress={() => {
//               setSelectedRideType('port');
//             }}
//           >
//             <View style={styles.rideOptionIconContainer}>
//               <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//             </View>
//             <View style={styles.rideOptionInfoContainer}>
//               <Text style={[
//                 styles.rideOptionTypeText,
//                 selectedRideType === 'port' && styles.selectedRideOptionTypeText,
//               ]}>CarGo Porter</Text>
//               <Text style={[
//                 styles.rideOptionDetailsText,
//                 selectedRideType === 'port' && styles.selectedRideOptionDetailsText,
//               ]}>Max 5 ton</Text>
//               <Text style={styles.rideOptionPriceText}>
//                 {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//               </Text>
//             </View>
//           </TouchableOpacity>
         
//           {/* Taxi Option */}
//           <TouchableOpacity
//             style={[
//               styles.rideOptionButton,
//               selectedRideType === 'taxi' && styles.selectedRideOptionButton,
//             ]}
//             onPress={() => {
//               setSelectedRideType('taxi');
//             }}
//           >
//             <View style={styles.rideOptionIconContainer}>
//               <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//             </View>
//             <View style={styles.rideOptionInfoContainer}>
//               <Text style={[
//                 styles.rideOptionTypeText,
//                 selectedRideType === 'taxi' && styles.selectedRideOptionTypeText,
//               ]}>Taxi</Text>
//               <Text style={[
//                 styles.rideOptionDetailsText,
//                 selectedRideType === 'taxi' && styles.selectedRideOptionDetailsText,
//               ]}>4 seats</Text>
//               <Text style={styles.rideOptionPriceText}>
//                 {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//               </Text>
//             </View>
//           </TouchableOpacity>
         
//           {/* Bike Option */}
//           <TouchableOpacity
//             style={[
//               styles.rideOptionButton,
//               selectedRideType === 'bike' && styles.selectedRideOptionButton,
//             ]}
//             onPress={() => {
//               setSelectedRideType('bike');
//             }}
//           >
//             <View style={styles.rideOptionIconContainer}>
//               <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//             </View>
//             <View style={styles.rideOptionInfoContainer}>
//               <Text style={[
//                 styles.rideOptionTypeText,
//                 selectedRideType === 'bike' && styles.selectedRideOptionTypeText,
//               ]}>Motorcycle</Text>
//               <Text style={[
//                 styles.rideOptionDetailsText,
//                 selectedRideType === 'bike' && styles.selectedRideOptionDetailsText,
//               ]}>1 person</Text>
//               <Text style={styles.rideOptionPriceText}>
//                 {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//               </Text>
//             </View>
//           </TouchableOpacity>
//         </View>
//       </ScrollView>
     
//       <View style={styles.routeDetailsModalButtons}>
//         <TouchableOpacity
//           style={styles.routeDetailsCancelButton}
//           onPress={() => setShowRouteDetailsModal(false)}
//         >
//           <Text style={styles.routeDetailsCancelButtonText}>CANCEL</Text>
//         </TouchableOpacity>
//         <TouchableOpacity
//           style={styles.routeDetailsConfirmButton}
//           onPress={() => {
//             setShowRouteDetailsModal(false);
//             handleConfirmBookingFromModal();
//           }}
//         >
//           <Text style={styles.routeDetailsConfirmButtonText}>BOOK RIDE</Text>
//         </TouchableOpacity>
//       </View>
//     </View>
//   </View>
// </Modal>
         
//           {/* Ride Details Modal - New modal matching the screenshot */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showRideOptions && !showRouteDetailsModal}
//             onRequestClose={() => setShowRideOptions(false)}
//           >
//             <View style={styles.rideDetailsModalOverlay}>
//               <View style={styles.rideDetailsModalContainer}>
//                 <View style={styles.rideDetailsHeader}>
//                   <Text style={styles.rideDetailsTitle}>RIDE DETAILS</Text>
//                   <TouchableOpacity onPress={() => setShowRideOptions(false)}>
//                     <MaterialIcons name="close" size={24} color="#333" />
//                   </TouchableOpacity>
//                 </View>
               
//                 <ScrollView style={styles.rideDetailsContent} showsVerticalScrollIndicator={false}>
//                   <View style={styles.rideDetailsSection}>
//                     <Text style={styles.rideDetailsSectionTitle}>Pickup Location</Text>
//                     <Text style={styles.rideDetailsLocationText}>{pickup || '---'}</Text>
//                   </View>
                 
//                   <View style={styles.rideDetailsSection}>
//                     <Text style={styles.rideDetailsSectionTitle}>Drop-off</Text>
//                     <Text style={styles.rideDetailsLocationText}>{dropoff || '---'}</Text>
//                   </View>
                 
//                   <View style={styles.rideDetailsRow}>
//                     <Text style={styles.rideDetailsLabel}>Distance:</Text>
//                     <Text style={styles.rideDetailsValue}>{distance || '---'}</Text>
//                   </View>
                 
//                   <View style={styles.rideDetailsRow}>
//                     <Text style={styles.rideDetailsLabel}>Price:</Text>
//                     <Text style={styles.rideDetailsValue}>₹{estimatedPrice || '---'}</Text>
//                   </View>
                 
//                   <View style={styles.rideDetailsRow}>
//                     <Text style={styles.rideDetailsLabel}>Return trip:</Text>
//                     <Switch
//                       value={wantReturn}
//                       onValueChange={setWantReturn}
//                       trackColor={{ false: '#767577', true: '#4CAF50' }}
//                       thumbColor={wantReturn ? '#FFFFFF' : '#f4f3f4'}
//                     />
//                   </View>
//                 </ScrollView>
               
//                 <View style={styles.rideDetailsButtons}>
//                   <TouchableOpacity
//                     style={styles.bookMyRideButton}
//                     onPress={handleBookRide}
//                     disabled={!isBookRideButtonEnabled}
//                   >
//                     <Text style={styles.bookMyRideButtonText}>BOOK MY RIDE</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
      
//           {/* Confirm Modal */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showConfirmModal}
//             onRequestClose={() => setShowConfirmModal(false)}
//           >
//             <View style={styles.modalOverlay}>
//               <View style={styles.modalContainer}>
//                 <View style={styles.modalHeader}>
//                   <Text style={styles.modalTitle}>Confirm Booking</Text>
//                   <TouchableOpacity onPress={() => setShowConfirmModal(false)}>
//                     <MaterialIcons name="close" size={24} color="#666" />
//                   </TouchableOpacity>
//                 </View>
//                 <View style={styles.modalContent}>
//                   <View style={styles.modalIconContainer}>
//                     <Ionicons name="checkmark-circle" size={60} color="#4CAF50" />
//                   </View>
//                   <Text style={styles.modalMessage}>
//                     Thank you for choosing EAZY GO!
//                   </Text>
//                   <Text style={styles.modalSubMessage}>
//                     Your ride has been successfully booked.
//                   </Text>
//                   <View style={styles.otpContainer}>
//                     <Text style={styles.otpLabel}>Your pickup OTP is:</Text>
//                     <Text style={styles.otpValue}>{bookingOTP}</Text>
//                   </View>
//                   <Text style={styles.otpWarning}>
//                     Please don't share it with anyone. Only share with our driver.
//                   </Text>
//                 </View>
//                 <View style={styles.modalButtons}>
//                   <TouchableOpacity
//                     style={styles.modalCancelButton}
//                     onPress={() => setShowConfirmModal(false)}
//                   >
//                     <Text style={styles.modalCancelButtonText}>Cancel</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={styles.modalConfirmButton}
//                     onPress={handleConfirmBooking}
//                   >
//                     <Text style={styles.modalConfirmButtonText}>Confirm</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>

//           {/* Searching Overlay - Matches Figma design */}
//           {rideStatus === "searching" && (
//             <View style={styles.searchingOverlay}>
//               <Image
//                 source={LogoImage}
//                 style={styles.searchingLogo}
//               />
//               <View style={styles.illustrationContainer}>
//                 <FontAwesome5 name="taxi" size={50} color="#FFD700" />
//                 {/* Simple green line for illustration */}
//                 <View style={styles.searchLine} />
//               </View>
//               <ActivityIndicator size="large" color="#4CAF50" style={styles.progressBar} />
//               <Text style={styles.searchingMessage}>PLEASE HOLD! WE ARE SEARCHING FOR NEARBY DRIVER FOR YOU.</Text>
//               <TouchableOpacity style={styles.cancelRideButton} onPress={handleCancelRide}>
//                 <Text style={styles.cancelRideButtonText}>Cancel Ride</Text>
//               </TouchableOpacity>
//             </View>
//           )}

//           {/* Driver Assigned Overlay - Same style as searching overlay */}
//           {showDriverAssignedModal && (
//             <View style={styles.searchingOverlay}>
//               <Image
//                 source={TaxiAlertImage}
//                 style={styles.driverAssignedTaxiImage}
//               />
//               <View style={styles.driverProfileContainer}>
//                 <View style={styles.driverProfileImageContainer}>
//                   <FontAwesome name="user-circle" size={80} color="#4CAF50" />
//                 </View>
//                 <Text style={styles.driverNameText}>{acceptedDriver?.name || 'Driver'}</Text>
//               </View>
              
//               <View style={styles.driverContactContainer}>
//                 <Text style={styles.driverContactLabel}>Contact Driver</Text>
//                 <View style={styles.driverPhoneContainer}>
//                   <Text style={styles.driverPhoneText}>
//                     {formatPhoneNumber(acceptedDriver?.driverMobile)}
//                   </Text>
//                   <TouchableOpacity style={styles.phoneIconContainer} onPress={handlePhoneCall}>
//                     <MaterialIcons name="phone" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                 </View>
//               </View>
              
//               <View style={styles.otpInfoContainer}>
//                 <Text style={styles.otpInfoText}>
//                   Our driver Once reached please confirm this OTP:
//                 </Text>
//                 <View style={styles.otpDisplayContainer}>
//                   <Text style={styles.otpDisplayText}>{bookingOTP}</Text>
//                 </View>
//               </View>
              
//               <TouchableOpacity style={styles.closeDriverAssignedButton} onPress={() => setShowDriverAssignedModal(false)}>
//                 <Text style={styles.closeDriverAssignedButtonText}>Close</Text>
//               </TouchableOpacity>
//             </View>
//           )}
//         </>
//       )}
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: { flex: 1, backgroundColor: '#F5F5F5' },
//   loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
//   loadingText: { color: '#757575', fontSize: 16, marginTop: 10 },
//   mapContainer: {
//     height: Dimensions.get('window').height * 0.6, // 60% of screen
//     width: '100%',
//     borderRadius: 15,
//     overflow: 'hidden',
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   map: { ...StyleSheet.absoluteFillObject },
//   centerMarker: {
//     position: 'absolute',
//     top: '50%',
//     left: '50%',
//     transform: [{ translateX: -24 }, { translateY: -48 }],
//     zIndex: 10,
//   },
//   driversCountOverlay: {
//     position: 'absolute',
//     top: 10,
//     left: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     paddingHorizontal: 12,
//     paddingVertical: 8,
//     borderRadius: 20,
//     elevation: 2,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.2,
//     shadowRadius: 2
//   },
//   driversCountText: { fontSize: 14, fontWeight: '600', color: '#333333' },
//   driverInfoContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   driverInfoTitle: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#333333',
//     marginBottom: 10
//   },
//   driverDetailsRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   driverDetailText: {
//     fontSize: 14,
//     color: '#555555',
//     marginLeft: 10
//   },
//   statusContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   statusIndicator: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   statusText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#4CAF50',
//     marginLeft: 10
//   },
//   statusSubText: {
//     fontSize: 14,
//     color: '#757575',
//     textAlign: 'center'
//   },
//   inputContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   inputRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   inputWrapper: {
//     flex: 1,
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingHorizontal: 15,
//     paddingVertical: 5,
//   },
//   inputIconContainer: {
//     marginRight: 10,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   distanceText: {
//     fontSize: 12,
//     fontWeight: 'normal',
//     color: '#666666',
//   },
//   input: { flex: 1, fontSize: 16, paddingVertical: 12, color: '#333' },
//   selectMapButton: {
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     backgroundColor: '#4CAF50',
//     borderRadius: 5,
//     marginRight: 10,
//   },
//   selectMapButtonText: {
//     color: '#FFFFFF',
//     fontSize: 12,
//   },
//   suggestionsContainer: {
//     marginTop: 5,
//     marginHorizontal: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 8,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     maxHeight: 200
//   },
//   suggestionItem: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingVertical: 12,
//     paddingHorizontal: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   suggestionIcon: { marginRight: 12 },
//   suggestionTextContainer: { flex: 1 },
//   suggestionMainText: { fontSize: 16, fontWeight: '500', color: '#333333' },
//   suggestionSubText: { fontSize: 12, color: '#757575', marginTop: 2 },
//   noSuggestionsContainer: { paddingVertical: 12, alignItems: 'center' },
//   noSuggestionsText: { fontSize: 14, color: '#666666' },
//   distanceTimeContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   distanceTimeItem: { flexDirection: 'row', alignItems: 'center' },
//   distanceTimeLabel: { fontSize: 14, fontWeight: '600', color: '#757575', marginLeft: 8 },
//   distanceTimeValue: { fontSize: 14, fontWeight: 'bold', color: '#333333', marginLeft: 5 },
//   rideTypeContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//   },
//   rideTypeButton: {
//     width: '100%',
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 5,
//     marginBottom: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   selectedRideTypeButton: {
//     backgroundColor: '#4caf50',
//     borderWidth: 2,
//     borderColor: '#4caf50'
//   },
//   rideIconContainer: {
//     marginRight: 15,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideInfoContainer: {
//     flex: 1,
//   },
//   rideTypeText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 4,
//   },
//   selectedRideTypeText: {
//     color: '#FFFFFF'
//   },
//   rideDetailsText: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 6,
//   },
//   selectedRideDetailsText: {
//     color: '#FFFFFF'
//   },
//   ridePriceText: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   checkmarkContainer: {
//     justifyContent: 'center',
//     alignItems: 'center',
//     paddingLeft: 10,
//   },
//   // New styles for action buttons
//   actionButtonsContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 20,
//   },
//   cancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     marginRight: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   cancelButtonText: {
//     color: '#666666',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   bookRideButton: {
//     flex: 1,
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     marginLeft: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   enabledBookRideButton: { backgroundColor: '#4caf50' },
//   disabledBookRideButton: { backgroundColor: '#BDBDBD' },
//   bookRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   errorContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFEBEE',
//     borderRadius: 12,
//     padding: 15,
//     borderLeftWidth: 4,
//     borderLeftColor: '#F44336'
//   },
//   errorText: {
//     color: '#D32F2F',
//     fontSize: 14,
//     textAlign: 'center'
//   },
//   pricePanel: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     padding: 20,
//     maxHeight: Dimensions.get('window').height * 0.5,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   panelHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//     paddingBottom: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   panelTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   priceDetailsContainer: {
//     flexDirection: 'row',
//     marginBottom: 8
//   },
//   driverMarkerContainer: {
//     alignItems: 'center',
//     justifyContent: 'center',
//     width: 50,
//     height: 50,
//   },
//   vehicleIconContainer: {
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     backgroundColor: '#4CAF50',
//     alignItems: 'center',
//     justifyContent: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   priceInfoContainer: {
//     flex: 1
//   },
//   priceRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 10
//   },
//   priceLabel: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     flex: 1
//   },
//   priceValue: {
//     fontSize: 13,
//     fontWeight: 'bold',
//     color: '#333333',
//     flex: 2,
//     textAlign: 'right'
//   },
//   returnTripRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginTop: 5
//   },
//   bookButtonContainer: {
//     marginTop: 10
//   },
//   bookMyRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   bookMyRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   modalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   modalContainer: {
//     width: '85%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   modalHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   modalContent: {
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalIconContainer: {
//     marginBottom: 15
//   },
//   modalMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 5
//   },
//   modalSubMessage: {
//     fontSize: 16,
//     color: '#666666',
//     textAlign: 'center',
//     marginBottom: 20
//   },
//   otpContainer: {
//     backgroundColor: '#F5F5F5',
//     borderRadius: 10,
//     padding: 15,
//     alignItems: 'center',
//     marginBottom: 15,
//     width: '100%'
//   },
//   otpLabel: {
//     fontSize: 14,
//     color: '#666666',
//     marginBottom: 5
//   },
//   otpValue: {
//     fontSize: 24,
//     fontWeight: 'bold',
//     color: '#4caf50'
//   },
//   otpWarning: {
//     fontSize: 12,
//     color: '#F44336',
//     textAlign: 'center',
//     fontStyle: 'italic'
//   },
//   modalButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between'
//   },
//   modalCancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginRight: 10,
//     alignItems: 'center'
//   },
//   modalCancelButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#666666'
//   },
//   modalConfirmButton: {
//     flex: 1,
//     backgroundColor: '#4CAF50',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginLeft: 10,
//     alignItems: 'center'
//   },
//   modalConfirmButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#FFFFFF'
//   },
//   vehicleMarkerContainer: {
//     borderRadius: 20,
//     padding: 5,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   // Route Details Modal Styles
// routeDetailsModalOverlay: {
//   flex: 1,
//   backgroundColor: 'rgba(0, 0, 0, 0.5)',
//   justifyContent: 'flex-end', // Position at bottom
//   alignItems: 'center',
// },
// routeDetailsModalContainer: {
//   width: '100%', // Full width
//   backgroundColor: '#FFFFFF',
//   borderTopLeftRadius: 20,
//   borderTopRightRadius: 20,
//   padding: 20,
//   maxHeight: '70%', // Limit height to 70% of screen
//   elevation: 10,
//   shadowColor: '#000',
//   shadowOffset: { width: 0, height: -3 },
//   shadowOpacity: 0.2,
//   shadowRadius: 6,
// },
// routeDetailsModalHeader: {
//   flexDirection: 'row',
//   justifyContent: 'space-between',
//   alignItems: 'center',
//   marginBottom: 15,
//   paddingBottom: 10,
//   borderBottomWidth: 1,
//   borderBottomColor: '#EEEEEE'
// },
// routeDetailsModalTitle: {
//   fontSize: 18,
//   fontWeight: 'bold',
//   color: '#333333'
// },
// routeDetailsContent: {
//   marginBottom: 15,
//   maxHeight: 300, // Limit content height
// },
// routeDetailsRow: {
//   flexDirection: 'row',
//   justifyContent: 'space-between',
//   alignItems: 'center',
//   marginBottom: 10,
// },
// routeDetailsLabel: {
//   fontSize: 14,
//   fontWeight: '600',
//   color: '#333333'
// },
// routeDetailsValue: {
//   fontSize: 14,
//   fontWeight: 'bold',
//   color: '#4CAF50'
// },
// routeDetailsDivider: {
//   height: 1,
//   backgroundColor: '#EEEEEE',
//   marginVertical: 10,
// },
// availableDriversText: {
//   fontSize: 12,
//   fontWeight: '600',
//   color: '#333333',
//   marginBottom: 10,
// },
// rideOptionsContainer: {
//   marginBottom: 5,
// },
// rideOptionButton: {
//   width: '100%',
//   flexDirection: 'row',
//   alignItems: 'center',
//   backgroundColor: '#FFFFFF',
//   borderRadius: 8,
//   padding: 10,
//   marginBottom: 8,
//   borderWidth: 1,
//   borderColor: '#EEEEEE',
// },
// selectedRideOptionButton: {
//   backgroundColor: '#4caf50',
//   borderWidth: 1,
//   borderColor: '#4caf50',
// },
// rideOptionIconContainer: {
//   marginRight: 10,
//   justifyContent: 'center',
//   alignItems: 'center',
// },
// rideOptionInfoContainer: {
//   flex: 1,
// },
// rideOptionTypeText: {
//   fontSize: 14,
//   fontWeight: '600',
//   color: '#333333',
//   marginBottom: 2,
// },
// selectedRideOptionTypeText: {
//   color: '#FFFFFF',
// },
// rideOptionDetailsText: {
//   fontSize: 12,
//   color: '#757575',
//   marginBottom: 4,
// },
// selectedRideOptionDetailsText: {
//   color: '#FFFFFF',
// },
// rideOptionPriceText: {
//   fontSize: 12,
//   fontWeight: 'bold',
//   color: '#333333',
// },
// routeDetailsModalButtons: {
//   flexDirection: 'row',
//   justifyContent: 'space-between',
//   paddingTop: 10,
//   borderTopWidth: 1,
//   borderTopColor: '#EEEEEE',
// },
// routeDetailsCancelButton: {
//   flex: 1,
//   backgroundColor: '#F5F5F5',
//   paddingVertical: 12,
//   borderRadius: 8,
//   marginRight: 10,
//   alignItems: 'center',
// },
// routeDetailsCancelButtonText: {
//   fontSize: 14,
//   fontWeight: '600',
//   color: '#666666',
// },
// routeDetailsConfirmButton: {
//   flex: 1,
//   backgroundColor: '#4CAF50',
//   paddingVertical: 12,
//   borderRadius: 8,
//   marginLeft: 10,
//   alignItems: 'center',
// },
// routeDetailsConfirmButtonText: {
//   fontSize: 14,
//   fontWeight: '600',
//   color: '#FFFFFF',
// },
//   // Ride Details Modal Styles - New modal matching the screenshot
//   rideDetailsModalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideDetailsModalContainer: {
//     width: '90%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   rideDetailsHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20,
//     paddingBottom: 10,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   rideDetailsTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   rideDetailsContent: {
//     marginBottom: 20
//   },
//   rideDetailsSection: {
//     marginBottom: 15
//   },
//   rideDetailsSectionTitle: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     marginBottom: 5
//   },
//   rideDetailsLocationText: {
//     fontSize: 16,
//     color: '#333333'
//   },
//   rideDetailsRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15
//   },
//   rideDetailsLabel: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333'
//   },
//   rideDetailsValue: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#4CAF50'
//   },
//   rideDetailsButtons: {
//     marginTop: 10
//   },
//   // New styles for searching overlay
//   searchingOverlay: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     height: Dimensions.get('window').height * 0.55,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     alignItems: 'center',
//     justifyContent: 'center',
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6,
//   },
//   searchingLogo: {
//     width: 150,
//     height: 50,
//     resizeMode: 'contain',
//     marginBottom: 20,
//   },
//   illustrationContainer: {
//     alignItems: 'center',
//     marginBottom: 20,
//   },
//   searchLine: {
//     width: 200,
//     height: 4,
//     backgroundColor: '#4CAF50',
//     marginTop: 10,
//     borderRadius: 2,
//   },
//   progressBar: {
//     marginBottom: 20,
//   },
//   searchingMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 30,
//   },
//   cancelRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     paddingHorizontal: 40,
//     borderRadius: 10,
//   },
//   cancelRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600',
//   },
//   // New styles for driver assigned overlay - same as searching overlay
//   driverAssignedTaxiImage: {
//     width: 120,
//     height: 120,
//     resizeMode: 'contain',
//     marginBottom: 20
//   },
//   driverProfileContainer: {
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   driverProfileImageContainer: {
//     marginBottom: 10
//   },
//   driverNameText: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   driverContactContainer: {
//     width: '100%',
//     marginBottom: 20
//   },
//   driverContactLabel: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 10
//   },
//   driverPhoneContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     justifyContent: 'space-between',
//     backgroundColor: '#F5F5F5',
//     padding: 15,
//     borderRadius: 10
//   },
//   driverPhoneText: {
//     fontSize: 16,
//     color: '#333333'
//   },
//   phoneIconContainer: {
//     padding: 5
//   },
//   otpInfoContainer: {
//     width: '100%',
//     alignItems: 'center'
//   },
//   otpInfoText: {
//     fontSize: 16,
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 10
//   },
//   otpDisplayContainer: {
//     backgroundColor: '#F5F5F5',
//     padding: 15,
//     borderRadius: 10,
//     width: '80%',
//     alignItems: 'center'
//   },
//   otpDisplayText: {
//     fontSize: 24,
//     fontWeight: 'bold',
//     color: '#4CAF50'
//   },
//   closeDriverAssignedButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     paddingHorizontal: 40,
//     borderRadius: 10,
//   },
//   closeDriverAssignedButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600',
//   }
// });

// export default TaxiContent;
// import React, { useState, useEffect, useRef, useCallback } from 'react';
// import {
//   View,
//   StyleSheet,
//   Text,
//   TouchableOpacity,
//   Dimensions,
//   Alert,
//   ActivityIndicator,
//   Animated,
//   Switch,
//   Modal,
//   TextInput,
//   PermissionsAndroid,
//   Platform,
//   Image,
//   ScrollView
// } from 'react-native';
// import MapView, { Marker, Polyline, Region } from 'react-native-maps';
// import Geolocation from '@react-native-community/geolocation';
// import socket from '../../socket';
// import haversine from 'haversine-distance';
// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
// import Ionicons from 'react-native-vector-icons/Ionicons';
// import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
// import FontAwesome from 'react-native-vector-icons/FontAwesome';
// import axios from 'axios';
// import Svg, { Path, Circle, Rect } from 'react-native-svg';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getBackendUrl } from '../../util/backendConfig';
// import BikeIcon from '../../../assets001/bike.svg';
// import LorryIcon from '../../../assets001/lorry.svg';
// import TaxiIcon from '../../../assets001/taxi.svg';

// const RideTypeSelector = ({ selectedRideType, setSelectedRideType, estimatedPrice, distance, dynamicPrices }) => {
//   return (
//     <View style={styles.rideTypeContainer}>
//       {/* Porter Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'port' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('port')}
//         activeOpacity={0.7}
//       >
//         <View style={styles.rideIconContainer}>
//           <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'port' && styles.selectedRideTypeText,
//           ]}>CarGo Porter</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'port' && styles.selectedRideDetailsText,
//           ]}>Max 5 ton</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//           </Text>
//         </View>
//         {selectedRideType === 'port' && (
//           <View style={styles.checkmarkContainer}>
//             <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
//           </View>
//         )}
//       </TouchableOpacity>
  
//       {/* Taxi Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'taxi' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('taxi')}
//         activeOpacity={0.7}
//       >
//         <View style={styles.rideIconContainer}>
//           <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'taxi' && styles.selectedRideTypeText,
//           ]}>Taxi</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'taxi' && styles.selectedRideDetailsText,
//           ]}>4 seats</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//           </Text>
//         </View>
//         {selectedRideType === 'taxi' && (
//           <View style={styles.checkmarkContainer}>
//             <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
//           </View>
//         )}
//       </TouchableOpacity>
  
//       {/* Bike Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'bike' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('bike')}
//         activeOpacity={0.7}
//       >
//         <View style={styles.rideIconContainer}>
//           <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'bike' && styles.selectedRideTypeText,
//           ]}>Motorcycle</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'bike' && styles.selectedRideDetailsText,
//           ]}>1 person</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//           </Text>
//         </View>
//         {selectedRideType === 'bike' && (
//           <View style={styles.checkmarkContainer}>
//             <MaterialIcons name="check-circle" size={24} color="#FFFFFF" />
//           </View>
//         )}
//       </TouchableOpacity>
//     </View>
//   );
// };

// interface LocationType {
//   latitude: number;
//   longitude: number;
// }

// interface SuggestionType {
//   id: string;
//   name: string;
//   address: string;
//   lat: string;
//   lon: string;
//   type: string;
//   importance: number;
// }

// interface DriverType {
//   driverId: string;
//   name: string;
//   location: {
//     coordinates: [number, number]; // [longitude, latitude]
//   };
//   vehicleType: string;
//   status?: string;
//   driverMobile?: string;
// }

// interface TaxiContentProps {
//   loadingLocation?: boolean;
//   currentLocation: LocationType | null;
//   lastSavedLocation: LocationType | null;
//   pickup: string;
//   dropoff: string;
//   handlePickupChange: (text: string) => void;
//   handleDropoffChange: (text: string) => void;
// }

// const TaxiContent: React.FC<TaxiContentProps> = ({
//   loadingLocation: propLoadingLocation,
//   currentLocation: propCurrentLocation,
//   lastSavedLocation: propLastSavedLocation,
//   pickup,
//   dropoff,
//   handlePickupChange: propHandlePickupChange,
//   handleDropoffChange: propHandleDropoffChange,
// }) => {
//   const [isLoadingLocation, setIsLoadingLocation] = useState(true);
//   const [selectedRideType, setSelectedRideType] = useState<string>('taxi');
//   const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);
//   const [showPricePanel, setShowPricePanel] = useState(false);
//   const [wantReturn, setWantReturn] = useState(false);
//   const [distance, setDistance] = useState<string>('');
//   const [travelTime, setTravelTime] = useState<string>('');
//   const [showConfirmModal, setShowConfirmModal] = useState(false);
//   const [bookingOTP, setBookingOTP] = useState<string>('');
//   const [apiError, setApiError] = useState<string | null>(null);
//   const [location, setLocation] = useState<LocationType | null>(null);
//   const [pickupLocation, setPickupLocation] = useState<LocationType | null>(null);
//   const [dropoffLocation, setDropoffLocation] = useState<LocationType | null>(null);
//   const [routeCoords, setRouteCoords] = useState<LocationType[]>([]);
//   const [currentRideId, setCurrentRideId] = useState<string | null>(null);
//   const [rideStatus, setRideStatus] = useState<"idle" | "searching" | "onTheWay" | "arrived" | "started" | "completed">("idle");
//   const [driverId, setDriverId] = useState<string | null>(null);
//   const [driverLocation, setDriverLocation] = useState<LocationType | null>(null);
//   const [travelledKm, setTravelledKm] = useState(0);
//   const [lastCoord, setLastCoord] = useState<LocationType | null>(null);
//   const [nearbyDrivers, setNearbyDrivers] = useState<DriverType[]>([]);
//   const [nearbyDriversCount, setNearbyDriversCount] = useState<number>(0);
//   const [pickupSuggestions, setPickupSuggestions] = useState<SuggestionType[]>([]);
//   const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);
//   const [dropoffSuggestions, setDropoffSuggestions] = useState<SuggestionType[]>([]);
//   const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);
//   const [pickupLoading, setPickupLoading] = useState(false);
//   const [dropoffLoading, setDropoffLoading] = useState(false);
//   const [suggestionsError, setSuggestionsError] = useState<string | null>(null);
//   const [pickupCache, setPickupCache] = useState<Record<string, SuggestionType[]>>({});
//   const [dropoffCache, setDropoffCache] = useState<Record<string, SuggestionType[]>>({});
//   const [isPickupCurrent, setIsPickupCurrent] = useState(false);
//   const [socketConnected, setSocketConnected] = useState(false);
//   const [driverArrivedAlertShown, setDriverArrivedAlertShown] = useState(false);
//   const [rideCompletedAlertShown, setRideCompletedAlertShown] = useState(false);
//   const [acceptedDriver, setAcceptedDriver] = useState<DriverType | null>(null);
//   const [isBooking, setIsBooking] = useState(false);
//   const [driverName, setDriverName] = useState<string | null>(null);
//   const [driverMobile, setDriverMobile] = useState<string | null>(null);
//   const [bookedAt, setBookedAt] = useState<Date | null>(null);
//   const [showPickupMapModal, setShowPickupMapModal] = useState(false);
//   const [showDropoffMapModal, setShowDropoffMapModal] = useState(false);
//   const [showRouteDetailsModal, setShowRouteDetailsModal] = useState(false);
//   const [dynamicPrices, setDynamicPrices] = useState({
//     bike: 0,
//     taxi: 0,
//     port: 0,
//   });
//   // New state to control when to show ride options
//   const [showRideOptions, setShowRideOptions] = useState(false);
 
//   // Map selection states
//   const [showPickupSelector, setShowPickupSelector] = useState(false);
//   const [showDropoffSelector, setShowDropoffSelector] = useState(false);
 
//   const pickupDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const dropoffDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const regionChangeTimer = useRef<NodeJS.Timeout | null>(null);
//   const [priceLoading, setPriceLoading] = useState(false);
//   const panelAnimation = useRef(new Animated.Value(0)).current;
//   const mapRef = useRef<MapView | null>(null);
 
//   const fallbackLocation: LocationType = {
//     latitude: 11.3312971,
//     longitude: 77.7167303,
//   };

//   // Distance calculation
//   const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371; // Earth's radius in kilometers
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
//               Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//               Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distance = R * c;
//     console.log(`📍 Distance calculation: (${lat1},${lon1}) to (${lat2},${lon2}) = ${distance.toFixed(4)} km`);
//     return distance;
//   };

//   const calculateDistanceInMeters = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371;
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a =
//       Math.sin(dLat/2) * Math.sin(dLat/2) +
//       Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//       Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distanceKm = R * c;
//     return distanceKm * 1000;
//   };

//   // Fetch nearby drivers
//   const fetchNearbyDrivers = (latitude: number, longitude: number) => {
//     console.log(`Fetching nearby drivers for lat: ${latitude}, lng: ${longitude}`);
//     if (socket && socketConnected) {
//       socket.emit("requestNearbyDrivers", {
//         latitude,
//         longitude,
//         radius: 10000,
//         vehicleType: selectedRideType
//       });
//       console.log("Emitted requestNearbyDrivers event");
//     } else {
//       console.log("Socket not connected, attempting to reconnect...");
//       socket.connect();
//       socket.once("connect", () => {
//         console.log("Socket reconnected, emitting requestNearbyDrivers");
//         socket.emit("requestNearbyDrivers", {
//           latitude,
//           longitude,
//           radius: 10000,
//           vehicleType: selectedRideType
//         });
//       });
//     }
//   };

//   // Handle nearby drivers response
//   useEffect(() => {
//     const handleNearbyDriversResponse = (data: { drivers: DriverType[] }) => {
//       console.log('📍 Received nearby drivers response:', JSON.stringify(data, null, 2));
//       if (!location) {
//         console.log("❌ No location available, can't process drivers");
//         return;
//       }
  
//       console.log('📍 User current location:', location);
//       console.log('📍 Number of drivers received:', data.drivers.length);
  
//       // Active ride: Show only accepted driver
//       if (currentRideId && acceptedDriver) {
//         console.log('🚗 Active ride - Showing only accepted driver');
//         const acceptedDriverData = data.drivers.find(d => d.driverId === acceptedDriver.driverId);
//         if (acceptedDriverData) {
//           setNearbyDrivers([acceptedDriverData]);
//           setNearbyDriversCount(1);
//           console.log('✅ Accepted driver found and displayed');
//         } else {
//           setNearbyDrivers([]);
//           setNearbyDriversCount(0);
//           console.log('❌ Accepted driver not found in response');
//         }
//         return;
//       }
  
//       // No active ride: Show all online drivers
//       const filteredDrivers = data.drivers
//         .filter(driver => {
//           console.log(`🔍 Processing driver: ${driver.driverId} (${driver.name})`);
//           console.log(`📍 Driver location: ${driver.location.coordinates[1]}, ${driver.location.coordinates[0]}`);
      
//           // Check driver status
//           if (driver.status && !["Live", "online", "onRide", "available"].includes(driver.status)) {
//             console.log(`❌ Driver ${driver.driverId} filtered out by status: ${driver.status}`);
//             return false;
//           }
      
//           // Calculate distance
//           const distance = calculateDistance(
//             location.latitude,
//             location.longitude,
//             driver.location.coordinates[1],
//             driver.location.coordinates[0]
//           );
//           console.log(`📏 Driver ${driver.driverId} distance: ${distance.toFixed(2)} km`);
      
//           const isWithinRange = distance <= 10;
//           console.log(`✅ Driver ${driver.driverId} within 10km: ${isWithinRange}`);
      
//           return isWithinRange;
//         })
//         .sort((a, b) => {
//           const distA = calculateDistance(location.latitude, location.longitude, a.location.coordinates[1], a.location.coordinates[0]);
//           const distB = calculateDistance(location.latitude, location.longitude, b.location.coordinates[1], b.location.coordinates[0]);
//           return distA - distB;
//         })
//         .slice(0, 10);
  
//       console.log('✅ Filtered drivers count:', filteredDrivers.length);
//       console.log('📍 Final drivers to display:', filteredDrivers);
  
//       setNearbyDrivers(filteredDrivers);
//       setNearbyDriversCount(filteredDrivers.length);
//     };

//     socket.on("nearbyDriversResponse", handleNearbyDriversResponse);
//     return () => socket.off("nearbyDriversResponse", handleNearbyDriversResponse);
//   }, [location, socketConnected, currentRideId, acceptedDriver]);

//   // Request location on component mount
//   useEffect(() => {
//     const requestLocation = async () => {
//       setIsLoadingLocation(true);
//       if (propCurrentLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using current location from props:`, propCurrentLocation);
//         setLocation(propCurrentLocation);
//         global.currentLocation = propCurrentLocation;
//         fetchNearbyDrivers(propCurrentLocation.latitude, propCurrentLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       if (propLastSavedLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using last saved location from props:`, propLastSavedLocation);
//         setLocation(propLastSavedLocation);
//         global.currentLocation = propLastSavedLocation;
//         fetchNearbyDrivers(propLastSavedLocation.latitude, propLastSavedLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using fallback location:`, fallbackLocation);
//       setLocation(fallbackLocation);
//       global.currentLocation = fallbackLocation;
//       fetchNearbyDrivers(fallbackLocation.latitude, fallbackLocation.longitude);
//       setIsLoadingLocation(false);
//       if (Platform.OS === "android") {
//         const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
//         if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location permission denied`);
//           Alert.alert("Permission Denied", "Location permission is required to proceed.");
//           return;
//         }
//       }
//       Geolocation.getCurrentPosition(
//         (pos) => {
//           const loc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Live location fetched successfully:`, loc);
//           setLocation(loc);
//           global.currentLocation = loc;
//           fetchNearbyDrivers(loc.latitude, loc.longitude);
//         },
//         (err) => {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location error:`, err.code, err.message);
//           Alert.alert("Location Error", "Could not fetch location. Please try again or check your GPS settings.");
//         },
//         { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000, distanceFilter: 10 }
//       );
//     };
//     requestLocation();
//   }, [propCurrentLocation, propLastSavedLocation]);

//   // Socket connection handlers
//   useEffect(() => {
//     const handleConnect = async () => {
//       console.log("Socket connected");
//       setSocketConnected(true);
//       if (location) fetchNearbyDrivers(location.latitude, location.longitude);
  
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User registered with socket:', userId);
//         }
//       } catch (error) {
//         console.error('Error registering user with socket:', error);
//       }
//     };
//     const handleDisconnect = () => { console.log("Socket disconnected"); setSocketConnected(false); };
//     const handleConnectError = (error: Error) => { console.error("Socket connection error:", error); setSocketConnected(false); };
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     socket.on("connect_error", handleConnectError);
//     setSocketConnected(socket.connected);
//     return () => {
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//       socket.off("connect_error", handleConnectError);
//     };
//   }, [location]);

//   // Location update interval
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected]);

//   // Driver location updates
//   useEffect(() => {
//     const handleDriverLiveLocationUpdate = (data: { driverId: string; lat: number; lng: number; status?: string }) => {
//       console.log('📍 Received driver location update:', data);
  
//       // If we have an active ride and this is the accepted driver
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('📍 Updating accepted driver location during active ride');
    
//         // Update driver location state
//         const driverCoords = { latitude: data.lat, longitude: data.lng };
//         setDriverLocation(driverCoords);
    
//         // Update the driver in nearbyDrivers
//         setNearbyDrivers(prev => {
//           if (prev.length > 0 && prev[0].driverId === data.driverId) {
//             return [{
//               ...prev[0],
//               location: { coordinates: [data.lng, data.lat] },
//               status: data.status || "onTheWay"
//             }];
//           }
//           return prev;
//         });
    
//         // Calculate distance if needed
//         if (lastCoord) {
//           const dist = haversine(lastCoord, driverCoords);
//           setTravelledKm(prev => prev + dist / 1000);
//         }
//         setLastCoord(driverCoords);
    
//         // Check if driver is near pickup location
//         if (pickupLocation && rideStatus === "onTheWay") {
//           const distanceToPickup = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             pickupLocation.latitude,
//             pickupLocation.longitude
//           );
//           console.log(`📍 Driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//           if (distanceToPickup <= 50 && !driverArrivedAlertShown) {
//             console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED');
//             setRideStatus("arrived");
//             setDriverArrivedAlertShown(true);
        
//             // Update UI state
//             setNearbyDrivers(prev => {
//               if (prev.length > 0 && prev[0].driverId === data.driverId) {
//                 return [{
//                   ...prev[0],
//                   status: "arrived"
//                 }];
//               }
//               return prev;
//             });
        
//             // Get customer ID for OTP
//             AsyncStorage.getItem('customerId').then(customerId => {
//               const otp = customerId ? customerId.slice(-4) : '1234';
//               Alert.alert(
//                 "🎉 Driver Arrived!",
//                 `Our driver (${acceptedDriver.name}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//                 [{ text: "OK", onPress: () => {
//                   console.log('✅ User acknowledged driver arrival');
//                 }}]
//               );
//             });
//           }
//         }
      
//         // Check if driver is near dropoff location
//         if (dropoffLocation && rideStatus === "started") {
//           const distanceToDropoff = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             dropoffLocation.latitude,
//             dropoffLocation.longitude
//           );
      
//           if (distanceToDropoff <= 50 && !rideCompletedAlertShown) {
//             // Notify the backend
//             socket.emit('driverReachedDestination', {
//               rideId: currentRideId,
//               driverId: data.driverId,
//               distance: travelledKm.toFixed(2)
//             });
        
//             // Set a flag to prevent multiple notifications
//             setRideCompletedAlertShown(true);
//           }
//         }
//         return; // Ignore other drivers during active ride
//       }
  
//       // If no active ride, update all drivers
//       setNearbyDrivers((prev) => {
//         const existingIndex = prev.findIndex(d => d.driverId === data.driverId);
//         if (existingIndex >= 0) {
//           const updated = [...prev];
//           updated[existingIndex] = {
//             ...updated[existingIndex],
//             location: { coordinates: [data.lng, data.lat] },
//             status: data.status || "Live"
//           };
//           return updated;
//         } else {
//           if (data.status && !["Live", "online", "onRide", "available"].includes(data.status)) return prev;
//           return [
//             ...prev,
//             {
//               driverId: data.driverId,
//               name: `Driver ${data.driverId}`,
//               location: { coordinates: [data.lng, data.lat] },
//               vehicleType: "taxi",
//               status: data.status || "Live"
//             }
//           ];
//         }
//       });
//     };

//     socket.on("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//     return () => socket.off("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//   }, [location, currentRideId, acceptedDriver, lastCoord, pickupLocation, dropoffLocation, rideStatus, driverArrivedAlertShown, rideCompletedAlertShown]);

//   // Polling for driver arrival
//   useEffect(() => {
//     let intervalId;
//     if (rideStatus === "onTheWay" && pickupLocation && driverLocation && !driverArrivedAlertShown) {
//       intervalId = setInterval(() => {
//         const distanceToPickup = calculateDistanceInMeters(
//           driverLocation.latitude,
//           driverLocation.longitude,
//           pickupLocation.latitude,
//           pickupLocation.longitude
//         );
//         console.log(`📍 Polling driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//         if (distanceToPickup <= 50) {
//           console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED FROM POLLING');
//           setRideStatus("arrived");
//           setDriverArrivedAlertShown(true);
//           AsyncStorage.getItem('customerId').then(customerId => {
//             const otp = customerId ? customerId.slice(-4) : '1234';
//             Alert.alert(
//               "🎉 Driver Arrived!",
//               `Our driver (${acceptedDriver?.name || 'Driver'}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//               [{ text: "OK", onPress: () => {
//                 console.log('✅ User acknowledged driver arrival');
//               }}]
//             );
//           });
//           clearInterval(intervalId);
//         }
//       }, 2000); // Poll every 2 seconds
//     }
//     return () => {
//       if (intervalId) clearInterval(intervalId);
//     };
//   }, [rideStatus, pickupLocation, driverLocation, driverArrivedAlertShown, acceptedDriver]);

//   // Ride completion event handler
//   useEffect(() => {
//     const handleRideCompleted = (data: any) => {
//       console.log('🎉 Ride completed event received:', data);
  
//       // Update ride status to completed
//       setRideStatus("completed");
  
//       // Calculate final distance and time if not provided
//       const finalDistance = data.distance || travelledKm.toFixed(2);
//       const finalTime = data.travelTime || travelTime;
//       const finalCharge = data.charge || estimatedPrice;
  
//       // Show completion alert
//       Alert.alert(
//         "Ride Completed",
//         `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//         [
//           {
//             text: "OK",
//             onPress: () => {
//               // Reset ride state after completion
//               setTimeout(() => {
//                 setCurrentRideId(null);
//                 setDriverId(null);
//                 setDriverLocation(null);
//                 setAcceptedDriver(null);
//                 setRouteCoords([]);
//                 setPickupLocation(null);
//                 setDropoffLocation(null);
//                 propHandlePickupChange("");
//                 propHandleDropoffChange("");
//                 setRideStatus("idle");
//                 setDriverArrivedAlertShown(false);
//                 setRideCompletedAlertShown(false);
//                 setShowRideOptions(false); // Hide ride options after ride completion
            
//                 // Fetch all drivers again after ride completion
//                 if (location) {
//                   fetchNearbyDrivers(location.latitude, location.longitude);
//                 }
//               }, 2000);
//             }
//           }
//         ]
//       );
  
//       // Clear ride data from storage
//       AsyncStorage.removeItem('currentRideId');
//       AsyncStorage.removeItem('acceptedDriver');
//       AsyncStorage.removeItem('bookedAt');
//       setBookedAt(null);
//     };

//     socket.on("rideCompleted", handleRideCompleted);
//     return () => {
//       socket.off("rideCompleted", handleRideCompleted);
//     };
//   }, [travelledKm, travelTime, estimatedPrice, location]);

//   // Ride status update handler
//   useEffect(() => {
//     const handleRideStatusUpdate = (data: any) => {
//       console.log('📋 Ride status update received:', data);
  
//       if (data.rideId === currentRideId) {
//         if (data.status === 'completed') {
//           // Handle ride completion
//           setRideStatus("completed");
      
//           // Calculate final distance and time if not provided
//           const finalDistance = data.distance || travelledKm.toFixed(2);
//           const finalTime = data.travelTime || travelTime;
//           const finalCharge = data.charge || estimatedPrice;
      
//           // Show completion alert
//           Alert.alert(
//             "Ride Completed",
//             `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//             [
//               {
//                 text: "OK",
//                 onPress: () => {
//                   // Reset ride state after completion
//                   setTimeout(() => {
//                     setCurrentRideId(null);
//                     setDriverId(null);
//                     setDriverLocation(null);
//                     setAcceptedDriver(null);
//                     setRouteCoords([]);
//                     setPickupLocation(null);
//                     setDropoffLocation(null);
//                     propHandlePickupChange("");
//                     propHandleDropoffChange("");
//                     setRideStatus("idle");
//                     setDriverArrivedAlertShown(false);
//                     setRideCompletedAlertShown(false);
//                     setShowRideOptions(false); // Hide ride options after ride completion
                
//                     // Fetch all drivers again after ride completion
//                     if (location) {
//                       fetchNearbyDrivers(location.latitude, location.longitude);
//                     }
//                   }, 2000);
//                 }
//               }
//             ]
//           );
      
//           // Clear ride data from storage
//           AsyncStorage.removeItem('currentRideId');
//           AsyncStorage.removeItem('acceptedDriver');
//           AsyncStorage.removeItem('bookedAt');
//           setBookedAt(null);
//         }
//       }
//     };

//     socket.on("rideStatusUpdate", handleRideStatusUpdate);
//     return () => {
//       socket.off("rideStatusUpdate", handleRideStatusUpdate);
//     };
//   }, [currentRideId, travelledKm, travelTime, estimatedPrice, location]);

//   // Driver offline handler
//   useEffect(() => {
//     const handleDriverOffline = (data: { driverId: string }) => {
//       console.log(`Driver ${data.driverId} went offline`);
  
//       // Don't remove accepted driver during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('⚠️ Accepted driver went offline during active ride');
//         return;
//       }
  
//       setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//       setNearbyDriversCount(prev => Math.max(0, prev - 1));
//     };

//     socket.on("driverOffline", handleDriverOffline);
//     return () => socket.off("driverOffline", handleDriverOffline);
//   }, [currentRideId, acceptedDriver]);

//   // Driver status update handler
//   useEffect(() => {
//     const handleDriverStatusUpdate = (data: { driverId: string; status: string }) => {
//       console.log(`Driver ${data.driverId} status updated to: ${data.status}`);
  
//       // Don't update accepted driver status during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('Keeping accepted driver status as onTheWay');
//         return;
//       }
  
//       if (data.status === "offline") {
//         setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//         setNearbyDriversCount(prev => Math.max(0, prev - 1));
//         return;
//       }
//       setNearbyDrivers(prev => prev.map(driver =>
//         driver.driverId === data.driverId ? { ...driver, status: data.status } : driver
//       ));
//     };

//     socket.on("driverStatusUpdate", handleDriverStatusUpdate);
//     return () => socket.off("driverStatusUpdate", handleDriverStatusUpdate);
//   }, [currentRideId, acceptedDriver]);

//   // Recover ride data on component mount
//   useEffect(() => {
//     const recoverRideData = async () => {
//       try {
//         const savedRideId = await AsyncStorage.getItem('currentRideId');
//         const savedDriverData = await AsyncStorage.getItem('acceptedDriver');
    
//         if (savedRideId && !currentRideId) {
//           console.log('🔄 Recovering ride data from storage:', savedRideId);
//           setCurrentRideId(savedRideId);
      
//           if (savedDriverData) {
//             const driverData = JSON.parse(savedDriverData);
//             setAcceptedDriver(driverData);
//             setDriverName(driverData.name);
//             setDriverMobile(driverData.driverMobile);
//             setRideStatus("onTheWay");
//             setShowRideOptions(true); // Show ride options if there's an active ride
//           } else {
//             setRideStatus("searching");
//             const bookedStr = await AsyncStorage.getItem('bookedAt');
//             setBookedAt(bookedStr ? new Date(bookedStr) : new Date());
//             // Restart polling
//             const pollInterval = setInterval(() => {
//               if (currentRideId) {
//                 socket.emit('getRideStatus', { rideId: currentRideId });
//               }
//             }, 5000);
//             AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//             // Restart timeout (increased to 60s)
//             const acceptanceTimeout = setTimeout(() => {
//               if (rideStatus === "searching") {
//                 Alert.alert(
//                   "No Driver Available",
//                   "No driver has accepted your ride yet. Please try again or wait longer.",
//                   [{ text: "OK", onPress: () => setRideStatus("idle") }]
//                 );
//               }
//             }, 60000);
//             AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
//           }
      
//           // Request ride status from server
//           socket.emit('getRideStatus', { rideId: savedRideId });
//         }
//       } catch (error) {
//         console.error('Error recovering ride data:', error);
//       }
//     };
//     recoverRideData();
//   }, []);

//   // Process ride acceptance
//   const processRideAcceptance = useCallback((data: any) => {
//     console.log('🎯 PROCESSING RIDE ACCEPTANCE:', JSON.stringify(data, null, 2));
//     // Validate required data
//     if (!data.rideId || !data.driverId) {
//       console.error('❌ Invalid ride acceptance data:', data);
//       return;
//     }
//     // Clear existing timeouts and intervals
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Update ride status immediately
//     setRideStatus("onTheWay");
//     setDriverId(data.driverId);
//     setDriverName(data.driverName || 'Driver');
//     setDriverMobile(data.driverMobile || 'N/A');
//     setCurrentRideId(data.rideId);
//     // Create accepted driver object
//     const acceptedDriverData: DriverType = {
//       driverId: data.driverId,
//       name: data.driverName || 'Driver',
//       driverMobile: data.driverMobile || 'N/A',
//       location: {
//         coordinates: [data.driverLng || 0, data.driverLat || 0]
//       },
//       vehicleType: data.vehicleType || selectedRideType,
//       status: "onTheWay"
//     };
//     console.log('👨‍💼 Setting accepted driver:', acceptedDriverData);
//     // Update state
//     setAcceptedDriver(acceptedDriverData);
//     setNearbyDrivers([acceptedDriverData]);
//     setNearbyDriversCount(1);
//     // Set initial driver location
//     if (data.driverLat && data.driverLng) {
//       const driverLoc = {
//         latitude: data.driverLat,
//         longitude: data.driverLng
//       };
//       setDriverLocation(driverLoc);
//       console.log('📍 Initial driver location set:', driverLoc);
//     }
//     // Store in AsyncStorage for recovery
//     AsyncStorage.setItem('currentRideId', data.rideId);
//     AsyncStorage.setItem('acceptedDriver', JSON.stringify(acceptedDriverData));
//     console.log('✅ Ride acceptance processed successfully for:', data.rideId);
//   }, [selectedRideType]);

//   // Global ride acceptance listener
//   useEffect(() => {
//     console.log('🎯 Setting up GLOBAL ride acceptance listener');
//     const handleRideAccepted = (data: any) => {
//       console.log('🚨 ===== USER APP: RIDE ACCEPTED ====');
//       console.log('📦 Acceptance data:', JSON.stringify(data, null, 2));
//       console.log('🚨 ===== END ACCEPTANCE DATA ====');
//       processRideAcceptance(data);
//     };
//     // Listen on multiple channels
//     socket.on("rideAccepted", handleRideAccepted);
//     // Fixed: Proper async handling
//     socket.on("rideAcceptedBroadcast", async (data) => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (data.targetUserId === userId) {
//           handleRideAccepted(data);
//         }
//       } catch (error) {
//         console.error('Error checking user ID:', error);
//       }
//     });
//     return () => {
//       socket.off("rideAccepted", handleRideAccepted);
//       socket.off("rideAcceptedBroadcast", handleRideAccepted);
//     };
//   }, [processRideAcceptance]);

//   // Critical socket event handlers
//   useEffect(() => {
//     console.log('🔌 Setting up CRITICAL socket event handlers');
//     // Handle getDriverData response
//     const handleDriverDataResponse = (data: any) => {
//       console.log('🚗 Driver data received:', data);
//       if (data.success) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle getRideStatus response
//     const handleRideStatusResponse = (data: any) => {
//       console.log('📋 Ride status received:', data);
//       if (data.driverId) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle backup ride acceptance
//     const handleBackupRideAccepted = (data: any) => {
//       console.log('🔄 Backup ride acceptance:', data);
//       processRideAcceptance(data);
//     };
//     socket.on("driverDataResponse", handleDriverDataResponse);
//     socket.on("rideStatusResponse", handleRideStatusResponse);
//     socket.on("backupRideAccepted", handleBackupRideAccepted);
//     return () => {
//       socket.off("driverDataResponse", handleDriverDataResponse);
//       socket.off("rideStatusResponse", handleRideStatusResponse);
//       socket.off("backupRideAccepted", handleBackupRideAccepted);
//     };
//   }, [selectedRideType]);

//   // Comprehensive socket debugger
//   useEffect(() => {
//     console.log('🔍 Starting comprehensive socket debugging');
//     // Debug all socket events
//     const debugAllEvents = (eventName: string, data: any) => {
//       if (eventName.includes('ride') || eventName.includes('driver') || eventName.includes('Room')) {
//         console.log(`📡 SOCKET EVENT [${eventName}]:`, data);
//       }
//     };
//     // Specific debug for rideAccepted
//     const debugRideAccepted = (data: any) => {
//       console.log('🚨🚨🚨 RIDE ACCEPTED EVENT RECEIVED 🚨🚨🚨');
//       console.log('📦 Data:', JSON.stringify(data, null, 2));
//       console.log('🔍 Current state:', {
//         currentRideId,
//         rideStatus,
//         hasAcceptedDriver: !!acceptedDriver
//       });
  
//       // Process immediately
//       processRideAcceptance(data);
//     };
//     // Debug connection
//     const handleConnect = () => {
//       console.log('✅ Socket connected - ID:', socket.id);
//       setSocketConnected(true);
//     };
//     const handleDisconnect = () => {
//       console.log('❌ Socket disconnected');
//       setSocketConnected(false);
//     };
//     // Add all listeners
//     socket.onAny(debugAllEvents);
//     socket.on("rideAccepted", debugRideAccepted);
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     console.log('🔍 Socket debuggers activated');
//     return () => {
//       socket.offAny(debugAllEvents);
//       socket.off("rideAccepted", debugRideAccepted);
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//     };
//   }, [currentRideId, rideStatus, acceptedDriver, processRideAcceptance]);

//   // User location tracking function
//   const sendUserLocationUpdate = useCallback(async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
  
//       if (!userId || !currentRideId) {
//         console.log('❌ Cannot send location: Missing userId or rideId');
//         return;
//       }
//       console.log(`📍 SENDING USER LOCATION UPDATE: ${latitude}, ${longitude} for ride ${currentRideId}`);
  
//       // Send to socket for real-time updates
//       socket.emit('userLocationUpdate', {
//         userId,
//         rideId: currentRideId,
//         latitude,
//         longitude,
//         timestamp: Date.now()
//       });
//       // Also save to database via REST API
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//           latitude,
//           longitude,
//           rideId: currentRideId
//         }, {
//           headers: {
//             Authorization: `Bearer ${token}`
//           }
//         });
//       }
//       console.log('✅ User location update sent successfully');
//     } catch (error) {
//       console.error('❌ Error sending user location update:', error);
//     }
//   }, [currentRideId]);

//   // Continuous location tracking during active rides
//   useEffect(() => {
//     let locationInterval;
//     if ((rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && location) {
//       console.log('🔄 Starting continuous user location tracking');
  
//       locationInterval = setInterval(() => {
//         if (location) {
//           sendUserLocationUpdate(location.latitude, location.longitude);
//         }
//       }, 5000); // Send every 5 seconds
  
//     }
//     return () => {
//       if (locationInterval) {
//         clearInterval(locationInterval);
//         console.log('🛑 Stopped user location tracking');
//       }
//     };
//   }, [rideStatus, location, sendUserLocationUpdate]);

//   // Update existing location interval to include active ride statuses
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching" || rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
        
//             // Send location update if in active ride
//             if (rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") {
//               sendUserLocationUpdate(newLoc.latitude, newLoc.longitude);
//             }
        
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected, sendUserLocationUpdate]);

//   // Manual ride status polling
//   useEffect(() => {
//     if (currentRideId && rideStatus === "searching") {
//       console.log('🔄 Starting backup polling for ride:', currentRideId);
  
//       const pollInterval = setInterval(() => {
//         console.log('📡 Polling ride status for:', currentRideId);
//         socket.emit('getRideStatus', { rideId: currentRideId }, (data) => {
//           if (data.driverId) {
//             processRideAcceptance(data);
//           } else if (bookedAt && (new Date().getTime() - bookedAt.getTime() > 60000) && rideStatus === "searching") {
//             console.log('⏰ No driver found after 60s');
//             Alert.alert(
//               "No Driver Available",
//               "No driver has accepted your ride yet. Please try again or wait longer.",
//               [{ text: "OK", onPress: () => setRideStatus("idle") }]
//             );
//             clearInterval(pollInterval);
//             AsyncStorage.removeItem('statusPollInterval');
//           }
//         });
//       }, 3000); // Poll every 3 seconds
//       // Store interval ID
//       AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//       return () => {
//         clearInterval(pollInterval);
//         AsyncStorage.removeItem('statusPollInterval');
//       };
//     }
//   }, [currentRideId, rideStatus, bookedAt]);

//   // Ensure user joins their room on socket connection
//   useEffect(() => {
//     const registerUserRoom = async () => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId && socket.connected) {
//           console.log('👤 Registering user with socket room:', userId);
//           socket.emit('registerUser', { userId });
      
//           // Also join the room manually
//           socket.emit('joinRoom', { userId });
//         }
//       } catch (error) {
//         console.error('Error registering user room:', error);
//       }
//     };
//     // Register on connect and every 5 seconds to ensure room membership
//     socket.on('connect', registerUserRoom);
//     registerUserRoom();
//     // Re-register periodically to ensure room membership
//     const interval = setInterval(registerUserRoom, 5000);
//     return () => {
//       socket.off('connect', registerUserRoom);
//       clearInterval(interval);
//     };
//   }, []);

//   // Socket recovery: Handle reconnection and missed events
//   useEffect(() => {
//     const handleReconnect = async () => {
//       console.log('🔌 Socket reconnected, recovering state...');
//       setSocketConnected(true);
  
//       // Re-register user
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User re-registered after reconnect:', userId);
//         }
    
//         // Request current ride status if we have a ride ID
//         const currentRideId = await AsyncStorage.getItem('currentRideId');
//         if (currentRideId) {
//           socket.emit('getRideStatus', { rideId: currentRideId });
//           console.log('🔄 Requesting status for current ride:', currentRideId);
//         }
//       } catch (error) {
//         console.error('Error during socket recovery:', error);
//       }
//     };
//     socket.on("connect", handleReconnect);
//     return () => {
//       socket.off("connect", handleReconnect);
//     };
//   }, []);

//   // Fetch route
//   const fetchRoute = async (dropCoord: LocationType) => {
//     if (!pickupLocation) return;
//     try {
//       const url = `https://router.project-osrm.org/route/v1/driving/${pickupLocation.longitude},${pickupLocation.latitude};${dropCoord.longitude},${dropCoord.latitude}?overview=full&geometries=geojson`;
//       const res = await fetch(url);
//       const data = await res.json();
//       if (data.code === "Ok" && data.routes.length > 0) {
//         const coords = data.routes[0].geometry.coordinates.map(([lng, lat]: number[]) => ({ latitude: lat, longitude: lng }));
//         setRouteCoords(coords);
//         setDistance((data.routes[0].distance / 1000).toFixed(2) + " km");
//         setTravelTime(Math.round(data.routes[0].duration / 60) + " mins");
       
//         // Removed automatic showing of route details modal
//         // This will now only be shown when the user clicks BOOK RIDE
//       } else {
//         setApiError("Failed to fetch route");
//         Alert.alert("Route Error", "Could not find route. Please try different locations.");
//       }
//     } catch (err) {
//       console.error(err);
//       setRouteCoords([]);
//       setApiError("Network error fetching route");
//       Alert.alert("Route Error", "Failed to fetch route. Please check your internet connection.");
//     }
//   };

//   // Fetch suggestions
//   const fetchSuggestions = async (query: string, type: 'pickup' | 'dropoff'): Promise<SuggestionType[]> => {
//     try {
//       console.log(`Fetching suggestions for: ${query}`);
//       const cache = type === 'pickup' ? pickupCache : dropoffCache;
//       if (cache[query]) {
//         console.log(`Returning cached suggestions for: ${query}`);
//         return cache[query];
//       }
//       if (type === 'pickup') setPickupLoading(true);
//       else setDropoffLoading(true);
//       setSuggestionsError(null);
//       const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=5&addressdetails=1&countrycodes=IN`;
//       console.log(`API URL: ${url}`);
  
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
  
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       if (!Array.isArray(data)) throw new Error('Invalid response format');
  
//       const suggestions: SuggestionType[] = data.map((item: any) => ({
//         id: item.place_id || `${item.lat}-${item.lon}`,
//         name: item.display_name,
//         address: extractAddress(item),
//         lat: item.lat,
//         lon: item.lon,
//         type: item.type || 'unknown',
//         importance: item.importance || 0,
//       }));
//       if (type === 'pickup') setPickupCache(prev => ({ ...prev, [query]: suggestions }));
//       else setDropoffCache(prev => ({ ...prev, [query]: suggestions }));
//       return suggestions;
//     } catch (error: any) {
//       console.error('Suggestions fetch error:', error);
//       setSuggestionsError(error.message || 'Failed to fetch suggestions');
//       return [];
//     } finally {
//       if (type === 'pickup') setPickupLoading(false);
//       else setDropoffLoading(false);
//     }
//   };

//   // Extract address
//   const extractAddress = (item: any): string => {
//     if (item.address) {
//       const parts = [];
//       if (item.address.road) parts.push(item.address.road);
//       if (item.address.suburb) parts.push(item.address.suburb);
//       if (item.address.city || item.address.town || item.address.village) parts.push(item.address.city || item.address.town || item.address.village);
//       if (item.address.state) parts.push(item.address.state);
//       if (item.address.postcode) parts.push(item.address.postcode);
//       return parts.join(', ');
//     }
//     return item.display_name;
//   };

//   // Handle pickup change
//   const handlePickupChange = (text: string) => {
//     console.log(`handlePickupChange called with: "${text}"`);
//     propHandlePickupChange(text);
//     if (pickupDebounceTimer.current) {
//       clearTimeout(pickupDebounceTimer.current);
//       pickupDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setPickupLoading(true);
//       setShowPickupSuggestions(true);
//       pickupDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'pickup');
//         setPickupSuggestions(sugg);
//         setPickupLoading(false);
//       }, 500);
//     } else {
//       setShowPickupSuggestions(false);
//       setPickupSuggestions([]);
//     }
//   };

//   // Handle dropoff change
//   const handleDropoffChange = (text: string) => {
//     console.log(`handleDropoffChange called with: "${text}"`);
//     propHandleDropoffChange(text);
//     if (dropoffDebounceTimer.current) {
//       clearTimeout(dropoffDebounceTimer.current);
//       dropoffDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setDropoffLoading(true);
//       setShowDropoffSuggestions(true);
//       dropoffDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'dropoff');
//         setDropoffSuggestions(sugg);
//         setDropoffLoading(false);
//       }, 500);
//     } else {
//       setShowDropoffSuggestions(false);
//       setDropoffSuggestions([]);
//     }
//   };

//   // Select pickup suggestion
//   const selectPickupSuggestion = (suggestion: SuggestionType) => {
//     propHandlePickupChange(suggestion.name);
//     setPickupLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowPickupSuggestions(false);
//     setIsPickupCurrent(false);
//     if (dropoffLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     fetchNearbyDrivers(parseFloat(suggestion.lat), parseFloat(suggestion.lon));
//   };

//   // Select dropoff suggestion
//   const selectDropoffSuggestion = (suggestion: SuggestionType) => {
//     propHandleDropoffChange(suggestion.name);
//     setDropoffLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowDropoffSuggestions(false);
//     if (pickupLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//   };

//   // Update price
//   useEffect(() => {
//     const updatePrice = async () => {
//       if (pickupLocation && dropoffLocation && distance) {
//         const price = await calculatePrice();
//         setEstimatedPrice(price);
//       }
//     };
//     updatePrice();
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   // Update price again
//   useEffect(() => {
//     if (pickupLocation && dropoffLocation && distance) {
//       const price = calculatePrice();
//       setEstimatedPrice(price);
//     }
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   // Panel animation
//   useEffect(() => {
//     if (showPricePanel) {
//       Animated.timing(panelAnimation, {
//         toValue: 1,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     } else {
//       Animated.timing(panelAnimation, {
//         toValue: 0,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     }
//   }, [showPricePanel]);

//   // Fetch ride price
//   const fetchRidePrice = async (vehicleType: string, distance: number) => {
//     // Use ONLY dynamic prices from socket events
//     const pricePerKm = dynamicPrices[vehicleType];
//     // If dynamic prices are not set yet, wait for them
//     if (!pricePerKm || pricePerKm === 0) {
//       console.log(`⏳ Waiting for ${vehicleType} price from admin...`);
//       return 0;
//     }
//     const calculatedPrice = distance * pricePerKm;
//     console.log(`💰 Price calculation: ${distance}km ${vehicleType} × ₹${pricePerKm}/km = ₹${calculatedPrice}`);
//     return calculatedPrice;
//   };

//   // Calculate price
//   const calculatePrice = async (): Promise<number | null> => {
//     if (!pickupLocation || !dropoffLocation || !distance) {
//       console.log('❌ Missing location data for price calculation');
//       return null;
//     }
//     const distanceKm = parseFloat(distance);
//     // DEBUG: Print current prices before calculation
//     console.log('\n💰 PRICE CALCULATION DEBUG:');
//     console.log(`📏 Distance: ${distanceKm}km`);
//     console.log(`🚗 Vehicle Type: ${selectedRideType}`);
//     console.log(`🏍️ BIKE Price/km: ₹${dynamicPrices.bike}`);
//     console.log(`🚕 TAXI Price/km: ₹${dynamicPrices.taxi}`);
//     console.log(`🚛 PORT Price/km: ₹${dynamicPrices.port}`);
//     console.log('─────────────────────────────────────');
//     try {
//       const pricePerKm = dynamicPrices[selectedRideType];
  
//       console.log(`💰 Using price per km: ₹${pricePerKm} for ${selectedRideType}`);
//       // Wait for admin prices - NO TEMPORARY FALLBACK
//       if (!pricePerKm || pricePerKm === 0) {
//         console.log('⏳ Waiting for admin prices to be loaded...');
//         console.log('🚫 Booking blocked until prices are received from admin');
//         return null;
//       }
  
//       const calculatedPrice = distanceKm * pricePerKm;
//       const multiplier = wantReturn ? 2 : 1;
//       const finalPrice = Math.round(calculatedPrice * multiplier);
//       console.log(`✅ Final price calculated: ${distanceKm}km × ₹${pricePerKm}/km × ${multiplier} = ₹${finalPrice}`);
//       return finalPrice;
//     } catch (error) {
//       console.error('❌ Error calculating price:', error);
//       return null;
//     }
//   };

//   // Price update handler
//   useEffect(() => {
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received REAL-TIME price update from admin:', data);
  
//       // Update dynamic prices immediately
//       setDynamicPrices({
//         bike: data.bike,
//         taxi: data.taxi,
//         port: data.port,
//       });
  
//       // Log the new prices
//       console.log('🔄 PRICES UPDATED SUCCESSFULLY:');
//       console.log(`🏍️ BIKE: ₹${data.bike}/km`);
//       console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//       console.log(`🚛 PORT: ₹${data.port}/km`);
  
//       // Immediately recalculate price if a ride is being planned
//       if (pickupLocation && dropoffLocation && distance) {
//         console.log('🔄 Recalculating price with new admin rates...');
//         calculatePrice();
//       }
//     };

//     socket.on('priceUpdate', handlePriceUpdate);
//     return () => {
//       socket.off('priceUpdate', handlePriceUpdate);
//     };
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Request prices on component mount
//   useEffect(() => {
//     console.log('📡 Requesting current prices from admin...');
//     socket.emit('getCurrentPrices');
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received current prices:', data);
//       setDynamicPrices(data);
//     };
//     socket.on('currentPrices', handleCurrentPrices);
//     return () => {
//       socket.off('currentPrices', handleCurrentPrices);
//     };
//   }, []);

//   // Listen for real-time price updates
//   useEffect(() => {
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 REAL-TIME PRICE UPDATE:', data);
//       setDynamicPrices(data);
  
//       console.log('✅ PRICES UPDATED:');
//       console.log(`🏍️ BIKE: ₹${data.bike}/km`);
//       console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//       console.log(`🚛 PORT: ₹${data.port}/km`);
  
//       // Recalculate immediately
//       if (pickupLocation && dropoffLocation && distance) {
//         calculatePrice();
//       }
//     };

//     socket.on('priceUpdate', handlePriceUpdate);
//     return () => socket.off('priceUpdate', handlePriceUpdate);
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Price debugging and console logging
//   useEffect(() => {
//     console.log('💰 INITIALIZING PRICE DEBUGGING SYSTEM');
//     // Function to print current prices to console
//     const printCurrentPrices = () => {
//       console.log('\n🚗 ===== CURRENT RIDE PRICES =====');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${dynamicPrices.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${dynamicPrices.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${dynamicPrices.port}`);
//       console.log('=================================\n');
//     };
//     // Listen for price updates from admin
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 REAL-TIME PRICE UPDATE RECEIVED FROM ADMIN:', data);
  
//       // Update dynamic prices
//       setDynamicPrices({
//         bike: data.bike,
//         taxi: data.taxi,
//         port: data.port,
//       });
  
//       // Print updated prices to console
//       console.log('\n✅ ===== PRICES UPDATED SUCCESSFULLY =====');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//       console.log('=============================================\n');
  
//       // Recalculate price if needed
//       if (pickupLocation && dropoffLocation && distance) {
//         calculatePrice();
//       }
//     };
//     // Listen for initial prices when component mounts
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 RECEIVED CURRENT PRICES FROM SERVER:');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//       console.log('─────────────────────────────────────');
  
//       setDynamicPrices(data);
//     };
//     // Request current prices when component mounts
//     console.log('📡 Requesting current prices from server...');
//     socket.emit('getCurrentPrices');
//     // Set up event listeners
//     socket.on('priceUpdate', handlePriceUpdate);
//     socket.on('currentPrices', handleCurrentPrices);
//     socket.on('ridePricesUpdated', handlePriceUpdate); // Alternative event name
//     // Print initial prices
//     printCurrentPrices();
//     // Set up interval to periodically request prices (as backup)
//     const priceInterval = setInterval(() => {
//       console.log('🔄 Periodic price check...');
//       socket.emit('getCurrentPrices');
//       printCurrentPrices();
//     }, 30000); // Every 30 seconds
//     return () => {
//       // Clean up event listeners
//       socket.off('priceUpdate', handlePriceUpdate);
//       socket.off('currentPrices', handleCurrentPrices);
//       socket.off('ridePricesUpdated', handlePriceUpdate);
//       clearInterval(priceInterval);
//     };
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Request current prices on component mount
//   useEffect(() => {
//     console.log('📡 Requesting current prices from admin...');
//     // Request current prices when component mounts
//     socket.emit('getCurrentPrices');
//     // Also set up a listener for initial price response
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received current prices from admin:', data);
//       setDynamicPrices(data);
//     };
//     socket.on('currentPrices', handleCurrentPrices);
//     return () => {
//       socket.off('currentPrices', handleCurrentPrices);
//     };
//   }, []);

//   // Fetch initial prices
//   useEffect(() => {
//     const fetchInitialPrices = async () => {
//       try {
//         const bikeRate = await fetchRidePrice('bike', 1);
//         const taxiRate = await fetchRidePrice('taxi', 1);
//         const portRate = await fetchRidePrice('port', 1);
//         setDynamicPrices({
//           bike: bikeRate,
//           taxi: taxiRate,
//           port: portRate,
//         });
//         console.log(`BIKE: Today's price per km: ₹${bikeRate}`);
//         console.log(`TAXI: Today's price per km: ₹${taxiRate}`);
//         console.log(`PORT: Today's price per km: ₹${portRate}`);
//       } catch (error) {
//         console.error('❌ Error fetching initial prices:', error);
//         setDynamicPrices({
//           bike: 100,
//           taxi: 500,
//           port: 1000,
//         });
//         console.log(`BIKE: Today's price per km: ₹100 (fallback)`);
//         console.log(`TAXI: Today's price per km: ₹500 (fallback)`);
//         console.log(`PORT: Today's price per km: ₹1000 (fallback)`);
//       }
//     };
//     fetchInitialPrices();
//   }, []);

//   // Handle ride type select
//   const handleRideTypeSelect = async (type: string) => {
//     if (selectedRideType === type) return;
//     setSelectedRideType(type);
//     setShowPricePanel(true);
//     if (pickupLocation && dropoffLocation) {
//       const price = await calculatePrice();
//       setEstimatedPrice(price);
//     }
//     if (location) fetchNearbyDrivers(location.latitude, location.longitude);
//   };

//   // Handle book ride
//   const handleBookRide = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
    
//     // Show route details modal before booking
//     setShowRouteDetailsModal(true);
//   };

//   // Handle confirm booking after route details
//   const handleConfirmBookingFromModal = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
    
//     const price = await calculatePrice(); // Use async price calculation
//     if (!price) {
//       Alert.alert('Error', 'Price calculation failed. Please try again.');
//       return;
//     }
    
//     try {
//       setIsBooking(true);
  
//       const token = await AsyncStorage.getItem('authToken');
//       if (!token) {
//         Alert.alert('Authentication Error', 'Please log in to book a ride');
//         setIsBooking(false);
//         return;
//       }
//       if (!pickupLocation || !dropoffLocation) {
//         Alert.alert('Error', 'Please select both pickup and dropoff locations');
//         setIsBooking(false);
//         return;
//       }
//       if (!estimatedPrice) {
//         Alert.alert('Error', 'Price calculation failed. Please try again.');
//         setIsBooking(false);
//         return;
//       }
//       const userId = await AsyncStorage.getItem('userId');
//       const customerId = (await AsyncStorage.getItem('customerId')) || 'U001';
//       const userName = await AsyncStorage.getItem('userName');
//       const userMobile = await AsyncStorage.getItem('userMobile');
//       let otp;
//       if (customerId && customerId.length >= 4) {
//         otp = customerId.slice(-4);
//       } else {
//         otp = Math.floor(1000 + Math.random() * 9000).toString();
//       }
//       setRideStatus('searching');
//       setBookedAt(new Date());
//       console.log('📋 User Details:', {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup,
//         dropoff,
//         selectedRideType,
//         otp
//       });
//       const rideData = {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup: {
//           lat: pickupLocation.latitude,
//           lng: pickupLocation.longitude,
//           address: pickup,
//         },
//         drop: {
//           lat: dropoffLocation.latitude,
//           lng: dropoffLocation.longitude,
//           address: dropoff,
//         },
//         vehicleType: selectedRideType,
//         otp,
//         estimatedPrice,
//         distance,
//         travelTime,
//         wantReturn,
//         token
//       };
//       socket.emit('bookRide', rideData, (response) => {
//         setIsBooking(false);
    
//         if (response && response.success) {
//           setCurrentRideId(response.rideId);
//           AsyncStorage.setItem('bookedAt', new Date().toISOString());
//           setBookingOTP(response.otp);
//           setShowConfirmModal(true);
//           setRideStatus('searching');
//           console.log('✅ Ride booked successfully:', response);
//         } else {
//           Alert.alert('Booking Failed', response?.message || 'Failed to book ride');
//           setRideStatus('idle');
//           setCurrentRideId(null);
//         }
//       });
//     } catch (error) {
//       setIsBooking(false);
//       console.error('Booking error:', error);
//       Alert.alert('Booking Failed', 'An unexpected error occurred. Please try again.');
//       setRideStatus('idle');
//       setCurrentRideId(null);
//     }
//   };

//   // Fetch user data
//   useEffect(() => {
//     const fetchUserData = async () => {
//       try {
//         const token = await AsyncStorage.getItem('authToken');
//         if (!token) return;
//         const backendUrl = getBackendUrl();
//         const response = await axios.get(`${backendUrl}/api/users/profile`, {
//           headers: { Authorization: `Bearer ${token}` }
//         });
    
//         const userProfile = response.data;
    
//         console.log('📋 User Profile:', userProfile);
    
//         const userMobile = userProfile.mobile ||
//                            userProfile.phone ||
//                            userProfile.phoneNumber ||
//                            userProfile.mobileNumber ||
//                            '';
//         await AsyncStorage.setItem('userId', userProfile._id);
//         await AsyncStorage.setItem('customerId', userProfile.customerId || userProfile._id);
//         await AsyncStorage.setItem('userName', userProfile.name || userProfile.username);
//         await AsyncStorage.setItem('userMobile', userProfile.phoneNumber);
//         await AsyncStorage.setItem('userAddress', userProfile.address || '');
    
//       } catch (error) {
//         console.error('Error fetching user data:', error);
//       }
//     };
//     fetchUserData();
//   }, []);

//   // Handle ride created
//   useEffect(() => {
//     const handleRideCreated = (data) => {
//       console.log('Ride created event received:', data);
//       if (data.success) {
//         if (data.rideId && !currentRideId) {
//           setCurrentRideId(data.rideId);
//         }
    
//         AsyncStorage.setItem('lastRideId', data.rideId || currentRideId || '');
    
//         setBookingOTP(data.otp);
//         setShowConfirmModal(true);
//         setRideStatus("searching");
//       } else if (data.message) {
//         Alert.alert("Booking Failed", data.message || "Failed to book ride");
//         setRideStatus("idle");
//         setCurrentRideId(null);
//       }
//     };
//     socket.on("rideCreated", handleRideCreated);
//     return () => {
//       socket.off("rideCreated", handleRideCreated);
//     };
//   }, [currentRideId]);

//   // Handle confirm booking
//   const handleConfirmBooking = async () => {
//     console.log('Confirming booking with OTP:', bookingOTP);
//     console.log('Current Ride ID:', currentRideId);
//     let rideIdToUse = currentRideId;
//     if (!rideIdToUse) {
//       rideIdToUse = await AsyncStorage.getItem('currentRideId');
//       console.log('🔄 Using rideId from storage:', rideIdToUse);
//     }
//     if (!rideIdToUse) {
//       Alert.alert("Error", "Invalid booking state. Please try booking again.");
//       setShowConfirmModal(false);
//       return;
//     }
//     setCurrentRideId(rideIdToUse);
//     setRideStatus("searching"); // Change to "searching" first
//     setShowConfirmModal(false);
//     console.log('🚀 Waiting for driver to accept ride:', rideIdToUse);
//     // Start polling for ride status updates
//     const statusPollInterval = setInterval(() => {
//       if (currentRideId) {
//         socket.emit('getRideStatus', { rideId: currentRideId });
//       }
//     }, 5000); // Poll every 5 seconds
//     AsyncStorage.setItem('statusPollInterval', statusPollInterval.toString());
//   };

//   // Render vehicle icon
//   const renderVehicleIcon = (type: 'bike' | 'taxi' | 'port', size: number = 24, color: string = '#000000') => {
//     try {
//       switch (type) {
//         case 'bike': return <BikeIcon width={size} height={size} fill={color} />;
//         case 'taxi': return <TaxiIcon width={size} height={size} fill={color} />;
//         case 'port': return <LorryIcon width={size} height={size} fill={color} />;
//         default: return <TaxiIcon width={size} height={size} fill={color} />;
//       }
//     } catch (error) {
//       return <TaxiIcon width={size} height={size} fill={color} />;
//     }
//   };

//   // Render suggestion item
//   const renderSuggestionItem = (item: SuggestionType, onSelect: () => void, key: string) => {
//     let iconName = 'location-on';
//     let iconColor = '#A9A9A9';
//     if (item.type.includes('railway') || item.type.includes('station')) { iconName = 'train'; iconColor = '#3F51B5'; }
//     else if (item.type.includes('airport')) { iconName = 'flight'; iconColor = '#2196F3'; }
//     else if (item.type.includes('bus')) { iconName = 'directions-bus'; iconColor = '#FF9800'; }
//     else if (item.type.includes('hospital')) { iconName = 'local-hospital'; iconColor = '#F44336'; }
//     else if (item.type.includes('school') || item.type.includes('college')) { iconName = 'school'; iconColor = '#4CAF50'; }
//     else if (item.type.includes('place_of_worship')) { iconName = 'church'; iconColor = '#9C27B0'; }
//     else if (item.type.includes('shop') || item.type.includes('mall')) { iconName = 'shopping-mall'; iconColor = '#E91E63'; }
//     else if (item.type.includes('park')) { iconName = 'park'; iconColor = '#4CAF50'; }
//     return (
//       <TouchableOpacity key={key} style={styles.suggestionItem} onPress={onSelect}>
//         <MaterialIcons name={iconName as any} size={20} color={iconColor} style={styles.suggestionIcon} />
//         <View style={styles.suggestionTextContainer}>
//           <Text style={styles.suggestionMainText} numberOfLines={1}>{extractMainName(item.name)}</Text>
//           <Text style={styles.suggestionSubText} numberOfLines={1}>{item.address}</Text>
//         </View>
//       </TouchableOpacity>
//     );
//   };

//   // Extract main name
//   const extractMainName = (fullName: string): string => {
//     const parts = fullName.split(',');
//     return parts[0].trim();
//   };

//   // Check if book ride button is enabled
//   const isBookRideButtonEnabled = pickup && dropoff && selectedRideType && estimatedPrice !== null;

//   // Reverse geocode
//   const reverseGeocode = async (lat: number, lon: number): Promise<string | null> => {
//     try {
//       const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1&countrycodes=IN`;
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       return data.display_name || null;
//     } catch (error) {
//       console.error('Reverse geocode error:', error);
//       return null;
//     }
//   };

//   // Handle region change complete
//   const handleRegionChangeComplete = async (region: Region, isPickup: boolean) => {
//     if (regionChangeTimer.current) {
//       clearTimeout(regionChangeTimer.current);
//     }
//     regionChangeTimer.current = setTimeout(async () => {
//       const addr = await reverseGeocode(region.latitude, region.longitude);
//       if (addr) {
//         if (isPickup) {
//           propHandlePickupChange(addr);
//           setPickupLocation({ latitude: region.latitude, longitude: region.longitude });
//           setIsPickupCurrent(false);
//           if (dropoffLocation) fetchRoute(dropoffLocation);
//           fetchNearbyDrivers(region.latitude, region.longitude);
//         } else {
//           propHandleDropoffChange(addr);
//           setDropoffLocation({ latitude: region.latitude, longitude: region.longitude });
//           if (pickupLocation) fetchRoute({ latitude: region.latitude, longitude: region.longitude });
//         }
//       }
//     }, 500);
//   };

//   // Handle cancel button
//   const handleCancel = () => {
//     // Reset all states
//     setPickupLocation(null);
//     setDropoffLocation(null);
//     setRouteCoords([]);
//     setDistance('');
//     setTravelTime('');
//     setEstimatedPrice(null);
//     propHandlePickupChange('');
//     propHandleDropoffChange('');
//     setShowPickupSelector(false);
//     setShowDropoffSelector(false);
//     setShowRideOptions(false);
//   };

//   // Handle cancel ride during searching
//   const handleCancelRide = () => {
//     if (currentRideId) {
//       socket.emit('cancelRide', { rideId: currentRideId });
//     }
//     setRideStatus("idle");
//     setCurrentRideId(null);
//     setShowConfirmModal(false);
//     // Clear polling interval
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Clear acceptance timeout if any
//     AsyncStorage.getItem('acceptanceTimeout').then(id => {
//       if (id) {
//         clearTimeout(parseInt(id));
//         AsyncStorage.removeItem('acceptanceTimeout');
//       }
//     });
//     AsyncStorage.removeItem('currentRideId');
//     AsyncStorage.removeItem('bookedAt');
//     setBookedAt(null);
//     Alert.alert("Ride Cancelled", "Your ride booking has been cancelled.");
//   };

//   // Handle ride cancelled from server
//   useEffect(() => {
//     const handleRideCancelled = (data: { rideId: string }) => {
//       if (data.rideId === currentRideId) {
//         setRideStatus("idle");
//         setCurrentRideId(null);
//         Alert.alert("Ride Cancelled", "Your ride has been cancelled.");
//       }
//     };
//     socket.on("rideCancelled", handleRideCancelled);
//     return () => socket.off("rideCancelled", handleRideCancelled);
//   }, [currentRideId]);

//   return (
//     <View style={styles.container}>
//       {isLoadingLocation ? (
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#4CAF50" />
//           <Text style={styles.loadingText}>Fetching your location...</Text>
//         </View>
//       ) : (
//         <>
//           <View style={styles.mapContainer}>
//             {location && (
//               <MapView
//                 ref={mapRef}
//                 style={styles.map}
//                 initialRegion={{
//                   latitude: location.latitude,
//                   longitude: location.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => {
//                   if (showPickupSelector)
//                     handleRegionChangeComplete(region, true);
//                   else if (showDropoffSelector)
//                     handleRegionChangeComplete(region, false);
//                 }}
//                 showsUserLocation
//               >
//                 {/* Pickup & Drop markers */}
//                 {pickupLocation && (
//                   <Marker
//                     coordinate={pickupLocation}
//                     title="Pickup"
//                     pinColor="blue"
//                   />
//                 )}
//                 {dropoffLocation && (
//                   <Marker
//                     coordinate={dropoffLocation}
//                     title="Dropoff"
//                     pinColor="red"
//                   />
//                 )}
//                 {/* Driver marker */}
//                 {driverLocation && (
//                   <Marker
//                     coordinate={driverLocation}
//                     title="Driver"
//                     key={`driver-${driverLocation.latitude}-${driverLocation.longitude}`}
//                   >
//                     <View style={styles.driverMarkerContainer}>
//                       <View
//                         style={[
//                           styles.vehicleIconContainer,
//                           {
//                             backgroundColor:
//                               rideStatus === "onTheWay" ||
//                               rideStatus === "arrived" ||
//                               rideStatus === "started"
//                                 ? "#FF6B00"
//                                 : "#4CAF50",
//                           },
//                         ]}
//                       >
//                         {renderVehicleIcon(selectedRideType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                       </View>
//                     </View>
//                   </Marker>
//                 )}
//                 {/* Nearby Drivers */}
//                 {(rideStatus === "idle" || rideStatus === "searching") &&
//                   nearbyDrivers &&
//                   nearbyDrivers.length > 0 &&
//                   nearbyDrivers.map((driver) => (
//                     <Marker
//                       key={`nearby-${driver.driverId}-${driver.location.coordinates[1]}-${driver.location.coordinates[0]}`}
//                       coordinate={{
//                         latitude: driver.location.coordinates[1],
//                         longitude: driver.location.coordinates[0],
//                       }}
//                       title={`${driver.name} (${driver.status || "Live"})`}
//                     >
//                       <View style={styles.driverMarkerContainer}>
//                         <View style={styles.vehicleIconContainer}>
//                           {renderVehicleIcon(driver.vehicleType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                         </View>
//                       </View>
//                     </Marker>
//                   ))}
//                 {/* Route polyline */}
//                 {routeCoords && routeCoords.length > 0 && (
//                   <Polyline
//                     coordinates={routeCoords}
//                     strokeWidth={5}
//                     strokeColor="#4CAF50"
//                   />
//                 )}
//               </MapView>
//             )}
        
//             {/* Center Pin when selecting */}
//             {(showPickupSelector || showDropoffSelector) && (
//               <View style={styles.centerMarker}>
//                 <MaterialIcons
//                   name="location-pin"
//                   size={48}
//                   color={showPickupSelector ? '#4CAF50' : '#F44336'}
//                 />
//               </View>
//             )}
        
//             {/* Driver count display based on ride status */}
//             {(rideStatus === "idle" || rideStatus === "searching") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Available Drivers Nearby: {nearbyDriversCount}
//                 </Text>
//               </View>
//             )}
//             {/* Active ride: Show driver status */}
//             {(rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Your Driver is on the way
//                 </Text>
//               </View>
//             )}
//           </View>
         
//           {/* Driver Info Section */}
//           {acceptedDriver && (
//             <View style={styles.driverInfoContainer}>
//               <Text style={styles.driverInfoTitle}>Your Driver</Text>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="person" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.name}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="phone" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.driverMobile || 'N/A'}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="directions-car" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.vehicleType}</Text>
//               </View>
//             </View>
//           )}
         
//           {/* Status Indicator */}
//           {rideStatus === "onTheWay" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Driver is on the way
//                 {driverLocation && pickupLocation && (
//                   <Text style={styles.distanceText}>
//                     {"\n"}Estimated arrival: {calculateDistance(
//                       pickupLocation.latitude,
//                       pickupLocation.longitude,
//                       driverLocation.latitude,
//                       driverLocation.longitude
//                     ).toFixed(1)} km away
//                   </Text>
//                 )}
//               </Text>
//             </View>
//           )}
//           {rideStatus === "arrived" && (
//             <View style={[styles.driversCountOverlay, { backgroundColor: '#4CAF50' }]}>
//               <Text style={[styles.driversCountText, { color: '#FFFFFF' }]}>
//                 🎉 Driver Has Arrived!
//               </Text>
//             </View>
//           )}
//           {rideStatus === "started" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Ride in Progress...
//               </Text>
//             </View>
//           )}
         
//           {/* Input Container - Hide when not idle */}
//           {rideStatus === "idle" && (
//             <View style={styles.inputContainer}>
//               <View style={styles.inputRow}>
//                 <View style={styles.inputWrapper}>
//                   <View style={styles.inputIconContainer}>
//                     <MaterialIcons name="my-location" size={20} color="#4CAF50" />
//                   </View>
//                   <TextInput
//                     style={styles.input}
//                     placeholder="Enter pickup location"
//                     value={pickup}
//                     onChangeText={handlePickupChange}
//                     placeholderTextColor="#999"
//                   />
//                 </View>
//                 <TouchableOpacity
//                   style={styles.selectMapButton}
//                   onPress={() => {
//                     setShowPickupSelector((prev) => !prev);
//                     setShowDropoffSelector(false);
//                   }}
//                 >
//                   <Text style={styles.selectMapButtonText}>
//                     {showPickupSelector ? 'Done' : 'Select on Map'}
//                   </Text>
//                 </TouchableOpacity>
//               </View>
          
//               {showPickupSuggestions && (
//                 <View style={styles.suggestionsContainer}>
//                   {pickupLoading ? (
//                     <View style={styles.loadingContainer}>
//                       <ActivityIndicator size="small" color="#4CAF50" />
//                       <Text style={styles.loadingText}>Loading suggestions...</Text>
//                     </View>
//                   ) : suggestionsError ? (
//                     <View style={styles.errorContainer}>
//                       <Text style={styles.errorText}>{suggestionsError}</Text>
//                     </View>
//                   ) : pickupSuggestions.length > 0 ? (
//                     pickupSuggestions.map((item) => (
//                       renderSuggestionItem(item, () => selectPickupSuggestion(item), item.id)
//                     ))
//                   ) : (
//                     <View style={styles.noSuggestionsContainer}>
//                       <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                     </View>
//                   )}
//                 </View>
//               )}
          
//               <View style={styles.inputRow}>
//                 <View style={styles.inputWrapper}>
//                   <View style={styles.inputIconContainer}>
//                     <MaterialIcons name="place" size={20} color="#F44336" />
//                   </View>
//                   <TextInput
//                     style={styles.input}
//                     placeholder="Enter dropoff location"
//                     value={dropoff}
//                     onChangeText={handleDropoffChange}
//                     placeholderTextColor="#999"
//                   />
//                 </View>
//                 <TouchableOpacity
//                   style={styles.selectMapButton}
//                   onPress={() => {
//                     setShowDropoffSelector((prev) => !prev);
//                     setShowPickupSelector(false);
//                   }}
//                 >
//                   <Text style={styles.selectMapButtonText}>
//                     {showDropoffSelector ? 'Done' : 'Select on Map'}
//                   </Text>
//                 </TouchableOpacity>
//               </View>
          
//               {showDropoffSuggestions && (
//                 <View style={styles.suggestionsContainer}>
//                   {dropoffLoading ? (
//                     <View style={styles.loadingContainer}>
//                       <ActivityIndicator size="small" color="#4CAF50" />
//                       <Text style={styles.loadingText}>Loading suggestions...</Text>
//                     </View>
//                   ) : suggestionsError ? (
//                     <View style={styles.errorContainer}>
//                       <Text style={styles.errorText}>{suggestionsError}</Text>
//                     </View>
//                   ) : dropoffSuggestions.length > 0 ? (
//                     dropoffSuggestions.map((item) => (
//                       renderSuggestionItem(item, () => selectDropoffSuggestion(item), item.id)
//                     ))
//                   ) : (
//                     <View style={styles.noSuggestionsContainer}>
//                       <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                     </View>
//                   )}
//                 </View>
//               )}
//             </View>
//           )}
      
//           {/* API Error */}
//           {apiError && (
//             <View style={styles.errorContainer}>
//               <Text style={styles.errorText}>{apiError}</Text>
//             </View>
//           )}
         
//           {/* Cancel and Book Ride Buttons - Hide when not idle */}
//           {rideStatus === "idle" && (
//             <View style={styles.actionButtonsContainer}>
//               <TouchableOpacity
//                 style={styles.cancelButton}
//                 onPress={handleCancel}
//               >
//                 <Text style={styles.cancelButtonText}>CANCEL</Text>
//               </TouchableOpacity>
//               <TouchableOpacity
//                 style={[
//                   styles.bookRideButton,
//                   isBookRideButtonEnabled ? styles.enabledBookRideButton : styles.disabledBookRideButton,
//                 ]}
//                 onPress={handleBookRide}
//                 disabled={!isBookRideButtonEnabled}
//               >
//                 <Text style={styles.bookRideButtonText}>BOOK RIDE</Text>
//               </TouchableOpacity>
//             </View>
//           )}

// {/* Route Details Modal */}
// <Modal
//   animationType="slide"
//   transparent={true}
//   visible={showRouteDetailsModal}
//   onRequestClose={() => setShowRouteDetailsModal(false)}
// >
//   <View style={styles.routeDetailsModalOverlay}>
//     <View style={styles.routeDetailsModalContainer}>
//       <View style={styles.routeDetailsModalHeader}>
//         <Text style={styles.routeDetailsModalTitle}>RIDE DETAILS</Text>
//         <TouchableOpacity onPress={() => setShowRouteDetailsModal(false)}>
//           <MaterialIcons name="close" size={24} color="#333" />
//         </TouchableOpacity>
//       </View>
     
//       <ScrollView style={styles.routeDetailsContent} showsVerticalScrollIndicator={false}>
//         <View style={styles.routeDetailsRow}>
//           <Text style={styles.routeDetailsLabel}>DISTANCE:</Text>
//           <Text style={styles.routeDetailsValue}>{distance || '---'}</Text>
//         </View>
//         <View style={styles.routeDetailsRow}>
//           <Text style={styles.routeDetailsLabel}>TRAVEL TIME:</Text>
//           <Text style={styles.routeDetailsValue}>{travelTime || '---'}</Text>
//         </View>
       
//         <View style={styles.routeDetailsDivider} />
       
//         <Text style={styles.availableDriversText}>Available Drivers Nearby: {nearbyDriversCount}</Text>
       
//         <View style={styles.rideOptionsContainer}>
//           {/* Porter Option */}
//           <TouchableOpacity
//             style={[
//               styles.rideOptionButton,
//               selectedRideType === 'port' && styles.selectedRideOptionButton,
//             ]}
//             onPress={() => {
//               setSelectedRideType('port');
//             }}
//           >
//             <View style={styles.rideOptionIconContainer}>
//               <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//             </View>
//             <View style={styles.rideOptionInfoContainer}>
//               <Text style={[
//                 styles.rideOptionTypeText,
//                 selectedRideType === 'port' && styles.selectedRideOptionTypeText,
//               ]}>CarGo Porter</Text>
//               <Text style={[
//                 styles.rideOptionDetailsText,
//                 selectedRideType === 'port' && styles.selectedRideOptionDetailsText,
//               ]}>Max 5 ton</Text>
//               <Text style={styles.rideOptionPriceText}>
//                 {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//               </Text>
//             </View>
//           </TouchableOpacity>
         
//           {/* Taxi Option */}
//           <TouchableOpacity
//             style={[
//               styles.rideOptionButton,
//               selectedRideType === 'taxi' && styles.selectedRideOptionButton,
//             ]}
//             onPress={() => {
//               setSelectedRideType('taxi');
//             }}
//           >
//             <View style={styles.rideOptionIconContainer}>
//               <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//             </View>
//             <View style={styles.rideOptionInfoContainer}>
//               <Text style={[
//                 styles.rideOptionTypeText,
//                 selectedRideType === 'taxi' && styles.selectedRideOptionTypeText,
//               ]}>Taxi</Text>
//               <Text style={[
//                 styles.rideOptionDetailsText,
//                 selectedRideType === 'taxi' && styles.selectedRideOptionDetailsText,
//               ]}>4 seats</Text>
//               <Text style={styles.rideOptionPriceText}>
//                 {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//               </Text>
//             </View>
//           </TouchableOpacity>
         
//           {/* Bike Option */}
//           <TouchableOpacity
//             style={[
//               styles.rideOptionButton,
//               selectedRideType === 'bike' && styles.selectedRideOptionButton,
//             ]}
//             onPress={() => {
//               setSelectedRideType('bike');
//             }}
//           >
//             <View style={styles.rideOptionIconContainer}>
//               <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//             </View>
//             <View style={styles.rideOptionInfoContainer}>
//               <Text style={[
//                 styles.rideOptionTypeText,
//                 selectedRideType === 'bike' && styles.selectedRideOptionTypeText,
//               ]}>Motorcycle</Text>
//               <Text style={[
//                 styles.rideOptionDetailsText,
//                 selectedRideType === 'bike' && styles.selectedRideOptionDetailsText,
//               ]}>1 person</Text>
//               <Text style={styles.rideOptionPriceText}>
//                 {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//               </Text>
//             </View>
//           </TouchableOpacity>
//         </View>
//       </ScrollView>
     
//       <View style={styles.routeDetailsModalButtons}>
//         <TouchableOpacity
//           style={styles.routeDetailsCancelButton}
//           onPress={() => setShowRouteDetailsModal(false)}
//         >
//           <Text style={styles.routeDetailsCancelButtonText}>CANCEL</Text>
//         </TouchableOpacity>
//         <TouchableOpacity
//           style={styles.routeDetailsConfirmButton}
//           onPress={() => {
//             setShowRouteDetailsModal(false);
//             handleConfirmBookingFromModal();
//           }}
//         >
//           <Text style={styles.routeDetailsConfirmButtonText}>BOOK RIDE</Text>
//         </TouchableOpacity>
//       </View>
//     </View>
//   </View>
// </Modal>
         
//           {/* Ride Details Modal - New modal matching the screenshot */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showRideOptions && !showRouteDetailsModal}
//             onRequestClose={() => setShowRideOptions(false)}
//           >
//             <View style={styles.rideDetailsModalOverlay}>
//               <View style={styles.rideDetailsModalContainer}>
//                 <View style={styles.rideDetailsHeader}>
//                   <Text style={styles.rideDetailsTitle}>RIDE DETAILS</Text>
//                   <TouchableOpacity onPress={() => setShowRideOptions(false)}>
//                     <MaterialIcons name="close" size={24} color="#333" />
//                   </TouchableOpacity>
//                 </View>
               
//                 <ScrollView style={styles.rideDetailsContent} showsVerticalScrollIndicator={false}>
//                   <View style={styles.rideDetailsSection}>
//                     <Text style={styles.rideDetailsSectionTitle}>Pickup Location</Text>
//                     <Text style={styles.rideDetailsLocationText}>{pickup || '---'}</Text>
//                   </View>
                 
//                   <View style={styles.rideDetailsSection}>
//                     <Text style={styles.rideDetailsSectionTitle}>Drop-off</Text>
//                     <Text style={styles.rideDetailsLocationText}>{dropoff || '---'}</Text>
//                   </View>
                 
//                   <View style={styles.rideDetailsRow}>
//                     <Text style={styles.rideDetailsLabel}>Distance:</Text>
//                     <Text style={styles.rideDetailsValue}>{distance || '---'}</Text>
//                   </View>
                 
//                   <View style={styles.rideDetailsRow}>
//                     <Text style={styles.rideDetailsLabel}>Price:</Text>
//                     <Text style={styles.rideDetailsValue}>₹{estimatedPrice || '---'}</Text>
//                   </View>
                 
//                   <View style={styles.rideDetailsRow}>
//                     <Text style={styles.rideDetailsLabel}>Return trip:</Text>
//                     <Switch
//                       value={wantReturn}
//                       onValueChange={setWantReturn}
//                       trackColor={{ false: '#767577', true: '#4CAF50' }}
//                       thumbColor={wantReturn ? '#FFFFFF' : '#f4f3f4'}
//                     />
//                   </View>
//                 </ScrollView>
               
//                 <View style={styles.rideDetailsButtons}>
//                   <TouchableOpacity
//                     style={styles.bookMyRideButton}
//                     onPress={handleBookRide}
//                     disabled={!isBookRideButtonEnabled}
//                   >
//                     <Text style={styles.bookMyRideButtonText}>BOOK MY RIDE</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
      
//           {/* Confirm Modal */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showConfirmModal}
//             onRequestClose={() => setShowConfirmModal(false)}
//           >
//             <View style={styles.modalOverlay}>
//               <View style={styles.modalContainer}>
//                 <View style={styles.modalHeader}>
//                   <Text style={styles.modalTitle}>Confirm Booking</Text>
//                   <TouchableOpacity onPress={() => setShowConfirmModal(false)}>
//                     <MaterialIcons name="close" size={24} color="#666" />
//                   </TouchableOpacity>
//                 </View>
//                 <View style={styles.modalContent}>
//                   <View style={styles.modalIconContainer}>
//                     <Ionicons name="checkmark-circle" size={60} color="#4CAF50" />
//                   </View>
//                   <Text style={styles.modalMessage}>
//                     Thank you for choosing EAZY GO!
//                   </Text>
//                   <Text style={styles.modalSubMessage}>
//                     Your ride has been successfully booked.
//                   </Text>
//                   <View style={styles.otpContainer}>
//                     <Text style={styles.otpLabel}>Your pickup OTP is:</Text>
//                     <Text style={styles.otpValue}>{bookingOTP}</Text>
//                   </View>
//                   <Text style={styles.otpWarning}>
//                     Please don't share it with anyone. Only share with our driver.
//                   </Text>
//                 </View>
//                 <View style={styles.modalButtons}>
//                   <TouchableOpacity
//                     style={styles.modalCancelButton}
//                     onPress={() => setShowConfirmModal(false)}
//                   >
//                     <Text style={styles.modalCancelButtonText}>Cancel</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={styles.modalConfirmButton}
//                     onPress={handleConfirmBooking}
//                   >
//                     <Text style={styles.modalConfirmButtonText}>Confirm</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>

//           {/* Searching Overlay - Matches Figma design */}
//           {rideStatus === "searching" && (
//             <View style={styles.searchingOverlay}>
//               <Image
//                 source={require('../../../assets/logo4.png')}
//                 style={styles.searchingLogo}
//               />
//               <View style={styles.illustrationContainer}>
//                 <FontAwesome5 name="taxi" size={50} color="#FFD700" />
//                 {/* Simple green line for illustration */}
//                 <View style={styles.searchLine} />
//               </View>
//               <ActivityIndicator size="large" color="#4CAF50" style={styles.progressBar} />
//               <Text style={styles.searchingMessage}>PLEASE HOLD! WE ARE SEARCHING FOR NEARBY DRIVER FOR YOU.</Text>
//               <TouchableOpacity style={styles.cancelRideButton} onPress={handleCancelRide}>
//                 <Text style={styles.cancelRideButtonText}>Cancel Ride</Text>
//               </TouchableOpacity>
//             </View>
//           )}
//         </>
//       )}
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: { flex: 1, backgroundColor: '#F5F5F5' },
//   loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
//   loadingText: { color: '#757575', fontSize: 16, marginTop: 10 },
//   mapContainer: {
//     height: Dimensions.get('window').height * 0.6, // 60% of screen
//     width: '100%',
//     borderRadius: 15,
//     overflow: 'hidden',
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   map: { ...StyleSheet.absoluteFillObject },
//   centerMarker: {
//     position: 'absolute',
//     top: '50%',
//     left: '50%',
//     transform: [{ translateX: -24 }, { translateY: -48 }],
//     zIndex: 10,
//   },
//   driversCountOverlay: {
//     position: 'absolute',
//     top: 10,
//     left: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     paddingHorizontal: 12,
//     paddingVertical: 8,
//     borderRadius: 20,
//     elevation: 2,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.2,
//     shadowRadius: 2
//   },
//   driversCountText: { fontSize: 14, fontWeight: '600', color: '#333333' },
//   driverInfoContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   driverInfoTitle: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#333333',
//     marginBottom: 10
//   },
//   driverDetailsRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   driverDetailText: {
//     fontSize: 14,
//     color: '#555555',
//     marginLeft: 10
//   },
//   statusContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   statusIndicator: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   statusText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#4CAF50',
//     marginLeft: 10
//   },
//   statusSubText: {
//     fontSize: 14,
//     color: '#757575',
//     textAlign: 'center'
//   },
//   inputContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   inputRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   inputWrapper: {
//     flex: 1,
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingHorizontal: 15,
//     paddingVertical: 5,
//   },
//   inputIconContainer: {
//     marginRight: 10,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   distanceText: {
//     fontSize: 12,
//     fontWeight: 'normal',
//     color: '#666666',
//   },
//   input: { flex: 1, fontSize: 16, paddingVertical: 12, color: '#333' },
//   selectMapButton: {
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     backgroundColor: '#4CAF50',
//     borderRadius: 5,
//     marginRight: 10,
//   },
//   selectMapButtonText: {
//     color: '#FFFFFF',
//     fontSize: 12,
//   },
//   suggestionsContainer: {
//     marginTop: 5,
//     marginHorizontal: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 8,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     maxHeight: 200
//   },
//   suggestionItem: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingVertical: 12,
//     paddingHorizontal: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   suggestionIcon: { marginRight: 12 },
//   suggestionTextContainer: { flex: 1 },
//   suggestionMainText: { fontSize: 16, fontWeight: '500', color: '#333333' },
//   suggestionSubText: { fontSize: 12, color: '#757575', marginTop: 2 },
//   noSuggestionsContainer: { paddingVertical: 12, alignItems: 'center' },
//   noSuggestionsText: { fontSize: 14, color: '#666666' },
//   distanceTimeContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   distanceTimeItem: { flexDirection: 'row', alignItems: 'center' },
//   distanceTimeLabel: { fontSize: 14, fontWeight: '600', color: '#757575', marginLeft: 8 },
//   distanceTimeValue: { fontSize: 14, fontWeight: 'bold', color: '#333333', marginLeft: 5 },
//   rideTypeContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//   },
//   rideTypeButton: {
//     width: '100%',
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 5,
//     marginBottom: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   selectedRideTypeButton: {
//     backgroundColor: '#4caf50',
//     borderWidth: 2,
//     borderColor: '#4caf50'
//   },
//   rideIconContainer: {
//     marginRight: 15,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideInfoContainer: {
//     flex: 1,
//   },
//   rideTypeText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 4,
//   },
//   selectedRideTypeText: {
//     color: '#FFFFFF'
//   },
//   rideDetailsText: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 6,
//   },
//   selectedRideDetailsText: {
//     color: '#FFFFFF'
//   },
//   ridePriceText: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   checkmarkContainer: {
//     justifyContent: 'center',
//     alignItems: 'center',
//     paddingLeft: 10,
//   },
//   // New styles for action buttons
//   actionButtonsContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 20,
//   },
//   cancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     marginRight: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   cancelButtonText: {
//     color: '#666666',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   bookRideButton: {
//     flex: 1,
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     marginLeft: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   enabledBookRideButton: { backgroundColor: '#4caf50' },
//   disabledBookRideButton: { backgroundColor: '#BDBDBD' },
//   bookRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   errorContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFEBEE',
//     borderRadius: 12,
//     padding: 15,
//     borderLeftWidth: 4,
//     borderLeftColor: '#F44336'
//   },
//   errorText: {
//     color: '#D32F2F',
//     fontSize: 14,
//     textAlign: 'center'
//   },
//   pricePanel: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     padding: 20,
//     maxHeight: Dimensions.get('window').height * 0.45,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   panelHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//     paddingBottom: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   panelTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   priceDetailsContainer: {
//     flexDirection: 'row',
//     marginBottom: 8
//   },
//   driverMarkerContainer: {
//     alignItems: 'center',
//     justifyContent: 'center',
//     width: 50,
//     height: 50,
//   },
//   vehicleIconContainer: {
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     backgroundColor: '#4CAF50',
//     alignItems: 'center',
//     justifyContent: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   priceInfoContainer: {
//     flex: 1
//   },
//   priceRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 10
//   },
//   priceLabel: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     flex: 1
//   },
//   priceValue: {
//     fontSize: 13,
//     fontWeight: 'bold',
//     color: '#333333',
//     flex: 2,
//     textAlign: 'right'
//   },
//   returnTripRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginTop: 5
//   },
//   bookButtonContainer: {
//     marginTop: 10
//   },
//   bookMyRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   bookMyRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   modalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   modalContainer: {
//     width: '85%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   modalHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   modalContent: {
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalIconContainer: {
//     marginBottom: 15
//   },
//   modalMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 5
//   },
//   modalSubMessage: {
//     fontSize: 16,
//     color: '#666666',
//     textAlign: 'center',
//     marginBottom: 20
//   },
//   otpContainer: {
//     backgroundColor: '#F5F5F5',
//     borderRadius: 10,
//     padding: 15,
//     alignItems: 'center',
//     marginBottom: 15,
//     width: '100%'
//   },
//   otpLabel: {
//     fontSize: 14,
//     color: '#666666',
//     marginBottom: 5
//   },
//   otpValue: {
//     fontSize: 24,
//     fontWeight: 'bold',
//     color: '#4caf50'
//   },
//   otpWarning: {
//     fontSize: 12,
//     color: '#F44336',
//     textAlign: 'center',
//     fontStyle: 'italic'
//   },
//   modalButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between'
//   },
//   modalCancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginRight: 10,
//     alignItems: 'center'
//   },
//   modalCancelButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#666666'
//   },
//   modalConfirmButton: {
//     flex: 1,
//     backgroundColor: '#4CAF50',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginLeft: 10,
//     alignItems: 'center'
//   },
//   modalConfirmButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#FFFFFF'
//   },
//   vehicleMarkerContainer: {
//     borderRadius: 20,
//     padding: 5,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   // Route Details Modal Styles
// routeDetailsModalOverlay: {
//   flex: 1,
//   backgroundColor: 'rgba(0, 0, 0, 0.5)',
//   justifyContent: 'flex-end', // Position at bottom
//   alignItems: 'center',
// },
// routeDetailsModalContainer: {
//   width: '100%', // Full width
//   backgroundColor: '#FFFFFF',
//   borderTopLeftRadius: 20,
//   borderTopRightRadius: 20,
//   padding: 20,
//   maxHeight: '70%', // Limit height to 70% of screen
//   elevation: 10,
//   shadowColor: '#000',
//   shadowOffset: { width: 0, height: -3 },
//   shadowOpacity: 0.2,
//   shadowRadius: 6,
// },
// routeDetailsModalHeader: {
//   flexDirection: 'row',
//   justifyContent: 'space-between',
//   alignItems: 'center',
//   marginBottom: 15,
//   paddingBottom: 10,
//   borderBottomWidth: 1,
//   borderBottomColor: '#EEEEEE'
// },
// routeDetailsModalTitle: {
//   fontSize: 18,
//   fontWeight: 'bold',
//   color: '#333333'
// },
// routeDetailsContent: {
//   marginBottom: 15,
//   maxHeight: 300, // Limit content height
// },
// routeDetailsRow: {
//   flexDirection: 'row',
//   justifyContent: 'space-between',
//   alignItems: 'center',
//   marginBottom: 10,
// },
// routeDetailsLabel: {
//   fontSize: 14,
//   fontWeight: '600',
//   color: '#333333'
// },
// routeDetailsValue: {
//   fontSize: 14,
//   fontWeight: 'bold',
//   color: '#4CAF50'
// },
// routeDetailsDivider: {
//   height: 1,
//   backgroundColor: '#EEEEEE',
//   marginVertical: 10,
// },
// availableDriversText: {
//   fontSize: 12,
//   fontWeight: '600',
//   color: '#333333',
//   marginBottom: 10,
// },
// rideOptionsContainer: {
//   marginBottom: 5,
// },
// rideOptionButton: {
//   width: '100%',
//   flexDirection: 'row',
//   alignItems: 'center',
//   backgroundColor: '#FFFFFF',
//   borderRadius: 8,
//   padding: 10,
//   marginBottom: 8,
//   borderWidth: 1,
//   borderColor: '#EEEEEE',
// },
// selectedRideOptionButton: {
//   backgroundColor: '#4caf50',
//   borderWidth: 1,
//   borderColor: '#4caf50',
// },
// rideOptionIconContainer: {
//   marginRight: 10,
//   justifyContent: 'center',
//   alignItems: 'center',
// },
// rideOptionInfoContainer: {
//   flex: 1,
// },
// rideOptionTypeText: {
//   fontSize: 14,
//   fontWeight: '600',
//   color: '#333333',
//   marginBottom: 2,
// },
// selectedRideOptionTypeText: {
//   color: '#FFFFFF',
// },
// rideOptionDetailsText: {
//   fontSize: 12,
//   color: '#757575',
//   marginBottom: 4,
// },
// selectedRideOptionDetailsText: {
//   color: '#FFFFFF',
// },
// rideOptionPriceText: {
//   fontSize: 12,
//   fontWeight: 'bold',
//   color: '#333333',
// },
// routeDetailsModalButtons: {
//   flexDirection: 'row',
//   justifyContent: 'space-between',
//   paddingTop: 10,
//   borderTopWidth: 1,
//   borderTopColor: '#EEEEEE',
// },
// routeDetailsCancelButton: {
//   flex: 1,
//   backgroundColor: '#F5F5F5',
//   paddingVertical: 12,
//   borderRadius: 8,
//   marginRight: 10,
//   alignItems: 'center',
// },
// routeDetailsCancelButtonText: {
//   fontSize: 14,
//   fontWeight: '600',
//   color: '#666666',
// },
// routeDetailsConfirmButton: {
//   flex: 1,
//   backgroundColor: '#4CAF50',
//   paddingVertical: 12,
//   borderRadius: 8,
//   marginLeft: 10,
//   alignItems: 'center',
// },
// routeDetailsConfirmButtonText: {
//   fontSize: 14,
//   fontWeight: '600',
//   color: '#FFFFFF',
// },
//   // Ride Details Modal Styles - New modal matching the screenshot
//   rideDetailsModalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideDetailsModalContainer: {
//     width: '90%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   rideDetailsHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20,
//     paddingBottom: 10,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   rideDetailsTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   rideDetailsContent: {
//     marginBottom: 20
//   },
//   rideDetailsSection: {
//     marginBottom: 15
//   },
//   rideDetailsSectionTitle: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     marginBottom: 5
//   },
//   rideDetailsLocationText: {
//     fontSize: 16,
//     color: '#333333'
//   },
//   rideDetailsRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15
//   },
//   rideDetailsLabel: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333'
//   },
//   rideDetailsValue: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#4CAF50'
//   },
//   rideDetailsButtons: {
//     marginTop: 10
//   },
//   // New styles for searching overlay
//   searchingOverlay: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     height: Dimensions.get('window').height * 0.5,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     alignItems: 'center',
//     justifyContent: 'center',
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6,
//   },
//   searchingLogo: {
//     width: 150,
//     height: 50,
//     resizeMode: 'contain',
//     marginBottom: 20,
//   },
//   illustrationContainer: {
//     alignItems: 'center',
//     marginBottom: 20,
//   },
//   searchLine: {
//     width: 200,
//     height: 4,
//     backgroundColor: '#4CAF50',
//     marginTop: 10,
//     borderRadius: 2,
//   },
//   progressBar: {
//     marginBottom: 20,
//   },
//   searchingMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 30,
//   },
//   cancelRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     paddingHorizontal: 40,
//     borderRadius: 10,
//   },
//   cancelRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600',
//   },
// });

// export default TaxiContent;































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































// import React, { useState, useEffect, useRef, useCallback } from 'react';
// import {
//   View,
//   StyleSheet,
//   Text,
//   TouchableOpacity,
//   Dimensions,
//   Alert,
//   ActivityIndicator,
//   Animated,
//   Switch,
//   Modal,
//   TextInput,
//   PermissionsAndroid,
//   Platform,
//   Image
// } from 'react-native';
// import MapView, { Marker, Polyline } from 'react-native-maps';
// import Geolocation from '@react-native-community/geolocation';
// import socket from '../../socket';
// import haversine from 'haversine-distance';
// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
// import Ionicons from 'react-native-vector-icons/Ionicons';
// import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
// import FontAwesome from 'react-native-vector-icons/FontAwesome';
// import axios from 'axios';
// import Svg, { Path, Circle, Rect } from 'react-native-svg';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getBackendUrl } from '../../util/backendConfig';
// import BikeIcon from '../../../assets001/bike.svg';
// import LorryIcon from '../../../assets001/lorry.svg';
// import TaxiIcon from '../../../assets001/taxi.svg';

// const RideTypeSelector = ({ selectedRideType, setSelectedRideType, estimatedPrice, distance, dynamicPrices }) => {
//   return (
//     <View style={styles.rideTypeContainer}>
//       {/* Porter Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'port' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('port')}
//       >
//         <View style={styles.rideIconContainer}>
//           <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'port' && styles.selectedRideTypeText,
//           ]}>CarGo Porter</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'port' && styles.selectedRideDetailsText,
//           ]}>Max 5 ton</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
   
//       {/* Taxi Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'taxi' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('taxi')}
//       >
//         <View style={styles.rideIconContainer}>
//           <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'taxi' && styles.selectedRideTypeText,
//           ]}>Taxi</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'taxi' && styles.selectedRideDetailsText,
//           ]}>4 seats</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
   
//       {/* Bike Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'bike' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('bike')}
//       >
//         <View style={styles.rideIconContainer}>
//           <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'bike' && styles.selectedRideTypeText,
//           ]}>Motorcycle</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'bike' && styles.selectedRideDetailsText,
//           ]}>1 person</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
//     </View>
//   );
// };

// interface LocationType {
//   latitude: number;
//   longitude: number;
// }

// interface SuggestionType {
//   id: string;
//   name: string;
//   address: string;
//   lat: string;
//   lon: string;
//   type: string;
//   importance: number;
// }

// interface DriverType {
//   driverId: string;
//   name: string;
//   location: {
//     coordinates: [number, number]; // [longitude, latitude]
//   };
//   vehicleType: string;
//   status?: string;
//   driverMobile?: string;
// }

// interface TaxiContentProps {
//   loadingLocation?: boolean;
//   currentLocation: LocationType | null;
//   lastSavedLocation: LocationType | null;
//   pickup: string;
//   dropoff: string;
//   handlePickupChange: (text: string) => void;
//   handleDropoffChange: (text: string) => void;
// }

// const TaxiContent: React.FC<TaxiContentProps> = ({
//   loadingLocation: propLoadingLocation,
//   currentLocation: propCurrentLocation,
//   lastSavedLocation: propLastSavedLocation,
//   pickup,
//   dropoff,
//   handlePickupChange: propHandlePickupChange,
//   handleDropoffChange: propHandleDropoffChange,
// }) => {
//   const [isLoadingLocation, setIsLoadingLocation] = useState(true);
//   const [selectedRideType, setSelectedRideType] = useState<string>('taxi');
//   const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);
//   const [showPricePanel, setShowPricePanel] = useState(false);
//   const [wantReturn, setWantReturn] = useState(false);
//   const [distance, setDistance] = useState<string>('');
//   const [travelTime, setTravelTime] = useState<string>('');
//   const [showConfirmModal, setShowConfirmModal] = useState(false);
//   const [bookingOTP, setBookingOTP] = useState<string>('');
//   const [apiError, setApiError] = useState<string | null>(null);
//   const [location, setLocation] = useState<LocationType | null>(null);
//   const [pickupLocation, setPickupLocation] = useState<LocationType | null>(null);
//   const [dropoffLocation, setDropoffLocation] = useState<LocationType | null>(null);
//   const [routeCoords, setRouteCoords] = useState<LocationType[]>([]);
//   const [currentRideId, setCurrentRideId] = useState<string | null>(null);
//   const [rideStatus, setRideStatus] = useState<"idle" | "searching" | "onTheWay" | "arrived" | "started" | "completed">("idle");
//   const [driverId, setDriverId] = useState<string | null>(null);
//   const [driverLocation, setDriverLocation] = useState<LocationType | null>(null);
//   const [travelledKm, setTravelledKm] = useState(0);
//   const [lastCoord, setLastCoord] = useState<LocationType | null>(null);
//   const [nearbyDrivers, setNearbyDrivers] = useState<DriverType[]>([]);
//   const [nearbyDriversCount, setNearbyDriversCount] = useState<number>(0);
//   const [pickupSuggestions, setPickupSuggestions] = useState<SuggestionType[]>([]);
//   const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);
//   const [dropoffSuggestions, setDropoffSuggestions] = useState<SuggestionType[]>([]);
//   const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);
//   const [pickupLoading, setPickupLoading] = useState(false);
//   const [dropoffLoading, setDropoffLoading] = useState(false);
//   const [suggestionsError, setSuggestionsError] = useState<string | null>(null);
//   const [pickupCache, setPickupCache] = useState<Record<string, SuggestionType[]>>({});
//   const [dropoffCache, setDropoffCache] = useState<Record<string, SuggestionType[]>>({});
//   const [isPickupCurrent, setIsPickupCurrent] = useState(false);
//   const [socketConnected, setSocketConnected] = useState(false);
//   const [driverArrivedAlertShown, setDriverArrivedAlertShown] = useState(false);
//   const [rideCompletedAlertShown, setRideCompletedAlertShown] = useState(false);
//   const [acceptedDriver, setAcceptedDriver] = useState<DriverType | null>(null);
//   const [isBooking, setIsBooking] = useState(false);
//   const [driverName, setDriverName] = useState<string | null>(null);
//   const [driverMobile, setDriverMobile] = useState<string | null>(null);
//   const [bookedAt, setBookedAt] = useState<Date | null>(null);
//   const [showPickupMapModal, setShowPickupMapModal] = useState(false);
//   const [showDropoffMapModal, setShowDropoffMapModal] = useState(false);
//   const [showRouteDetailsModal, setShowRouteDetailsModal] = useState(false);
//   const [dynamicPrices, setDynamicPrices] = useState({
//     bike: 0,
//     taxi: 0,
//     port: 0,
//   });
  
//   const pickupDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const dropoffDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const regionChangeTimer = useRef<NodeJS.Timeout | null>(null);
//   const [priceLoading, setPriceLoading] = useState(false);
//   const panelAnimation = useRef(new Animated.Value(0)).current;
//   const mapRef = useRef<MapView | null>(null);
  
//   const fallbackLocation: LocationType = {
//     latitude: 11.3312971,
//     longitude: 77.7167303,
//   };

//   // Distance calculation
//   const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371; // Earth's radius in kilometers
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
//               Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//               Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distance = R * c;
//     console.log(`📍 Distance calculation: (${lat1},${lon1}) to (${lat2},${lon2}) = ${distance.toFixed(4)} km`);
//     return distance;
//   };

//   const calculateDistanceInMeters = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371;
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a =
//       Math.sin(dLat/2) * Math.sin(dLat/2) +
//       Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//       Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distanceKm = R * c;
//     return distanceKm * 1000;
//   };

//   // Fetch nearby drivers
//   const fetchNearbyDrivers = (latitude: number, longitude: number) => {
//     console.log(`Fetching nearby drivers for lat: ${latitude}, lng: ${longitude}`);
//     if (socket && socketConnected) {
//       socket.emit("requestNearbyDrivers", {
//         latitude,
//         longitude,
//         radius: 10000,
//         vehicleType: selectedRideType
//       });
//       console.log("Emitted requestNearbyDrivers event");
//     } else {
//       console.log("Socket not connected, attempting to reconnect...");
//       socket.connect();
//       socket.once("connect", () => {
//         console.log("Socket reconnected, emitting requestNearbyDrivers");
//         socket.emit("requestNearbyDrivers", {
//           latitude,
//           longitude,
//           radius: 10000,
//           vehicleType: selectedRideType
//         });
//       });
//     }
//   };

//   // Handle nearby drivers response
//   useEffect(() => {
//     const handleNearbyDriversResponse = (data: { drivers: DriverType[] }) => {
//       console.log('📍 Received nearby drivers response:', JSON.stringify(data, null, 2));
//       if (!location) {
//         console.log("❌ No location available, can't process drivers");
//         return;
//       }
   
//       console.log('📍 User current location:', location);
//       console.log('📍 Number of drivers received:', data.drivers.length);
   
//       // Active ride: Show only accepted driver
//       if (currentRideId && acceptedDriver) {
//         console.log('🚗 Active ride - Showing only accepted driver');
//         const acceptedDriverData = data.drivers.find(d => d.driverId === acceptedDriver.driverId);
//         if (acceptedDriverData) {
//           setNearbyDrivers([acceptedDriverData]);
//           setNearbyDriversCount(1);
//           console.log('✅ Accepted driver found and displayed');
//         } else {
//           setNearbyDrivers([]);
//           setNearbyDriversCount(0);
//           console.log('❌ Accepted driver not found in response');
//         }
//         return;
//       }
   
//       // No active ride: Show all online drivers
//       const filteredDrivers = data.drivers
//         .filter(driver => {
//           console.log(`🔍 Processing driver: ${driver.driverId} (${driver.name})`);
//           console.log(`📍 Driver location: ${driver.location.coordinates[1]}, ${driver.location.coordinates[0]}`);
       
//           // Check driver status
//           if (driver.status && !["Live", "online", "onRide", "available"].includes(driver.status)) {
//             console.log(`❌ Driver ${driver.driverId} filtered out by status: ${driver.status}`);
//             return false;
//           }
       
//           // Calculate distance
//           const distance = calculateDistance(
//             location.latitude,
//             location.longitude,
//             driver.location.coordinates[1],
//             driver.location.coordinates[0]
//           );
//           console.log(`📏 Driver ${driver.driverId} distance: ${distance.toFixed(2)} km`);
       
//           const isWithinRange = distance <= 10;
//           console.log(`✅ Driver ${driver.driverId} within 10km: ${isWithinRange}`);
       
//           return isWithinRange;
//         })
//         .sort((a, b) => {
//           const distA = calculateDistance(location.latitude, location.longitude, a.location.coordinates[1], a.location.coordinates[0]);
//           const distB = calculateDistance(location.latitude, location.longitude, b.location.coordinates[1], b.location.coordinates[0]);
//           return distA - distB;
//         })
//         .slice(0, 10);
   
//       console.log('✅ Filtered drivers count:', filteredDrivers.length);
//       console.log('📍 Final drivers to display:', filteredDrivers);
   
//       setNearbyDrivers(filteredDrivers);
//       setNearbyDriversCount(filteredDrivers.length);
//     };

//     socket.on("nearbyDriversResponse", handleNearbyDriversResponse);
//     return () => socket.off("nearbyDriversResponse", handleNearbyDriversResponse);
//   }, [location, socketConnected, currentRideId, acceptedDriver]);

//   // Request location on component mount
//   useEffect(() => {
//     const requestLocation = async () => {
//       setIsLoadingLocation(true);
//       if (propCurrentLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using current location from props:`, propCurrentLocation);
//         setLocation(propCurrentLocation);
//         global.currentLocation = propCurrentLocation;
//         fetchNearbyDrivers(propCurrentLocation.latitude, propCurrentLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       if (propLastSavedLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using last saved location from props:`, propLastSavedLocation);
//         setLocation(propLastSavedLocation);
//         global.currentLocation = propLastSavedLocation;
//         fetchNearbyDrivers(propLastSavedLocation.latitude, propLastSavedLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using fallback location:`, fallbackLocation);
//       setLocation(fallbackLocation);
//       global.currentLocation = fallbackLocation;
//       fetchNearbyDrivers(fallbackLocation.latitude, fallbackLocation.longitude);
//       setIsLoadingLocation(false);
//       if (Platform.OS === "android") {
//         const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
//         if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location permission denied`);
//           Alert.alert("Permission Denied", "Location permission is required to proceed.");
//           return;
//         }
//       }
//       Geolocation.getCurrentPosition(
//         (pos) => {
//           const loc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Live location fetched successfully:`, loc);
//           setLocation(loc);
//           global.currentLocation = loc;
//           fetchNearbyDrivers(loc.latitude, loc.longitude);
//         },
//         (err) => {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location error:`, err.code, err.message);
//           Alert.alert("Location Error", "Could not fetch location. Please try again or check your GPS settings.");
//         },
//         { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000, distanceFilter: 10 }
//       );
//     };
//     requestLocation();
//   }, [propCurrentLocation, propLastSavedLocation]);

//   // Socket connection handlers
//   useEffect(() => {
//     const handleConnect = async () => {
//       console.log("Socket connected");
//       setSocketConnected(true);
//       if (location) fetchNearbyDrivers(location.latitude, location.longitude);
   
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User registered with socket:', userId);
//         }
//       } catch (error) {
//         console.error('Error registering user with socket:', error);
//       }
//     };
 
//     const handleDisconnect = () => { console.log("Socket disconnected"); setSocketConnected(false); };
//     const handleConnectError = (error: Error) => { console.error("Socket connection error:", error); setSocketConnected(false); };
 
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     socket.on("connect_error", handleConnectError);
//     setSocketConnected(socket.connected);
 
//     return () => {
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//       socket.off("connect_error", handleConnectError);
//     };
//   }, [location]);

//   // Location update interval
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected]);

//   // Driver location updates
//   useEffect(() => {
//     const handleDriverLiveLocationUpdate = (data: { driverId: string; lat: number; lng: number; status?: string }) => {
//       console.log('📍 Received driver location update:', data);
   
//       // If we have an active ride and this is the accepted driver
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('📍 Updating accepted driver location during active ride');
     
//         // Update driver location state
//         const driverCoords = { latitude: data.lat, longitude: data.lng };
//         setDriverLocation(driverCoords);
     
//         // Update the driver in nearbyDrivers
//         setNearbyDrivers(prev => {
//           if (prev.length > 0 && prev[0].driverId === data.driverId) {
//             return [{
//               ...prev[0],
//               location: { coordinates: [data.lng, data.lat] },
//               status: data.status || "onTheWay"
//             }];
//           }
//           return prev;
//         });
     
//         // Calculate distance if needed
//         if (lastCoord) {
//           const dist = haversine(lastCoord, driverCoords);
//           setTravelledKm(prev => prev + dist / 1000);
//         }
//         setLastCoord(driverCoords);
     
//         // Check if driver is near pickup location
//         if (pickupLocation && rideStatus === "onTheWay") {
//           const distanceToPickup = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             pickupLocation.latitude,
//             pickupLocation.longitude
//           );
//           console.log(`📍 Driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//           if (distanceToPickup <= 50 && !driverArrivedAlertShown) {
//             console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED');
//             setRideStatus("arrived");
//             setDriverArrivedAlertShown(true);
         
//             // Update UI state
//             setNearbyDrivers(prev => {
//               if (prev.length > 0 && prev[0].driverId === data.driverId) {
//                 return [{
//                   ...prev[0],
//                   status: "arrived"
//                 }];
//               }
//               return prev;
//             });
         
//             // Get customer ID for OTP
//             AsyncStorage.getItem('customerId').then(customerId => {
//               const otp = customerId ? customerId.slice(-4) : '1234';
//               Alert.alert(
//                 "🎉 Driver Arrived!",
//                 `Our driver (${acceptedDriver.name}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//                 [{ text: "OK", onPress: () => {
//                   console.log('✅ User acknowledged driver arrival');
//                 }}]
//               );
//             });
//           }
//         }
       
//         // Check if driver is near dropoff location
//         if (dropoffLocation && rideStatus === "started") {
//           const distanceToDropoff = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             dropoffLocation.latitude,
//             dropoffLocation.longitude
//           );
       
//           if (distanceToDropoff <= 50 && !rideCompletedAlertShown) {
//             // Notify the backend
//             socket.emit('driverReachedDestination', {
//               rideId: currentRideId,
//               driverId: data.driverId,
//               distance: travelledKm.toFixed(2)
//             });
         
//             // Set a flag to prevent multiple notifications
//             setRideCompletedAlertShown(true);
//           }
//         }
//         return; // Ignore other drivers during active ride
//       }
   
//       // If no active ride, update all drivers
//       setNearbyDrivers((prev) => {
//         const existingIndex = prev.findIndex(d => d.driverId === data.driverId);
//         if (existingIndex >= 0) {
//           const updated = [...prev];
//           updated[existingIndex] = {
//             ...updated[existingIndex],
//             location: { coordinates: [data.lng, data.lat] },
//             status: data.status || "Live"
//           };
//           return updated;
//         } else {
//           if (data.status && !["Live", "online", "onRide", "available"].includes(data.status)) return prev;
//           return [
//             ...prev,
//             {
//               driverId: data.driverId,
//               name: `Driver ${data.driverId}`,
//               location: { coordinates: [data.lng, data.lat] },
//               vehicleType: "taxi",
//               status: data.status || "Live"
//             }
//           ];
//         }
//       });
//     };

//     socket.on("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//     return () => socket.off("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//   }, [location, currentRideId, acceptedDriver, lastCoord, pickupLocation, dropoffLocation, rideStatus, driverArrivedAlertShown, rideCompletedAlertShown]);

//   // Polling for driver arrival
//   useEffect(() => {
//     let intervalId;
//     if (rideStatus === "onTheWay" && pickupLocation && driverLocation && !driverArrivedAlertShown) {
//       intervalId = setInterval(() => {
//         const distanceToPickup = calculateDistanceInMeters(
//           driverLocation.latitude,
//           driverLocation.longitude,
//           pickupLocation.latitude,
//           pickupLocation.longitude
//         );
//         console.log(`📍 Polling driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//         if (distanceToPickup <= 50) {
//           console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED FROM POLLING');
//           setRideStatus("arrived");
//           setDriverArrivedAlertShown(true);
//           AsyncStorage.getItem('customerId').then(customerId => {
//             const otp = customerId ? customerId.slice(-4) : '1234';
//             Alert.alert(
//               "🎉 Driver Arrived!",
//               `Our driver (${acceptedDriver?.name || 'Driver'}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//               [{ text: "OK", onPress: () => {
//                 console.log('✅ User acknowledged driver arrival');
//               }}]
//             );
//           });
//           clearInterval(intervalId);
//         }
//       }, 2000); // Poll every 2 seconds
//     }
//     return () => {
//       if (intervalId) clearInterval(intervalId);
//     };
//   }, [rideStatus, pickupLocation, driverLocation, driverArrivedAlertShown, acceptedDriver]);

//   // Ride completion event handler
//   useEffect(() => {
//     const handleRideCompleted = (data: any) => {
//       console.log('🎉 Ride completed event received:', data);
   
//       // Update ride status to completed
//       setRideStatus("completed");
   
//       // Calculate final distance and time if not provided
//       const finalDistance = data.distance || travelledKm.toFixed(2);
//       const finalTime = data.travelTime || travelTime;
//       const finalCharge = data.charge || estimatedPrice;
   
//       // Show completion alert
//       Alert.alert(
//         "Ride Completed",
//         `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//         [
//           {
//             text: "OK",
//             onPress: () => {
//               // Reset ride state after completion
//               setTimeout(() => {
//                 setCurrentRideId(null);
//                 setDriverId(null);
//                 setDriverLocation(null);
//                 setAcceptedDriver(null);
//                 setRouteCoords([]);
//                 setPickupLocation(null);
//                 setDropoffLocation(null);
//                 propHandlePickupChange("");
//                 propHandleDropoffChange("");
//                 setRideStatus("idle");
//                 setDriverArrivedAlertShown(false);
//                 setRideCompletedAlertShown(false);
             
//                 // Fetch all drivers again after ride completion
//                 if (location) {
//                   fetchNearbyDrivers(location.latitude, location.longitude);
//                 }
//               }, 2000);
//             }
//           }
//         ]
//       );
   
//       // Clear ride data from storage
//       AsyncStorage.removeItem('currentRideId');
//       AsyncStorage.removeItem('acceptedDriver');
//       AsyncStorage.removeItem('bookedAt');
//       setBookedAt(null);
//     };
 
//     socket.on("rideCompleted", handleRideCompleted);
 
//     return () => {
//       socket.off("rideCompleted", handleRideCompleted);
//     };
//   }, [travelledKm, travelTime, estimatedPrice, location]);

//   // Ride status update handler
//   useEffect(() => {
//     const handleRideStatusUpdate = (data: any) => {
//       console.log('📋 Ride status update received:', data);
   
//       if (data.rideId === currentRideId) {
//         if (data.status === 'completed') {
//           // Handle ride completion
//           setRideStatus("completed");
       
//           // Calculate final distance and time if not provided
//           const finalDistance = data.distance || travelledKm.toFixed(2);
//           const finalTime = data.travelTime || travelTime;
//           const finalCharge = data.charge || estimatedPrice;
       
//           // Show completion alert
//           Alert.alert(
//             "Ride Completed",
//             `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//             [
//               {
//                 text: "OK",
//                 onPress: () => {
//                   // Reset ride state after completion
//                   setTimeout(() => {
//                     setCurrentRideId(null);
//                     setDriverId(null);
//                     setDriverLocation(null);
//                     setAcceptedDriver(null);
//                     setRouteCoords([]);
//                     setPickupLocation(null);
//                     setDropoffLocation(null);
//                     propHandlePickupChange("");
//                     propHandleDropoffChange("");
//                     setRideStatus("idle");
//                     setDriverArrivedAlertShown(false);
//                     setRideCompletedAlertShown(false);
                 
//                     // Fetch all drivers again after ride completion
//                     if (location) {
//                       fetchNearbyDrivers(location.latitude, location.longitude);
//                     }
//                   }, 2000);
//                 }
//               }
//             ]
//           );
       
//           // Clear ride data from storage
//           AsyncStorage.removeItem('currentRideId');
//           AsyncStorage.removeItem('acceptedDriver');
//           AsyncStorage.removeItem('bookedAt');
//           setBookedAt(null);
//         }
//       }
//     };
 
//     socket.on("rideStatusUpdate", handleRideStatusUpdate);
 
//     return () => {
//       socket.off("rideStatusUpdate", handleRideStatusUpdate);
//     };
//   }, [currentRideId, travelledKm, travelTime, estimatedPrice, location]);

//   // Driver offline handler
//   useEffect(() => {
//     const handleDriverOffline = (data: { driverId: string }) => {
//       console.log(`Driver ${data.driverId} went offline`);
   
//       // Don't remove accepted driver during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('⚠️ Accepted driver went offline during active ride');
//         return;
//       }
   
//       setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//       setNearbyDriversCount(prev => Math.max(0, prev - 1));
//     };
 
//     socket.on("driverOffline", handleDriverOffline);
//     return () => socket.off("driverOffline", handleDriverOffline);
//   }, [currentRideId, acceptedDriver]);

//   // Driver status update handler
//   useEffect(() => {
//     const handleDriverStatusUpdate = (data: { driverId: string; status: string }) => {
//       console.log(`Driver ${data.driverId} status updated to: ${data.status}`);
   
//       // Don't update accepted driver status during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('Keeping accepted driver status as onTheWay');
//         return;
//       }
   
//       if (data.status === "offline") {
//         setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//         setNearbyDriversCount(prev => Math.max(0, prev - 1));
//         return;
//       }
//       setNearbyDrivers(prev => prev.map(driver =>
//         driver.driverId === data.driverId ? { ...driver, status: data.status } : driver
//       ));
//     };
 
//     socket.on("driverStatusUpdate", handleDriverStatusUpdate);
//     return () => socket.off("driverStatusUpdate", handleDriverStatusUpdate);
//   }, [currentRideId, acceptedDriver]);

//   // Recover ride data on component mount
//   useEffect(() => {
//     const recoverRideData = async () => {
//       try {
//         const savedRideId = await AsyncStorage.getItem('currentRideId');
//         const savedDriverData = await AsyncStorage.getItem('acceptedDriver');
     
//         if (savedRideId && !currentRideId) {
//           console.log('🔄 Recovering ride data from storage:', savedRideId);
//           setCurrentRideId(savedRideId);
       
//           if (savedDriverData) {
//             const driverData = JSON.parse(savedDriverData);
//             setAcceptedDriver(driverData);
//             setDriverName(driverData.name);
//             setDriverMobile(driverData.driverMobile);
//             setRideStatus("onTheWay");
//           } else {
//             setRideStatus("searching");
//             const bookedStr = await AsyncStorage.getItem('bookedAt');
//             setBookedAt(bookedStr ? new Date(bookedStr) : new Date());
//             // Restart polling
//             const pollInterval = setInterval(() => {
//               if (currentRideId) {
//                 socket.emit('getRideStatus', { rideId: currentRideId });
//               }
//             }, 5000);
//             AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//             // Restart timeout (increased to 60s)
//             const acceptanceTimeout = setTimeout(() => {
//               if (rideStatus === "searching") {
//                 Alert.alert(
//                   "No Driver Available",
//                   "No driver has accepted your ride yet. Please try again or wait longer.",
//                   [{ text: "OK", onPress: () => setRideStatus("idle") }]
//                 );
//               }
//             }, 60000);
//             AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
//           }
       
//           // Request ride status from server
//           socket.emit('getRideStatus', { rideId: savedRideId });
//         }
//       } catch (error) {
//         console.error('Error recovering ride data:', error);
//       }
//     };
 
//     recoverRideData();
//   }, []);

//   // Process ride acceptance
//   const processRideAcceptance = useCallback((data: any) => {
//     console.log('🎯 PROCESSING RIDE ACCEPTANCE:', JSON.stringify(data, null, 2));
 
//     // Validate required data
//     if (!data.rideId || !data.driverId) {
//       console.error('❌ Invalid ride acceptance data:', data);
//       return;
//     }
//     // Clear existing timeouts and intervals
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Update ride status immediately
//     setRideStatus("onTheWay");
//     setDriverId(data.driverId);
//     setDriverName(data.driverName || 'Driver');
//     setDriverMobile(data.driverMobile || 'N/A');
//     setCurrentRideId(data.rideId);
//     // Create accepted driver object
//     const acceptedDriverData: DriverType = {
//       driverId: data.driverId,
//       name: data.driverName || 'Driver',
//       driverMobile: data.driverMobile || 'N/A',
//       location: {
//         coordinates: [data.driverLng || 0, data.driverLat || 0]
//       },
//       vehicleType: data.vehicleType || selectedRideType,
//       status: "onTheWay"
//     };
//     console.log('👨‍💼 Setting accepted driver:', acceptedDriverData);
 
//     // Update state
//     setAcceptedDriver(acceptedDriverData);
//     setNearbyDrivers([acceptedDriverData]);
//     setNearbyDriversCount(1);
//     // Set initial driver location
//     if (data.driverLat && data.driverLng) {
//       const driverLoc = {
//         latitude: data.driverLat,
//         longitude: data.driverLng
//       };
//       setDriverLocation(driverLoc);
//       console.log('📍 Initial driver location set:', driverLoc);
//     }
//     // Store in AsyncStorage for recovery
//     AsyncStorage.setItem('currentRideId', data.rideId);
//     AsyncStorage.setItem('acceptedDriver', JSON.stringify(acceptedDriverData));
 
//     console.log('✅ Ride acceptance processed successfully for:', data.rideId);
//   }, [selectedRideType]);

//   // Global ride acceptance listener
//   useEffect(() => {
//     console.log('🎯 Setting up GLOBAL ride acceptance listener');
//     const handleRideAccepted = (data: any) => {
//       console.log('🚨 ===== USER APP: RIDE ACCEPTED ====');
//       console.log('📦 Acceptance data:', JSON.stringify(data, null, 2));
//       console.log('🚨 ===== END ACCEPTANCE DATA ====');
//       processRideAcceptance(data);
//     };
//     // Listen on multiple channels
//     socket.on("rideAccepted", handleRideAccepted);
 
//     // Fixed: Proper async handling
//     socket.on("rideAcceptedBroadcast", async (data) => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (data.targetUserId === userId) {
//           handleRideAccepted(data);
//         }
//       } catch (error) {
//         console.error('Error checking user ID:', error);
//       }
//     });
//     return () => {
//       socket.off("rideAccepted", handleRideAccepted);
//       socket.off("rideAcceptedBroadcast", handleRideAccepted);
//     };
//   }, [processRideAcceptance]);

//   // Critical socket event handlers
//   useEffect(() => {
//     console.log('🔌 Setting up CRITICAL socket event handlers');
//     // Handle getDriverData response
//     const handleDriverDataResponse = (data: any) => {
//       console.log('🚗 Driver data received:', data);
//       if (data.success) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle getRideStatus response
//     const handleRideStatusResponse = (data: any) => {
//       console.log('📋 Ride status received:', data);
//       if (data.driverId) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle backup ride acceptance
//     const handleBackupRideAccepted = (data: any) => {
//       console.log('🔄 Backup ride acceptance:', data);
//       processRideAcceptance(data);
//     };
//     socket.on("driverDataResponse", handleDriverDataResponse);
//     socket.on("rideStatusResponse", handleRideStatusResponse);
//     socket.on("backupRideAccepted", handleBackupRideAccepted);
//     return () => {
//       socket.off("driverDataResponse", handleDriverDataResponse);
//       socket.off("rideStatusResponse", handleRideStatusResponse);
//       socket.off("backupRideAccepted", handleBackupRideAccepted);
//     };
//   }, [selectedRideType]);

//   // Comprehensive socket debugger
//   useEffect(() => {
//     console.log('🔍 Starting comprehensive socket debugging');
 
//     // Debug all socket events
//     const debugAllEvents = (eventName: string, data: any) => {
//       if (eventName.includes('ride') || eventName.includes('driver') || eventName.includes('Room')) {
//         console.log(`📡 SOCKET EVENT [${eventName}]:`, data);
//       }
//     };
//     // Specific debug for rideAccepted
//     const debugRideAccepted = (data: any) => {
//       console.log('🚨🚨🚨 RIDE ACCEPTED EVENT RECEIVED 🚨🚨🚨');
//       console.log('📦 Data:', JSON.stringify(data, null, 2));
//       console.log('🔍 Current state:', {
//         currentRideId,
//         rideStatus,
//         hasAcceptedDriver: !!acceptedDriver
//       });
   
//       // Process immediately
//       processRideAcceptance(data);
//     };
//     // Debug connection
//     const handleConnect = () => {
//       console.log('✅ Socket connected - ID:', socket.id);
//       setSocketConnected(true);
//     };
//     const handleDisconnect = () => {
//       console.log('❌ Socket disconnected');
//       setSocketConnected(false);
//     };
//     // Add all listeners
//     socket.onAny(debugAllEvents);
//     socket.on("rideAccepted", debugRideAccepted);
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     console.log('🔍 Socket debuggers activated');
//     return () => {
//       socket.offAny(debugAllEvents);
//       socket.off("rideAccepted", debugRideAccepted);
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//     };
//   }, [currentRideId, rideStatus, acceptedDriver, processRideAcceptance]);

//   // User location tracking function
//   const sendUserLocationUpdate = useCallback(async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
   
//       if (!userId || !currentRideId) {
//         console.log('❌ Cannot send location: Missing userId or rideId');
//         return;
//       }
//       console.log(`📍 SENDING USER LOCATION UPDATE: ${latitude}, ${longitude} for ride ${currentRideId}`);
   
//       // Send to socket for real-time updates
//       socket.emit('userLocationUpdate', {
//         userId,
//         rideId: currentRideId,
//         latitude,
//         longitude,
//         timestamp: Date.now()
//       });
//       // Also save to database via REST API
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//           latitude,
//           longitude,
//           rideId: currentRideId
//         }, {
//           headers: {
//             Authorization: `Bearer ${token}`
//           }
//         });
//       }
//       console.log('✅ User location update sent successfully');
//     } catch (error) {
//       console.error('❌ Error sending user location update:', error);
//     }
//   }, [currentRideId]);

//   // Continuous location tracking during active rides
//   useEffect(() => {
//     let locationInterval;
//     if ((rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && location) {
//       console.log('🔄 Starting continuous user location tracking');
   
//       locationInterval = setInterval(() => {
//         if (location) {
//           sendUserLocationUpdate(location.latitude, location.longitude);
//         }
//       }, 5000); // Send every 5 seconds
   
//     }
//     return () => {
//       if (locationInterval) {
//         clearInterval(locationInterval);
//         console.log('🛑 Stopped user location tracking');
//       }
//     };
//   }, [rideStatus, location, sendUserLocationUpdate]);

//   // Update existing location interval to include active ride statuses
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching" || rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
         
//             // Send location update if in active ride
//             if (rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") {
//               sendUserLocationUpdate(newLoc.latitude, newLoc.longitude);
//             }
         
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected, sendUserLocationUpdate]);

//   // Manual ride status polling
//   useEffect(() => {
//     if (currentRideId && rideStatus === "searching") {
//       console.log('🔄 Starting backup polling for ride:', currentRideId);
   
//       const pollInterval = setInterval(() => {
//         console.log('📡 Polling ride status for:', currentRideId);
//         socket.emit('getRideStatus', { rideId: currentRideId }, (data) => {
//           if (data.driverId) {
//             processRideAcceptance(data);
//           } else if (bookedAt && (new Date().getTime() - bookedAt.getTime() > 60000) && rideStatus === "searching") {
//             console.log('⏰ No driver found after 60s');
//             Alert.alert(
//               "No Driver Available",
//               "No driver has accepted your ride yet. Please try again or wait longer.",
//               [{ text: "OK", onPress: () => setRideStatus("idle") }]
//             );
//             clearInterval(pollInterval);
//             AsyncStorage.removeItem('statusPollInterval');
//           }
//         });
//       }, 3000); // Poll every 3 seconds
//       // Store interval ID
//       AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//       return () => {
//         clearInterval(pollInterval);
//         AsyncStorage.removeItem('statusPollInterval');
//       };
//     }
//   }, [currentRideId, rideStatus, bookedAt]);

//   // Ensure user joins their room on socket connection
//   useEffect(() => {
//     const registerUserRoom = async () => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId && socket.connected) {
//           console.log('👤 Registering user with socket room:', userId);
//           socket.emit('registerUser', { userId });
       
//           // Also join the room manually
//           socket.emit('joinRoom', { userId });
//         }
//       } catch (error) {
//         console.error('Error registering user room:', error);
//       }
//     };
//     // Register on connect and every 5 seconds to ensure room membership
//     socket.on('connect', registerUserRoom);
//     registerUserRoom();
//     // Re-register periodically to ensure room membership
//     const interval = setInterval(registerUserRoom, 5000);
//     return () => {
//       socket.off('connect', registerUserRoom);
//       clearInterval(interval);
//     };
//   }, []);

//   // Socket recovery: Handle reconnection and missed events
//   useEffect(() => {
//     const handleReconnect = async () => {
//       console.log('🔌 Socket reconnected, recovering state...');
//       setSocketConnected(true);
   
//       // Re-register user
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User re-registered after reconnect:', userId);
//         }
     
//         // Request current ride status if we have a ride ID
//         const currentRideId = await AsyncStorage.getItem('currentRideId');
//         if (currentRideId) {
//           socket.emit('getRideStatus', { rideId: currentRideId });
//           console.log('🔄 Requesting status for current ride:', currentRideId);
//         }
//       } catch (error) {
//         console.error('Error during socket recovery:', error);
//       }
//     };
 
//     socket.on("connect", handleReconnect);
 
//     return () => {
//       socket.off("connect", handleReconnect);
//     };
//   }, []);

//   // Fetch route
//   const fetchRoute = async (dropCoord: LocationType) => {
//     if (!pickupLocation) return;
//     try {
//       const url = `https://router.project-osrm.org/route/v1/driving/${pickupLocation.longitude},${pickupLocation.latitude};${dropCoord.longitude},${dropCoord.latitude}?overview=full&geometries=geojson`;
//       const res = await fetch(url);
//       const data = await res.json();
//       if (data.code === "Ok" && data.routes.length > 0) {
//         const coords = data.routes[0].geometry.coordinates.map(([lng, lat]: number[]) => ({ latitude: lat, longitude: lng }));
//         setRouteCoords(coords);
//         setDistance((data.routes[0].distance / 1000).toFixed(2) + " km");
//         setTravelTime(Math.round(data.routes[0].duration / 60) + " mins");
        
//         // Show route details modal when route is fetched
//         setShowRouteDetailsModal(true);
//       } else {
//         setApiError("Failed to fetch route");
//         Alert.alert("Route Error", "Could not find route. Please try different locations.");
//       }
//     } catch (err) {
//       console.error(err);
//       setRouteCoords([]);
//       setApiError("Network error fetching route");
//       Alert.alert("Route Error", "Failed to fetch route. Please check your internet connection.");
//     }
//   };

//   // Fetch suggestions
//   const fetchSuggestions = async (query: string, type: 'pickup' | 'dropoff'): Promise<SuggestionType[]> => {
//     try {
//       console.log(`Fetching suggestions for: ${query}`);
//       const cache = type === 'pickup' ? pickupCache : dropoffCache;
//       if (cache[query]) {
//         console.log(`Returning cached suggestions for: ${query}`);
//         return cache[query];
//       }
//       if (type === 'pickup') setPickupLoading(true);
//       else setDropoffLoading(true);
//       setSuggestionsError(null);
//       const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=5&addressdetails=1&countrycodes=IN`;
//       console.log(`API URL: ${url}`);
   
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
   
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       if (!Array.isArray(data)) throw new Error('Invalid response format');
   
//       const suggestions: SuggestionType[] = data.map((item: any) => ({
//         id: item.place_id || `${item.lat}-${item.lon}`,
//         name: item.display_name,
//         address: extractAddress(item),
//         lat: item.lat,
//         lon: item.lon,
//         type: item.type || 'unknown',
//         importance: item.importance || 0,
//       }));
//       if (type === 'pickup') setPickupCache(prev => ({ ...prev, [query]: suggestions }));
//       else setDropoffCache(prev => ({ ...prev, [query]: suggestions }));
//       return suggestions;
//     } catch (error: any) {
//       console.error('Suggestions fetch error:', error);
//       setSuggestionsError(error.message || 'Failed to fetch suggestions');
//       return [];
//     } finally {
//       if (type === 'pickup') setPickupLoading(false);
//       else setDropoffLoading(false);
//     }
//   };

//   // Extract address
//   const extractAddress = (item: any): string => {
//     if (item.address) {
//       const parts = [];
//       if (item.address.road) parts.push(item.address.road);
//       if (item.address.suburb) parts.push(item.address.suburb);
//       if (item.address.city || item.address.town || item.address.village) parts.push(item.address.city || item.address.town || item.address.village);
//       if (item.address.state) parts.push(item.address.state);
//       if (item.address.postcode) parts.push(item.address.postcode);
//       return parts.join(', ');
//     }
//     return item.display_name;
//   };

//   // Handle pickup change
//   const handlePickupChange = (text: string) => {
//     console.log(`handlePickupChange called with: "${text}"`);
//     propHandlePickupChange(text);
//     if (pickupDebounceTimer.current) {
//       clearTimeout(pickupDebounceTimer.current);
//       pickupDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setPickupLoading(true);
//       setShowPickupSuggestions(true);
//       pickupDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'pickup');
//         setPickupSuggestions(sugg);
//         setPickupLoading(false);
//       }, 500);
//     } else {
//       setShowPickupSuggestions(false);
//       setPickupSuggestions([]);
//     }
//   };

//   // Handle dropoff change
//   const handleDropoffChange = (text: string) => {
//     console.log(`handleDropoffChange called with: "${text}"`);
//     propHandleDropoffChange(text);
//     if (dropoffDebounceTimer.current) {
//       clearTimeout(dropoffDebounceTimer.current);
//       dropoffDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setDropoffLoading(true);
//       setShowDropoffSuggestions(true);
//       dropoffDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'dropoff');
//         setDropoffSuggestions(sugg);
//         setDropoffLoading(false);
//       }, 500);
//     } else {
//       setShowDropoffSuggestions(false);
//       setDropoffSuggestions([]);
//     }
//   };

//   // Select pickup suggestion
//   const selectPickupSuggestion = (suggestion: SuggestionType) => {
//     propHandlePickupChange(suggestion.name);
//     setPickupLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowPickupSuggestions(false);
//     setIsPickupCurrent(false);
//     if (dropoffLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     fetchNearbyDrivers(parseFloat(suggestion.lat), parseFloat(suggestion.lon));
//   };

//   // Select dropoff suggestion
//   const selectDropoffSuggestion = (suggestion: SuggestionType) => {
//     propHandleDropoffChange(suggestion.name);
//     setDropoffLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowDropoffSuggestions(false);
//     if (pickupLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//   };

//   // Update price
//   useEffect(() => {
//     const updatePrice = async () => {
//       if (pickupLocation && dropoffLocation && distance) {
//         const price = await calculatePrice();
//         setEstimatedPrice(price);
//       }
//     };
//     updatePrice();
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   // Update price again
//   useEffect(() => {
//     if (pickupLocation && dropoffLocation && distance) {
//       const price = calculatePrice();
//       setEstimatedPrice(price);
//     }
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   // Panel animation
//   useEffect(() => {
//     if (showPricePanel) {
//       Animated.timing(panelAnimation, {
//         toValue: 1,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     } else {
//       Animated.timing(panelAnimation, {
//         toValue: 0,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     }
//   }, [showPricePanel]);

//   // Fetch ride price
//   const fetchRidePrice = async (vehicleType: string, distance: number) => {
//     // Use ONLY dynamic prices from socket events
//     const pricePerKm = dynamicPrices[vehicleType];
 
//     // If dynamic prices are not set yet, wait for them
//     if (!pricePerKm || pricePerKm === 0) {
//       console.log(`⏳ Waiting for ${vehicleType} price from admin...`);
//       return 0;
//     }
 
//     const calculatedPrice = distance * pricePerKm;
 
//     console.log(`💰 Price calculation: ${distance}km ${vehicleType} × ₹${pricePerKm}/km = ₹${calculatedPrice}`);
//     return calculatedPrice;
//   };

//   // Calculate price
//   const calculatePrice = async (): Promise<number | null> => {
//     if (!pickupLocation || !dropoffLocation || !distance) {
//       console.log('❌ Missing location data for price calculation');
//       return null;
//     }
//     const distanceKm = parseFloat(distance);
 
//     // DEBUG: Print current prices before calculation
//     console.log('\n💰 PRICE CALCULATION DEBUG:');
//     console.log(`📏 Distance: ${distanceKm}km`);
//     console.log(`🚗 Vehicle Type: ${selectedRideType}`);
//     console.log(`🏍️ BIKE Price/km: ₹${dynamicPrices.bike}`);
//     console.log(`🚕 TAXI Price/km: ₹${dynamicPrices.taxi}`);
//     console.log(`🚛 PORT Price/km: ₹${dynamicPrices.port}`);
//     console.log('─────────────────────────────────────');
//     try {
//       const pricePerKm = dynamicPrices[selectedRideType];
   
//       console.log(`💰 Using price per km: ₹${pricePerKm} for ${selectedRideType}`);
//       // Wait for admin prices - NO TEMPORARY FALLBACK
//       if (!pricePerKm || pricePerKm === 0) {
//         console.log('⏳ Waiting for admin prices to be loaded...');
//         console.log('🚫 Booking blocked until prices are received from admin');
//         return null;
//       }
   
//       const calculatedPrice = distanceKm * pricePerKm;
//       const multiplier = wantReturn ? 2 : 1;
//       const finalPrice = Math.round(calculatedPrice * multiplier);
//       console.log(`✅ Final price calculated: ${distanceKm}km × ₹${pricePerKm}/km × ${multiplier} = ₹${finalPrice}`);
//       return finalPrice;
//     } catch (error) {
//       console.error('❌ Error calculating price:', error);
//       return null;
//     }
//   };

//   // Price update handler
//   useEffect(() => {
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received REAL-TIME price update from admin:', data);
   
//       // Update dynamic prices immediately
//       setDynamicPrices({
//         bike: data.bike,
//         taxi: data.taxi,
//         port: data.port,
//       });
   
//       // Log the new prices
//       console.log('🔄 PRICES UPDATED SUCCESSFULLY:');
//       console.log(`🏍️ BIKE: ₹${data.bike}/km`);
//       console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//       console.log(`🚛 PORT: ₹${data.port}/km`);
   
//       // Immediately recalculate price if a ride is being planned
//       if (pickupLocation && dropoffLocation && distance) {
//         console.log('🔄 Recalculating price with new admin rates...');
//         calculatePrice();
//       }
//     };
//     socket.on('priceUpdate', handlePriceUpdate);
 
//     return () => {
//       socket.off('priceUpdate', handlePriceUpdate);
//     };
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Request prices on component mount
//   useEffect(() => {
//     console.log('📡 Requesting current prices from admin...');
//     socket.emit('getCurrentPrices');
 
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received current prices:', data);
//       setDynamicPrices(data);
//     };
 
//     socket.on('currentPrices', handleCurrentPrices);
 
//     return () => {
//       socket.off('currentPrices', handleCurrentPrices);
//     };
//   }, []);

//   // Listen for real-time price updates
//   useEffect(() => {
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 REAL-TIME PRICE UPDATE:', data);
//       setDynamicPrices(data);
   
//       console.log('✅ PRICES UPDATED:');
//       console.log(`🏍️ BIKE: ₹${data.bike}/km`);
//       console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//       console.log(`🚛 PORT: ₹${data.port}/km`);
   
//       // Recalculate immediately
//       if (pickupLocation && dropoffLocation && distance) {
//         calculatePrice();
//       }
//     };
//     socket.on('priceUpdate', handlePriceUpdate);
//     return () => socket.off('priceUpdate', handlePriceUpdate);
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Price debugging and console logging
//   useEffect(() => {
//     console.log('💰 INITIALIZING PRICE DEBUGGING SYSTEM');
 
//     // Function to print current prices to console
//     const printCurrentPrices = () => {
//       console.log('\n🚗 ===== CURRENT RIDE PRICES =====');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${dynamicPrices.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${dynamicPrices.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${dynamicPrices.port}`);
//       console.log('=================================\n');
//     };
//     // Listen for price updates from admin
//     const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 REAL-TIME PRICE UPDATE RECEIVED FROM ADMIN:', data);
   
//       // Update dynamic prices
//       setDynamicPrices({
//         bike: data.bike,
//         taxi: data.taxi,
//         port: data.port,
//       });
   
//       // Print updated prices to console
//       console.log('\n✅ ===== PRICES UPDATED SUCCESSFULLY =====');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//       console.log('=============================================\n');
   
//       // Recalculate price if needed
//       if (pickupLocation && dropoffLocation && distance) {
//         calculatePrice();
//       }
//     };
//     // Listen for initial prices when component mounts
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 RECEIVED CURRENT PRICES FROM SERVER:');
//       console.log(`🏍️ BIKE: Today's price per km: ₹${data.bike}`);
//       console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//       console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//       console.log('─────────────────────────────────────');
   
//       setDynamicPrices(data);
//     };
//     // Request current prices when component mounts
//     console.log('📡 Requesting current prices from server...');
//     socket.emit('getCurrentPrices');
//     // Set up event listeners
//     socket.on('priceUpdate', handlePriceUpdate);
//     socket.on('currentPrices', handleCurrentPrices);
//     socket.on('ridePricesUpdated', handlePriceUpdate); // Alternative event name
//     // Print initial prices
//     printCurrentPrices();
//     // Set up interval to periodically request prices (as backup)
//     const priceInterval = setInterval(() => {
//       console.log('🔄 Periodic price check...');
//       socket.emit('getCurrentPrices');
//       printCurrentPrices();
//     }, 30000); // Every 30 seconds
//     return () => {
//       // Clean up event listeners
//       socket.off('priceUpdate', handlePriceUpdate);
//       socket.off('currentPrices', handleCurrentPrices);
//       socket.off('ridePricesUpdated', handlePriceUpdate);
//       clearInterval(priceInterval);
//     };
//   }, [pickupLocation, dropoffLocation, distance]);

//   // Request current prices on component mount
//   useEffect(() => {
//     console.log('📡 Requesting current prices from admin...');
 
//     // Request current prices when component mounts
//     socket.emit('getCurrentPrices');
 
//     // Also set up a listener for initial price response
//     const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//       console.log('📡 Received current prices from admin:', data);
//       setDynamicPrices(data);
//     };
 
//     socket.on('currentPrices', handleCurrentPrices);
 
//     return () => {
//       socket.off('currentPrices', handleCurrentPrices);
//     };
//   }, []);

//   // Fetch initial prices
//   useEffect(() => {
//     const fetchInitialPrices = async () => {
//       try {
//         const bikeRate = await fetchRidePrice('bike', 1);
//         const taxiRate = await fetchRidePrice('taxi', 1);
//         const portRate = await fetchRidePrice('port', 1);
//         setDynamicPrices({
//           bike: bikeRate,
//           taxi: taxiRate,
//           port: portRate,
//         });
//         console.log(`BIKE: Today's price per km: ₹${bikeRate}`);
//         console.log(`TAXI: Today's price per km: ₹${taxiRate}`);
//         console.log(`PORT: Today's price per km: ₹${portRate}`);
//       } catch (error) {
//         console.error('❌ Error fetching initial prices:', error);
//         setDynamicPrices({
//           bike: 100,
//           taxi: 500,
//           port: 1000,
//         });
//         console.log(`BIKE: Today's price per km: ₹100 (fallback)`);
//         console.log(`TAXI: Today's price per km: ₹500 (fallback)`);
//         console.log(`PORT: Today's price per km: ₹1000 (fallback)`);
//       }
//     };
//     fetchInitialPrices();
//   }, []);

//   // Handle ride type select
//   const handleRideTypeSelect = async (type: string) => {
//     if (selectedRideType === type) return;
//     setSelectedRideType(type);
//     setShowPricePanel(true);
//     if (pickupLocation && dropoffLocation) {
//       const price = await calculatePrice();
//       setEstimatedPrice(price);
//     }
//     if (location) fetchNearbyDrivers(location.latitude, location.longitude);
//   };

//   // Handle book ride
//   const handleBookRide = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
//       const price = await calculatePrice(); // Use async price calculation
//   if (!price) {
//     Alert.alert('Error', 'Price calculation failed. Please try again.');
//     return;
//   }
 
//     try {
//       setIsBooking(true);
   
//       const token = await AsyncStorage.getItem('authToken');
//       if (!token) {
//         Alert.alert('Authentication Error', 'Please log in to book a ride');
//         setIsBooking(false);
//         return;
//       }
//       if (!pickupLocation || !dropoffLocation) {
//         Alert.alert('Error', 'Please select both pickup and dropoff locations');
//         setIsBooking(false);
//         return;
//       }
//       if (!estimatedPrice) {
//         Alert.alert('Error', 'Price calculation failed. Please try again.');
//         setIsBooking(false);
//         return;
//       }
//       const userId = await AsyncStorage.getItem('userId');
//       const customerId = (await AsyncStorage.getItem('customerId')) || 'U001';
//       const userName = await AsyncStorage.getItem('userName');
//       const userMobile = await AsyncStorage.getItem('userMobile');
//       let otp;
//       if (customerId && customerId.length >= 4) {
//         otp = customerId.slice(-4);
//       } else {
//         otp = Math.floor(1000 + Math.random() * 9000).toString();
//       }
//       setRideStatus('searching');
//       setBookedAt(new Date());
//       console.log('📋 User Details:', {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup,
//         dropoff,
//         selectedRideType,
//         otp
//       });
//       const rideData = {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup: {
//           lat: pickupLocation.latitude,
//           lng: pickupLocation.longitude,
//           address: pickup,
//         },
//         drop: {
//           lat: dropoffLocation.latitude,
//           lng: dropoffLocation.longitude,
//           address: dropoff,
//         },
//         vehicleType: selectedRideType,
//         otp,
//         estimatedPrice,
//         distance,
//         travelTime,
//         wantReturn,
//         token
//       };
//       socket.emit('bookRide', rideData, (response) => {
//         setIsBooking(false);
     
//         if (response && response.success) {
//           setCurrentRideId(response.rideId);
//           AsyncStorage.setItem('bookedAt', new Date().toISOString());
//           setBookingOTP(response.otp);
//           setShowConfirmModal(true);
//           setRideStatus('searching');
//           console.log('✅ Ride booked successfully:', response);
//         } else {
//           Alert.alert('Booking Failed', response?.message || 'Failed to book ride');
//           setRideStatus('idle');
//           setCurrentRideId(null);
//         }
//       });
//     } catch (error) {
//       setIsBooking(false);
//       console.error('Booking error:', error);
//       Alert.alert('Booking Failed', 'An unexpected error occurred. Please try again.');
//       setRideStatus('idle');
//       setCurrentRideId(null);
//     }
//   };

//   // Fetch user data
//   useEffect(() => {
//     const fetchUserData = async () => {
//       try {
//         const token = await AsyncStorage.getItem('authToken');
//         if (!token) return;
//         const backendUrl = getBackendUrl();
//         const response = await axios.get(`${backendUrl}/api/users/profile`, {
//           headers: { Authorization: `Bearer ${token}` }
//         });
     
//         const userProfile = response.data;
     
//         console.log('📋 User Profile:', userProfile);
     
//         const userMobile = userProfile.mobile ||
//                            userProfile.phone ||
//                            userProfile.phoneNumber ||
//                            userProfile.mobileNumber ||
//                            '';
//         await AsyncStorage.setItem('userId', userProfile._id);
//         await AsyncStorage.setItem('customerId', userProfile.customerId || userProfile._id);
//         await AsyncStorage.setItem('userName', userProfile.name || userProfile.username);
//         await AsyncStorage.setItem('userMobile', userProfile.phoneNumber);
//         await AsyncStorage.setItem('userAddress', userProfile.address || '');
     
//       } catch (error) {
//         console.error('Error fetching user data:', error);
//       }
//     };
//     fetchUserData();
//   }, []);

//   // Handle ride created
//   useEffect(() => {
//     const handleRideCreated = (data) => {
//       console.log('Ride created event received:', data);
//       if (data.success) {
//         if (data.rideId && !currentRideId) {
//           setCurrentRideId(data.rideId);
//         }
     
//         AsyncStorage.setItem('lastRideId', data.rideId || currentRideId || '');
     
//         setBookingOTP(data.otp);
//         setShowConfirmModal(true);
//         setRideStatus("searching");
//       } else if (data.message) {
//         Alert.alert("Booking Failed", data.message || "Failed to book ride");
//         setRideStatus("idle");
//         setCurrentRideId(null);
//       }
//     };
//     socket.on("rideCreated", handleRideCreated);
//     return () => {
//       socket.off("rideCreated", handleRideCreated);
//     };
//   }, [currentRideId]);

//   // Handle confirm booking
//   const handleConfirmBooking = async () => {
//     console.log('Confirming booking with OTP:', bookingOTP);
//     console.log('Current Ride ID:', currentRideId);
//     let rideIdToUse = currentRideId;
 
//     if (!rideIdToUse) {
//       rideIdToUse = await AsyncStorage.getItem('currentRideId');
//       console.log('🔄 Using rideId from storage:', rideIdToUse);
//     }
 
//     if (!rideIdToUse) {
//       Alert.alert("Error", "Invalid booking state. Please try booking again.");
//       setShowConfirmModal(false);
//       return;
//     }
 
//     setCurrentRideId(rideIdToUse);
//     setRideStatus("searching"); // Change to "searching" first
//     setShowConfirmModal(false);
 
//     console.log('🚀 Waiting for driver to accept ride:', rideIdToUse);
 
//     // Start polling for ride status updates
//     const statusPollInterval = setInterval(() => {
//       if (currentRideId) {
//         socket.emit('getRideStatus', { rideId: currentRideId });
//       }
//     }, 5000); // Poll every 5 seconds
 
//     AsyncStorage.setItem('statusPollInterval', statusPollInterval.toString());
//   };

//   // Render vehicle icon
//   const renderVehicleIcon = (type: 'bike' | 'taxi' | 'port', size: number = 24, color: string = '#000000') => {
//     try {
//       switch (type) {
//         case 'bike': return <BikeIcon width={size} height={size} fill={color} />;
//         case 'taxi': return <TaxiIcon width={size} height={size} fill={color} />;
//         case 'port': return <LorryIcon width={size} height={size} fill={color} />;
//         default: return <TaxiIcon width={size} height={size} fill={color} />;
//       }
//     } catch (error) {
//       return <TaxiIcon width={size} height={size} fill={color} />;
//     }
//   };

//   // Render suggestion item
//   const renderSuggestionItem = (item: SuggestionType, onSelect: () => void, key: string) => {
//     let iconName = 'location-on';
//     let iconColor = '#A9A9A9';
//     if (item.type.includes('railway') || item.type.includes('station')) { iconName = 'train'; iconColor = '#3F51B5'; }
//     else if (item.type.includes('airport')) { iconName = 'flight'; iconColor = '#2196F3'; }
//     else if (item.type.includes('bus')) { iconName = 'directions-bus'; iconColor = '#FF9800'; }
//     else if (item.type.includes('hospital')) { iconName = 'local-hospital'; iconColor = '#F44336'; }
//     else if (item.type.includes('school') || item.type.includes('college')) { iconName = 'school'; iconColor = '#4CAF50'; }
//     else if (item.type.includes('place_of_worship')) { iconName = 'church'; iconColor = '#9C27B0'; }
//     else if (item.type.includes('shop') || item.type.includes('mall')) { iconName = 'shopping-mall'; iconColor = '#E91E63'; }
//     else if (item.type.includes('park')) { iconName = 'park'; iconColor = '#4CAF50'; }
 
//     return (
//       <TouchableOpacity key={key} style={styles.suggestionItem} onPress={onSelect}>
//         <MaterialIcons name={iconName as any} size={20} color={iconColor} style={styles.suggestionIcon} />
//         <View style={styles.suggestionTextContainer}>
//           <Text style={styles.suggestionMainText} numberOfLines={1}>{extractMainName(item.name)}</Text>
//           <Text style={styles.suggestionSubText} numberOfLines={1}>{item.address}</Text>
//         </View>
//       </TouchableOpacity>
//     );
//   };

//   // Extract main name
//   const extractMainName = (fullName: string): string => {
//     const parts = fullName.split(',');
//     return parts[0].trim();
//   };

//   // Check if book ride button is enabled
//   const isBookRideButtonEnabled = pickup && dropoff && selectedRideType && estimatedPrice !== null;

//   // Reverse geocode
//   const reverseGeocode = async (lat: number, lon: number): Promise<string | null> => {
//     try {
//       const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1&countrycodes=IN`;
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       return data.display_name || null;
//     } catch (error) {
//       console.error('Reverse geocode error:', error);
//       return null;
//     }
//   };

//   // Handle region change complete
//   const handleRegionChangeComplete = async (region: any, isPickup: boolean) => {
//     if (regionChangeTimer.current) {
//       clearTimeout(regionChangeTimer.current);
//     }
//     regionChangeTimer.current = setTimeout(async () => {
//       const addr = await reverseGeocode(region.latitude, region.longitude);
//       if (addr) {
//         if (isPickup) {
//           propHandlePickupChange(addr);
//           setPickupLocation({ latitude: region.latitude, longitude: region.longitude });
//           setIsPickupCurrent(false);
//           if (dropoffLocation) fetchRoute(dropoffLocation);
//           fetchNearbyDrivers(region.latitude, region.longitude);
//         } else {
//           propHandleDropoffChange(addr);
//           setDropoffLocation({ latitude: region.latitude, longitude: region.longitude });
//           if (pickupLocation) fetchRoute({ latitude: region.latitude, longitude: region.longitude });
//         }
//       }
//     }, 500);
//   };

//   return (
//     <View style={styles.container}>
//       {isLoadingLocation ? (
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#4CAF50" />
//           <Text style={styles.loadingText}>Fetching your location...</Text>
//         </View>
//       ) : (
//         <>
//           <View style={styles.mapContainer}>
//             {location && (
//               <MapView
//                 ref={mapRef}
//                 style={styles.map}
//                 initialRegion={{
//                   latitude: location.latitude,
//                   longitude: location.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 showsUserLocation
//               >
//                 {/* Pickup & Drop markers */}
//                 {pickupLocation && (
//                   <Marker
//                     coordinate={pickupLocation}
//                     title="Pickup"
//                     pinColor="blue"
//                   />
//                 )}
//                 {dropoffLocation && (
//                   <Marker
//                     coordinate={dropoffLocation}
//                     title="Dropoff"
//                     pinColor="red"
//                   />
//                 )}
//                 {/* Driver marker */}
//                 {driverLocation && (
//                   <Marker
//                     coordinate={driverLocation}
//                     title="Driver"
//                     key={`driver-${driverLocation.latitude}-${driverLocation.longitude}`}
//                   >
//                     <View style={styles.driverMarkerContainer}>
//                       <View
//                         style={[
//                           styles.vehicleIconContainer,
//                           {
//                             backgroundColor:
//                               rideStatus === "onTheWay" ||
//                               rideStatus === "arrived" ||
//                               rideStatus === "started"
//                                 ? "#FF6B00"
//                                 : "#4CAF50",
//                           },
//                         ]}
//                       >
//                         {renderVehicleIcon(selectedRideType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                       </View>
//                     </View>
//                   </Marker>
//                 )}
//                 {/* Nearby Drivers */}
//                 {(rideStatus === "idle" || rideStatus === "searching") &&
//                   nearbyDrivers &&
//                   nearbyDrivers.length > 0 &&
//                   nearbyDrivers.map((driver) => (
//                     <Marker
//                       key={`nearby-${driver.driverId}-${driver.location.coordinates[1]}-${driver.location.coordinates[0]}`}
//                       coordinate={{
//                         latitude: driver.location.coordinates[1],
//                         longitude: driver.location.coordinates[0],
//                       }}
//                       title={`${driver.name} (${driver.status || "Live"})`}
//                     >
//                       <View style={styles.driverMarkerContainer}>
//                         <View style={styles.vehicleIconContainer}>
//                           {renderVehicleIcon(driver.vehicleType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                         </View>
//                       </View>
//                     </Marker>
//                   ))}
//                 {/* Route polyline */}
//                 {routeCoords && routeCoords.length > 0 && (
//                   <Polyline
//                     coordinates={routeCoords}
//                     strokeWidth={5}
//                     strokeColor="#4CAF50"
//                   />
//                 )}
//               </MapView>
//             )}
         
//             {/* Driver count display based on ride status */}
//             {(rideStatus === "idle" || rideStatus === "searching") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Available Drivers Nearby: {nearbyDriversCount}
//                 </Text>
//               </View>
//             )}
//             {/* Active ride: Show driver status */}
//             {(rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Your Driver is on the way
//                 </Text>
//               </View>
//             )}
//           </View>
          
//           {/* Driver Info Section */}
//           {acceptedDriver && (
//             <View style={styles.driverInfoContainer}>
//               <Text style={styles.driverInfoTitle}>Your Driver</Text>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="person" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.name}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="phone" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.driverMobile || 'N/A'}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="directions-car" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.vehicleType}</Text>
//               </View>
//             </View>
//           )}
          
//           {/* Status Indicator */}
//           {rideStatus === "onTheWay" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Driver is on the way
//                 {driverLocation && pickupLocation && (
//                   <Text style={styles.distanceText}>
//                     {"\n"}Estimated arrival: {calculateDistance(
//                       pickupLocation.latitude,
//                       pickupLocation.longitude,
//                       driverLocation.latitude,
//                       driverLocation.longitude
//                     ).toFixed(1)} km away
//                   </Text>
//                 )}
//               </Text>
//             </View>
//           )}
//           {rideStatus === "arrived" && (
//             <View style={[styles.driversCountOverlay, { backgroundColor: '#4CAF50' }]}>
//               <Text style={[styles.driversCountText, { color: '#FFFFFF' }]}>
//                 🎉 Driver Has Arrived!
//               </Text>
//             </View>
//           )}
//           {rideStatus === "started" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Ride in Progress...
//               </Text>
//             </View>
//           )}
          
//           {/* Input Container */}
//           <View style={styles.inputContainer}>
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="my-location" size={20} color="#4CAF50" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter pickup location"
//                   value={pickup}
//                   onChangeText={handlePickupChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowPickupMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>SELECT MAP</Text>
//               </TouchableOpacity>
//             </View>
         
//             {showPickupSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {pickupLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : suggestionsError ? (
//                   <View style={styles.errorContainer}>
//                     <Text style={styles.errorText}>{suggestionsError}</Text>
//                   </View>
//                 ) : pickupSuggestions.length > 0 ? (
//                   pickupSuggestions.map((item) => (
//                     renderSuggestionItem(item, () => selectPickupSuggestion(item), item.id)
//                   ))
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}
         
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="place" size={20} color="#F44336" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter dropoff location"
//                   value={dropoff}
//                   onChangeText={handleDropoffChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowDropoffMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>SELECT MAP</Text>
//               </TouchableOpacity>
//             </View>
         
//             {showDropoffSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {dropoffLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : suggestionsError ? (
//                   <View style={styles.errorContainer}>
//                     <Text style={styles.errorText}>{suggestionsError}</Text>
//                   </View>
//                 ) : dropoffSuggestions.length > 0 ? (
//                   dropoffSuggestions.map((item) => (
//                     renderSuggestionItem(item, () => selectDropoffSuggestion(item), item.id)
//                   ))
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}
//           </View>
       
//           {/* API Error */}
//           {apiError && (
//             <View style={styles.errorContainer}>
//               <Text style={styles.errorText}>{apiError}</Text>
//             </View>
//           )}
       
//           {/* Ride Type Selector */}
//           <RideTypeSelector
//             selectedRideType={selectedRideType}
//             setSelectedRideType={handleRideTypeSelect}
//             estimatedPrice={estimatedPrice}
//             distance={distance}
//             dynamicPrices={dynamicPrices}
//           />
       
//           {/* Book Ride Button */}
//           <View style={styles.bookRideButtonContainer}>
//             <TouchableOpacity
//               style={[
//                 styles.bookRideButton,
//                 isBookRideButtonEnabled ? styles.enabledBookRideButton : styles.disabledBookRideButton,
//               ]}
//               onPress={handleBookRide}
//               disabled={!isBookRideButtonEnabled}
//             >
//               <Text style={styles.bookRideButtonText}>BOOK RIDE</Text>
//             </TouchableOpacity>
//           </View>
       
//           {/* Route Details Modal */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showRouteDetailsModal}
//             onRequestClose={() => setShowRouteDetailsModal(false)}
//           >
//             <View style={styles.routeDetailsModalOverlay}>
//               <View style={styles.routeDetailsModalContainer}>
//                 <View style={styles.routeDetailsModalHeader}>
//                   <Text style={styles.routeDetailsModalTitle}>ROUTE DETAILS</Text>
//                   <TouchableOpacity onPress={() => setShowRouteDetailsModal(false)}>
//                     <MaterialIcons name="close" size={24} color="#333" />
//                   </TouchableOpacity>
//                 </View>
                
//                 <View style={styles.routeDetailsContent}>
//                   <View style={styles.routeDetailsRow}>
//                     <Text style={styles.routeDetailsLabel}>DISTANCE:</Text>
//                     <Text style={styles.routeDetailsValue}>{distance || '---'}</Text>
//                   </View>
//                   <View style={styles.routeDetailsRow}>
//                     <Text style={styles.routeDetailsLabel}>TRAVEL TIME:</Text>
//                     <Text style={styles.routeDetailsValue}>{travelTime || '---'}</Text>
//                   </View>
                  
//                   <View style={styles.routeDetailsDivider} />
                  
//                   <Text style={styles.availableDriversText}>Available Drivers Nearby: {nearbyDriversCount}</Text>
                  
//                   <View style={styles.rideOptionsContainer}>
//                     {/* Porter Option */}
//                     <TouchableOpacity
//                       style={[
//                         styles.rideOptionButton,
//                         selectedRideType === 'port' && styles.selectedRideOptionButton,
//                       ]}
//                       onPress={() => setSelectedRideType('port')}
//                     >
//                       <View style={styles.rideOptionIconContainer}>
//                         <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//                       </View>
//                       <View style={styles.rideOptionInfoContainer}>
//                         <Text style={[
//                           styles.rideOptionTypeText,
//                           selectedRideType === 'port' && styles.selectedRideOptionTypeText,
//                         ]}>CarGo Porter</Text>
//                         <Text style={[
//                           styles.rideOptionDetailsText,
//                           selectedRideType === 'port' && styles.selectedRideOptionDetailsText,
//                         ]}>Max 5 ton</Text>
//                         <Text style={styles.rideOptionPriceText}>
//                           {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//                         </Text>
//                       </View>
//                     </TouchableOpacity>
                    
//                     {/* Taxi Option */}
//                     <TouchableOpacity
//                       style={[
//                         styles.rideOptionButton,
//                         selectedRideType === 'taxi' && styles.selectedRideOptionButton,
//                       ]}
//                       onPress={() => setSelectedRideType('taxi')}
//                     >
//                       <View style={styles.rideOptionIconContainer}>
//                         <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//                       </View>
//                       <View style={styles.rideOptionInfoContainer}>
//                         <Text style={[
//                           styles.rideOptionTypeText,
//                           selectedRideType === 'taxi' && styles.selectedRideOptionTypeText,
//                         ]}>Taxi</Text>
//                         <Text style={[
//                           styles.rideOptionDetailsText,
//                           selectedRideType === 'taxi' && styles.selectedRideOptionDetailsText,
//                         ]}>4 seats</Text>
//                         <Text style={styles.rideOptionPriceText}>
//                           {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//                         </Text>
//                       </View>
//                     </TouchableOpacity>
                    
//                     {/* Bike Option */}
//                     <TouchableOpacity
//                       style={[
//                         styles.rideOptionButton,
//                         selectedRideType === 'bike' && styles.selectedRideOptionButton,
//                       ]}
//                       onPress={() => setSelectedRideType('bike')}
//                     >
//                       <View style={styles.rideOptionIconContainer}>
//                         <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//                       </View>
//                       <View style={styles.rideOptionInfoContainer}>
//                         <Text style={[
//                           styles.rideOptionTypeText,
//                           selectedRideType === 'bike' && styles.selectedRideOptionTypeText,
//                         ]}>Motorcycle</Text>
//                         <Text style={[
//                           styles.rideOptionDetailsText,
//                           selectedRideType === 'bike' && styles.selectedRideOptionDetailsText,
//                         ]}>1 person</Text>
//                         <Text style={styles.rideOptionPriceText}>
//                           {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//                         </Text>
//                       </View>
//                     </TouchableOpacity>
//                   </View>
//                 </View>
                
//                 <View style={styles.routeDetailsModalButtons}>
//                   <TouchableOpacity
//                     style={styles.routeDetailsCancelButton}
//                     onPress={() => setShowRouteDetailsModal(false)}
//                   >
//                     <Text style={styles.routeDetailsCancelButtonText}>CANCEL</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={styles.routeDetailsConfirmButton}
//                     onPress={() => {
//                       setShowRouteDetailsModal(false);
//                       if (isBookRideButtonEnabled) {
//                         handleBookRide();
//                       }
//                     }}
//                   >
//                     <Text style={styles.routeDetailsConfirmButtonText}>BOOK NOW</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
       
//           {/* Confirm Modal */}
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showConfirmModal}
//             onRequestClose={() => setShowConfirmModal(false)}
//           >
//             <View style={styles.modalOverlay}>
//               <View style={styles.modalContainer}>
//                 <View style={styles.modalHeader}>
//                   <Text style={styles.modalTitle}>Confirm Booking</Text>
//                   <TouchableOpacity onPress={() => setShowConfirmModal(false)}>
//                     <MaterialIcons name="close" size={24} color="#666" />
//                   </TouchableOpacity>
//                 </View>
//                 <View style={styles.modalContent}>
//                   <View style={styles.modalIconContainer}>
//                     <Ionicons name="checkmark-circle" size={60} color="#4CAF50" />
//                   </View>
//                   <Text style={styles.modalMessage}>
//                     Thank you for choosing EAZY GO!
//                   </Text>
//                   <Text style={styles.modalSubMessage}>
//                     Your ride has been successfully booked.
//                   </Text>
//                   <View style={styles.otpContainer}>
//                     <Text style={styles.otpLabel}>Your pickup OTP is:</Text>
//                     <Text style={styles.otpValue}>{bookingOTP}</Text>
//                   </View>
//                   <Text style={styles.otpWarning}>
//                     Please don't share it with anyone. Only share with our driver.
//                   </Text>
//                 </View>
//                 <View style={styles.modalButtons}>
//                   <TouchableOpacity
//                     style={styles.modalCancelButton}
//                     onPress={() => setShowConfirmModal(false)}
//                   >
//                     <Text style={styles.modalCancelButtonText}>Cancel</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={styles.modalConfirmButton}
//                     onPress={handleConfirmBooking}
//                   >
//                     <Text style={styles.modalConfirmButtonText}>Confirm</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
          
//           {/* Pickup Map Modal */}
//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showPickupMapModal}
//             onRequestClose={() => setShowPickupMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: pickupLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: pickupLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, true)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#4CAF50" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowPickupMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>
          
//           {/* Dropoff Map Modal */}
//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showDropoffMapModal}
//             onRequestClose={() => setShowDropoffMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: dropoffLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: dropoffLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, false)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#F44336" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowDropoffMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>
//         </>
//       )}
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: { flex: 1, backgroundColor: '#F5F5F5' },
//   loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
//   loadingText: { color: '#757575', fontSize: 16, marginTop: 10 },
//   mapContainer: {
//     height: Dimensions.get('window').height * 0.6, // 60% of screen
//     width: '100%',
//     borderRadius: 15,
//     overflow: 'hidden',
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   map: { ...StyleSheet.absoluteFillObject },
//   driversCountOverlay: {
//     position: 'absolute',
//     top: 10,
//     left: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     paddingHorizontal: 12,
//     paddingVertical: 8,
//     borderRadius: 20,
//     elevation: 2,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.2,
//     shadowRadius: 2
//   },
//   driversCountText: { fontSize: 14, fontWeight: '600', color: '#333333' },
//   driverInfoContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   driverInfoTitle: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#333333',
//     marginBottom: 10
//   },
//   driverDetailsRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   driverDetailText: {
//     fontSize: 14,
//     color: '#555555',
//     marginLeft: 10
//   },
//   statusContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   statusIndicator: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   statusText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#4CAF50',
//     marginLeft: 10
//   },
//   statusSubText: {
//     fontSize: 14,
//     color: '#757575',
//     textAlign: 'center'
//   },
//   inputContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   inputRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   inputWrapper: {
//     flex: 1,
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingHorizontal: 15,
//     paddingVertical: 5,
//   },
//   inputIconContainer: {
//     marginRight: 10,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   distanceText: {
//     fontSize: 12,
//     fontWeight: 'normal',
//     color: '#666666',
//   },
//   input: { flex: 1, fontSize: 16, paddingVertical: 12, color: '#333' },
//   selectMapButton: {
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     backgroundColor: '#4CAF50',
//     borderRadius: 5,
//     marginRight: 10,
//   },
//   selectMapButtonText: {
//     color: '#FFFFFF',
//     fontSize: 12,
//   },
//   suggestionsContainer: {
//     marginTop: 5,
//     marginHorizontal: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 8,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     maxHeight: 200
//   },
//   suggestionItem: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingVertical: 12,
//     paddingHorizontal: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   suggestionIcon: { marginRight: 12 },
//   suggestionTextContainer: { flex: 1 },
//   suggestionMainText: { fontSize: 16, fontWeight: '500', color: '#333333' },
//   suggestionSubText: { fontSize: 12, color: '#757575', marginTop: 2 },
//   noSuggestionsContainer: { paddingVertical: 12, alignItems: 'center' },
//   noSuggestionsText: { fontSize: 14, color: '#666666' },
//   distanceTimeContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   distanceTimeItem: { flexDirection: 'row', alignItems: 'center' },
//   distanceTimeLabel: { fontSize: 14, fontWeight: '600', color: '#757575', marginLeft: 8 },
//   distanceTimeValue: { fontSize: 14, fontWeight: 'bold', color: '#333333', marginLeft: 5 },
//   rideTypeContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//   },
//   rideTypeButton: {
//     width: '100%',
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 5,
//     marginBottom: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   selectedRideTypeButton: {
//     backgroundColor: '#4caf50',
//     borderWidth: 2,
//     borderColor: '#4caf50'
//   },
//   rideIconContainer: {
//     marginRight: 15,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideInfoContainer: {
//     flex: 1,
//   },
//   rideTypeText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 4,
//   },
//   selectedRideTypeText: {
//     color: '#FFFFFF'
//   },
//   rideDetailsText: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 6,
//   },
//   selectedRideDetailsText: {
//     color: '#FFFFFF'
//   },
//   ridePriceText: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   bookRideButtonContainer: {
//     marginHorizontal: 20,
//     marginBottom: 20
//   },
//   bookRideButton: {
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   enabledBookRideButton: { backgroundColor: '#4caf50' },
//   disabledBookRideButton: { backgroundColor: '#BDBDBD' },
//   bookRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   errorContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFEBEE',
//     borderRadius: 12,
//     padding: 15,
//     borderLeftWidth: 4,
//     borderLeftColor: '#F44336'
//   },
//   errorText: {
//     color: '#D32F2F',
//     fontSize: 14,
//     textAlign: 'center'
//   },
//   pricePanel: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     padding: 20,
//     maxHeight: Dimensions.get('window').height * 0.5,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   panelHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//     paddingBottom: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   panelTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   priceDetailsContainer: {
//     flexDirection: 'row',
//     marginBottom: 8
//   },
//   driverMarkerContainer: {
//     alignItems: 'center',
//     justifyContent: 'center',
//     width: 50,
//     height: 50,
//   },
//   vehicleIconContainer: {
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     backgroundColor: '#4CAF50',
//     alignItems: 'center',
//     justifyContent: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   priceInfoContainer: {
//     flex: 1
//   },
//   priceRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 10
//   },
//   priceLabel: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     flex: 1
//   },
//   priceValue: {
//     fontSize: 13,
//     fontWeight: 'bold',
//     color: '#333333',
//     flex: 2,
//     textAlign: 'right'
//   },
//   returnTripRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginTop: 5
//   },
//   bookButtonContainer: {
//     marginTop: 10
//   },
//   bookMyRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   bookMyRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   modalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   modalContainer: {
//     width: '85%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   modalHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   modalContent: {
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalIconContainer: {
//     marginBottom: 15
//   },
//   modalMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 5
//   },
//   modalSubMessage: {
//     fontSize: 16,
//     color: '#666666',
//     textAlign: 'center',
//     marginBottom: 20
//   },
//   otpContainer: {
//     backgroundColor: '#F5F5F5',
//     borderRadius: 10,
//     padding: 15,
//     alignItems: 'center',
//     marginBottom: 15,
//     width: '100%'
//   },
//   otpLabel: {
//     fontSize: 14,
//     color: '#666666',
//     marginBottom: 5
//   },
//   otpValue: {
//     fontSize: 24,
//     fontWeight: 'bold',
//     color: '#4caf50'
//   },
//   otpWarning: {
//     fontSize: 12,
//     color: '#F44336',
//     textAlign: 'center',
//     fontStyle: 'italic'
//   },
//   modalButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between'
//   },
//   modalCancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginRight: 10,
//     alignItems: 'center'
//   },
//   modalCancelButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#666666'
//   },
//   modalConfirmButton: {
//     flex: 1,
//     backgroundColor: '#4CAF50',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginLeft: 10,
//     alignItems: 'center'
//   },
//   modalConfirmButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#FFFFFF'
//   },
//   vehicleMarkerContainer: {
//     borderRadius: 20,
//     padding: 5,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   modalMapContainer: {
//     flex: 1,
//     position: 'relative',
//   },
//   modalMap: {
//     flex: 1,
//   },
//   centerMarker: {
//     position: 'absolute',
//     top: '50%',
//     left: '50%',
//     transform: [{ translateX: -24 }, { translateY: -48 }],
//   },
//   modalCloseButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 8,
//     elevation: 3,
//   },
//   // Route Details Modal Styles
//   routeDetailsModalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   routeDetailsModalContainer: {
//     width: '90%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   routeDetailsModalHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20,
//     paddingBottom: 10,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   routeDetailsModalTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   routeDetailsContent: {
//     marginBottom: 20
//   },
//   routeDetailsRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15
//   },
//   routeDetailsLabel: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333'
//   },
//   routeDetailsValue: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#4CAF50'
//   },
//   routeDetailsDivider: {
//     height: 1,
//     backgroundColor: '#EEEEEE',
//     marginVertical: 15
//   },
//   availableDriversText: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 15
//   },
//   rideOptionsContainer: {
//     marginBottom: 10
//   },
//   rideOptionButton: {
//     width: '100%',
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginBottom: 10,
//     borderWidth: 1,
//     borderColor: '#EEEEEE'
//   },
//   selectedRideOptionButton: {
//     backgroundColor: '#4caf50',
//     borderWidth: 1,
//     borderColor: '#4caf50'
//   },
//   rideOptionIconContainer: {
//     marginRight: 15,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideOptionInfoContainer: {
//     flex: 1,
//   },
//   rideOptionTypeText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 4,
//   },
//   selectedRideOptionTypeText: {
//     color: '#FFFFFF'
//   },
//   rideOptionDetailsText: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 6,
//   },
//   selectedRideOptionDetailsText: {
//     color: '#FFFFFF'
//   },
//   rideOptionPriceText: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   routeDetailsModalButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between'
//   },
//   routeDetailsCancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginRight: 10,
//     alignItems: 'center'
//   },
//   routeDetailsCancelButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#666666'
//   },
//   routeDetailsConfirmButton: {
//     flex: 1,
//     backgroundColor: '#4CAF50',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginLeft: 10,
//     alignItems: 'center'
//   },
//   routeDetailsConfirmButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#FFFFFF'
//   }
// });

// export default TaxiContent;




















// import React, { useState, useEffect, useRef, useCallback } from 'react';
// import {
//   View,
//   StyleSheet,
//   Text,
//   TouchableOpacity,
//   Dimensions,
//   Alert,
//   ActivityIndicator,
//   Animated,
//   Modal,
//   TextInput,
//   PermissionsAndroid,
//   Platform,
// } from 'react-native';
// import MapView, { Marker, Polyline } from 'react-native-maps';
// import Geolocation from '@react-native-community/geolocation';
// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import BikeIcon from '../../../assets001/bike.svg';
// import LorryIcon from '../../../assets001/lorry.svg';
// import TaxiIcon from '../../../assets001/taxi.svg';

// interface LocationType {
//   latitude: number;
//   longitude: number;
// }

// interface SuggestionType {
//   id: string;
//   name: string;
//   address: string;
//   lat: string;
//   lon: string;
//   type: string;
//   importance: number;
// }

// interface TaxiContentProps {
//   loadingLocation?: boolean;
//   currentLocation: LocationType | null;
//   lastSavedLocation: LocationType | null;
//   pickup: string;
//   dropoff: string;
//   handlePickupChange: (text: string) => void;
//   handleDropoffChange: (text: string) => void;
// }

// const TaxiContent: React.FC<TaxiContentProps> = ({
//   loadingLocation: propLoadingLocation,
//   currentLocation: propCurrentLocation,
//   lastSavedLocation: propLastSavedLocation,
//   pickup,
//   dropoff,
//   handlePickupChange: propHandlePickupChange,
//   handleDropoffChange: propHandleDropoffChange,
// }) => {
//   const [isLoadingLocation, setIsLoadingLocation] = useState(true);
//   const [location, setLocation] = useState<LocationType | null>(null);
//   const [pickupLocation, setPickupLocation] = useState<LocationType | null>(null);
//   const [dropoffLocation, setDropoffLocation] = useState<LocationType | null>(null);
//   const [routeCoords, setRouteCoords] = useState<LocationType[]>([]);
//   const [distance, setDistance] = useState<string>('');
//   const [travelTime, setTravelTime] = useState<string>('');
//   const [showPickupMapModal, setShowPickupMapModal] = useState(false);
//   const [showDropoffMapModal, setShowDropoffMapModal] = useState(false);
//   const [pickupSuggestions, setPickupSuggestions] = useState<SuggestionType[]>([]);
//   const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);
//   const [dropoffSuggestions, setDropoffSuggestions] = useState<SuggestionType[]>([]);
//   const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);
//   const [pickupLoading, setPickupLoading] = useState(false);
//   const [dropoffLoading, setDropoffLoading] = useState(false);

//   // NEW STATES FOR POPUP
//   const [showRouteDetails, setShowRouteDetails] = useState(false);
//   const [popupOpacity] = useState(new Animated.Value(0));
//   const [selectedRideType, setSelectedRideType] = useState<string>('taxi');

//   const pickupDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const dropoffDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const regionChangeTimer = useRef<NodeJS.Timeout | null>(null);
//   const mapRef = useRef<MapView | null>(null);
  
//   const fallbackLocation: LocationType = {
//     latitude: 11.3312971,
//     longitude: 77.7167303,
//   };

//   // Show popup when route is generated
//   useEffect(() => {
//     if (distance && travelTime && routeCoords.length > 0) {
//       console.log('📍 Route generated - showing details popup');
//       setShowRouteDetails(true);
//       Animated.timing(popupOpacity, {
//         toValue: 1,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     } else {
//       setShowRouteDetails(false);
//       Animated.timing(popupOpacity, {
//         toValue: 0,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     }
//   }, [distance, travelTime, routeCoords]);

//   // Close popup function
//   const closeRouteDetailsPopup = () => {
//     Animated.timing(popupOpacity, {
//       toValue: 0,
//       duration: 300,
//       useNativeDriver: true,
//     }).start(() => {
//       setShowRouteDetails(false);
//     });
//   };

//   // Handle transport selection from popup
//   const handleTransportSelectFromPopup = (type: string) => {
//     setSelectedRideType(type);
//     // You can add your booking logic here
//     console.log(`Selected ride type: ${type}`);
//     closeRouteDetailsPopup();
//   };

//   // Location setup
//   useEffect(() => {
//     const requestLocation = async () => {
//       setIsLoadingLocation(true);
      
//       if (propCurrentLocation) {
//         setLocation(propCurrentLocation);
//         setIsLoadingLocation(false);
//         return;
//       }
//       if (propLastSavedLocation) {
//         setLocation(propLastSavedLocation);
//         setIsLoadingLocation(false);
//         return;
//       }
      
//       setLocation(fallbackLocation);
//       setIsLoadingLocation(false);
      
//       if (Platform.OS === "android") {
//         const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
//         if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
//           Alert.alert("Permission Denied", "Location permission is required to proceed.");
//           return;
//         }
//       }
      
//       Geolocation.getCurrentPosition(
//         (pos) => {
//           const loc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//           setLocation(loc);
//         },
//         (err) => {
//           console.log("Location error:", err);
//         },
//         { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//       );
//     };
    
//     requestLocation();
//   }, [propCurrentLocation, propLastSavedLocation]);

//   // Fetch route between pickup and dropoff
//   const fetchRoute = async (dropCoord: LocationType) => {
//     if (!pickupLocation) return;
    
//     try {
//       const url = `https://router.project-osrm.org/route/v1/driving/${pickupLocation.longitude},${pickupLocation.latitude};${dropCoord.longitude},${dropCoord.latitude}?overview=full&geometries=geojson`;
//       const res = await fetch(url);
//       const data = await res.json();
      
//       if (data.code === "Ok" && data.routes.length > 0) {
//         const coords = data.routes[0].geometry.coordinates.map(([lng, lat]: number[]) => ({ 
//           latitude: lat, 
//           longitude: lng 
//         }));
//         setRouteCoords(coords);
//         const calculatedDistance = (data.routes[0].distance / 1000).toFixed(2) + " km";
//         const calculatedTime = Math.round(data.routes[0].duration / 60) + " mins";
//         setDistance(calculatedDistance);
//         setTravelTime(calculatedTime);
        
//         // Show popup automatically
//         setShowRouteDetails(true);
//         Animated.timing(popupOpacity, {
//           toValue: 1,
//           duration: 300,
//           useNativeDriver: true,
//         }).start();
//       }
//     } catch (err) {
//       console.error('Route fetch error:', err);
//     }
//   };

//   // Fetch location suggestions
//   const fetchSuggestions = async (query: string, type: 'pickup' | 'dropoff'): Promise<SuggestionType[]> => {
//     try {
//       if (type === 'pickup') setPickupLoading(true);
//       else setDropoffLoading(true);
      
//       const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=5&addressdetails=1&countrycodes=IN`;
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
      
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
      
//       const suggestions: SuggestionType[] = data.map((item: any) => ({
//         id: item.place_id || `${item.lat}-${item.lon}`,
//         name: item.display_name,
//         address: extractAddress(item),
//         lat: item.lat,
//         lon: item.lon,
//         type: item.type || 'unknown',
//         importance: item.importance || 0,
//       }));
      
//       return suggestions;
//     } catch (error) {
//       console.error('Suggestions fetch error:', error);
//       return [];
//     } finally {
//       if (type === 'pickup') setPickupLoading(false);
//       else setDropoffLoading(false);
//     }
//   };

//   const extractAddress = (item: any): string => {
//     if (item.address) {
//       const parts = [];
//       if (item.address.road) parts.push(item.address.road);
//       if (item.address.suburb) parts.push(item.address.suburb);
//       if (item.address.city || item.address.town || item.address.village) parts.push(item.address.city || item.address.town || item.address.village);
//       if (item.address.state) parts.push(item.address.state);
//       return parts.join(', ');
//     }
//     return item.display_name;
//   };

//   // Handle pickup location input
//   const handlePickupChange = (text: string) => {
//     propHandlePickupChange(text);
    
//     if (pickupDebounceTimer.current) {
//       clearTimeout(pickupDebounceTimer.current);
//     }
    
//     if (text.length > 2) {
//       setPickupLoading(true);
//       setShowPickupSuggestions(true);
//       pickupDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'pickup');
//         setPickupSuggestions(sugg);
//         setPickupLoading(false);
//       }, 500);
//     } else {
//       setShowPickupSuggestions(false);
//       setPickupSuggestions([]);
//     }
//   };

//   // Handle dropoff location input
//   const handleDropoffChange = (text: string) => {
//     propHandleDropoffChange(text);
    
//     if (dropoffDebounceTimer.current) {
//       clearTimeout(dropoffDebounceTimer.current);
//     }
    
//     if (text.length > 2) {
//       setDropoffLoading(true);
//       setShowDropoffSuggestions(true);
//       dropoffDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'dropoff');
//         setDropoffSuggestions(sugg);
//         setDropoffLoading(false);
//       }, 500);
//     } else {
//       setShowDropoffSuggestions(false);
//       setDropoffSuggestions([]);
//     }
//   };

//   // Select pickup suggestion
//   const selectPickupSuggestion = (suggestion: SuggestionType) => {
//     propHandlePickupChange(suggestion.name);
//     const loc = { latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) };
//     setPickupLocation(loc);
//     setShowPickupSuggestions(false);
    
//     if (dropoffLocation) {
//       fetchRoute(loc);
//     }
//   };

//   // Select dropoff suggestion
//   const selectDropoffSuggestion = (suggestion: SuggestionType) => {
//     propHandleDropoffChange(suggestion.name);
//     const loc = { latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) };
//     setDropoffLocation(loc);
//     setShowDropoffSuggestions(false);
    
//     if (pickupLocation) {
//       fetchRoute(loc);
//     }
//   };

//   // Reverse geocode for map selection
//   const reverseGeocode = async (lat: number, lon: number): Promise<string | null> => {
//     try {
//       const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1&countrycodes=IN`;
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       return data.display_name || null;
//     } catch (error) {
//       console.error('Reverse geocode error:', error);
//       return null;
//     }
//   };

//   // Handle map region change for location selection
//   const handleRegionChangeComplete = async (region: any, isPickup: boolean) => {
//     if (regionChangeTimer.current) {
//       clearTimeout(regionChangeTimer.current);
//     }
    
//     regionChangeTimer.current = setTimeout(async () => {
//       const addr = await reverseGeocode(region.latitude, region.longitude);
//       if (addr) {
//         if (isPickup) {
//           propHandlePickupChange(addr);
//           setPickupLocation({ latitude: region.latitude, longitude: region.longitude });
//           if (dropoffLocation) fetchRoute(dropoffLocation);
//         } else {
//           propHandleDropoffChange(addr);
//           setDropoffLocation({ latitude: region.latitude, longitude: region.longitude });
//           if (pickupLocation) fetchRoute({ latitude: region.latitude, longitude: region.longitude });
//         }
//       }
//     }, 500);
//   };

//   // Render suggestion item
//   const renderSuggestionItem = (item: SuggestionType, onSelect: () => void, key: string) => {
//     return (
//       <TouchableOpacity key={key} style={styles.suggestionItem} onPress={onSelect}>
//         <MaterialIcons name="location-on" size={20} color="#4CAF50" style={styles.suggestionIcon} />
//         <View style={styles.suggestionTextContainer}>
//           <Text style={styles.suggestionMainText} numberOfLines={1}>{item.name.split(',')[0]}</Text>
//           <Text style={styles.suggestionSubText} numberOfLines={1}>{item.address}</Text>
//         </View>
//       </TouchableOpacity>
//     );
//   };

//   // Render vehicle icon
//   const renderVehicleIcon = (type: 'bike' | 'taxi' | 'port', size: number = 24, color: string = '#000000') => {
//     try {
//       switch (type) {
//         case 'bike': return <BikeIcon width={size} height={size} fill={color} />;
//         case 'taxi': return <TaxiIcon width={size} height={size} fill={color} />;
//         case 'port': return <LorryIcon width={size} height={size} fill={color} />;
//         default: return <TaxiIcon width={size} height={size} fill={color} />;
//       }
//     } catch (error) {
//       return <TaxiIcon width={size} height={size} fill={color} />;
//     }
//   };

//   return (
//     <View style={styles.container}>
//       {isLoadingLocation ? (
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#4CAF50" />
//           <Text style={styles.loadingText}>Fetching your location...</Text>
//         </View>
//       ) : (
//         <>
//           {/* MAP - 60% of screen */}
//           <View style={styles.mapContainer}>
//             {location && (
//               <MapView
//                 ref={mapRef}
//                 style={styles.map}
//                 initialRegion={{
//                   latitude: location.latitude,
//                   longitude: location.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 showsUserLocation
//               >
//                 {/* Pickup Marker */}
//                 {pickupLocation && (
//                   <Marker
//                     coordinate={pickupLocation}
//                     title="Pickup"
//                     pinColor="blue"
//                   />
//                 )}
                
//                 {/* Dropoff Marker */}
//                 {dropoffLocation && (
//                   <Marker
//                     coordinate={dropoffLocation}
//                     title="Dropoff"
//                     pinColor="red"
//                   />
//                 )}
                
//                 {/* Route Polyline */}
//                 {routeCoords && routeCoords.length > 0 && (
//                   <Polyline
//                     coordinates={routeCoords}
//                     strokeWidth={5}
//                     strokeColor="#4CAF50"
//                   />
//                 )}
//               </MapView>
//             )}
//           </View>

//           {/* LOCATION INPUTS */}
//           <View style={styles.inputContainer}>
//             {/* Pickup Location */}
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="my-location" size={20} color="#4CAF50" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter pickup location"
//                   value={pickup}
//                   onChangeText={handlePickupChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowPickupMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>Select on Map</Text>
//               </TouchableOpacity>
//             </View>

//             {/* Pickup Suggestions */}
//             {showPickupSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {pickupLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : pickupSuggestions.length > 0 ? (
//                   pickupSuggestions.map((item) =>
//                     renderSuggestionItem(item, () => selectPickupSuggestion(item), item.id)
//                   )
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}

//             {/* Dropoff Location */}
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="place" size={20} color="#F44336" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter dropoff location"
//                   value={dropoff}
//                   onChangeText={handleDropoffChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowDropoffMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>Select on Map</Text>
//               </TouchableOpacity>
//             </View>

//             {/* Dropoff Suggestions */}
//             {showDropoffSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {dropoffLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : dropoffSuggestions.length > 0 ? (
//                   dropoffSuggestions.map((item) =>
//                     renderSuggestionItem(item, () => selectDropoffSuggestion(item), item.id)
//                   )
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}
//           </View>

//           {/* ROUTE DETAILS POPUP - Same as your image */}
//           {showRouteDetails && (
//             <Animated.View 
//               style={[
//                 styles.routeDetailsPopup,
//                 { 
//                   opacity: popupOpacity,
//                   transform: [{
//                     translateY: popupOpacity.interpolate({
//                       inputRange: [0, 1],
//                       outputRange: [300, 0],
//                     }),
//                   }],
//                 }
//               ]}
//             >
//               {/* Background Overlay */}
//               <TouchableOpacity 
//                 style={styles.routeDetailsOverlay}
//                 activeOpacity={0.5}
//                 onPress={closeRouteDetailsPopup}
//               />
              
//               {/* Popup Content */}
//               <View style={styles.routeDetailsContent}>
//                 <View style={styles.routeDetailsHeader}>
//                   <Text style={styles.routeDetailsTitle}>Route Details</Text>
//                   <TouchableOpacity onPress={closeRouteDetailsPopup}>
//                     <MaterialIcons name="close" size={24} color="#666" />
//                   </TouchableOpacity>
//                 </View>
                
//                 {/* Distance and Time */}
//                 <View style={styles.routeInfoContainer}>
//                   <View style={styles.routeInfoItem}>
//                     <MaterialIcons name="route" size={24} color="#4CAF50" />
//                     <View style={styles.routeInfoText}>
//                       <Text style={styles.routeInfoLabel}>DISTANCE</Text>
//                       <Text style={styles.routeInfoValue}>{distance}</Text>
//                     </View>
//                   </View>
                  
//                   <View style={styles.routeInfoItem}>
//                     <MaterialIcons name="schedule" size={24} color="#2196F3" />
//                     <View style={styles.routeInfoText}>
//                       <Text style={styles.routeInfoLabel}>TRAVEL TIME</Text>
//                       <Text style={styles.routeInfoValue}>{travelTime}</Text>
//                     </View>
//                   </View>
//                 </View>

//                 {/* Transport Options - Same as your image */}
//                 <View style={styles.transportSelection}>
//                   <Text style={styles.transportTitle}>Select Your Ride</Text>
                  
//                   {/* Porter Option */}
//                   <TouchableOpacity 
//                     style={[
//                       styles.transportOption,
//                       selectedRideType === 'port' && styles.transportOptionSelected
//                     ]}
//                     onPress={() => handleTransportSelectFromPopup('port')}
//                   >
//                     <View style={styles.transportIconContainer}>
//                       {renderVehicleIcon('port', 32, selectedRideType === 'port' ? '#FFFFFF' : '#333333')}
//                     </View>
//                     <View style={styles.transportTextContainer}>
//                       <Text style={[
//                         styles.transportName,
//                         selectedRideType === 'port' && styles.transportNameSelected
//                       ]}>CarGo Porter</Text>
//                       <Text style={[
//                         styles.transportDetails,
//                         selectedRideType === 'port' && styles.transportDetailsSelected
//                       ]}>Max 5 ton</Text>
//                       <Text style={styles.transportPrice}>₹2500/km</Text>
//                     </View>
//                   </TouchableOpacity>

//                   {/* Taxi Option */}
//                   <TouchableOpacity 
//                     style={[
//                       styles.transportOption,
//                       selectedRideType === 'taxi' && styles.transportOptionSelected
//                     ]}
//                     onPress={() => handleTransportSelectFromPopup('taxi')}
//                   >
//                     <View style={styles.transportIconContainer}>
//                       {renderVehicleIcon('taxi', 32, selectedRideType === 'taxi' ? '#FFFFFF' : '#333333')}
//                     </View>
//                     <View style={styles.transportTextContainer}>
//                       <Text style={[
//                         styles.transportName,
//                         selectedRideType === 'taxi' && styles.transportNameSelected
//                       ]}>Taxi</Text>
//                       <Text style={[
//                         styles.transportDetails,
//                         selectedRideType === 'taxi' && styles.transportDetailsSelected
//                       ]}>4 seats</Text>
//                       <Text style={styles.transportPrice}>₹500/km</Text>
//                     </View>
//                   </TouchableOpacity>

//                   {/* Bike Option */}
//                   <TouchableOpacity 
//                     style={[
//                       styles.transportOption,
//                       selectedRideType === 'bike' && styles.transportOptionSelected
//                     ]}
//                     onPress={() => handleTransportSelectFromPopup('bike')}
//                   >
//                     <View style={styles.transportIconContainer}>
//                       {renderVehicleIcon('bike', 32, selectedRideType === 'bike' ? '#FFFFFF' : '#333333')}
//                     </View>
//                     <View style={styles.transportTextContainer}>
//                       <Text style={[
//                         styles.transportName,
//                         selectedRideType === 'bike' && styles.transportNameSelected
//                       ]}>Motorcycle</Text>
//                       <Text style={[
//                         styles.transportDetails,
//                         selectedRideType === 'bike' && styles.transportDetailsSelected
//                       ]}>1 person</Text>
//                       <Text style={styles.transportPrice}>₹100/km</Text>
//                     </View>
//                   </TouchableOpacity>
//                 </View>

//                 <TouchableOpacity 
//                   style={styles.continueButton}
//                   onPress={closeRouteDetailsPopup}
//                 >
//                   <Text style={styles.continueButtonText}>CONTINUE</Text>
//                 </TouchableOpacity>
//               </View>
//             </Animated.View>
//           )}

//           {/* Map Modals */}
//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showPickupMapModal}
//             onRequestClose={() => setShowPickupMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: pickupLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: pickupLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, true)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#4CAF50" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowPickupMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>

//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showDropoffMapModal}
//             onRequestClose={() => setShowDropoffMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: dropoffLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: dropoffLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, false)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#F44336" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowDropoffMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>
//         </>
//       )}
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: { 
//     flex: 1, 
//     backgroundColor: '#F5F5F5' 
//   },
//   loadingContainer: { 
//     flex: 1, 
//     justifyContent: 'center', 
//     alignItems: 'center' 
//   },
//   loadingText: { 
//     color: '#757575', 
//     fontSize: 16, 
//     marginTop: 10 
//   },
//   mapContainer: {
//     height: Dimensions.get('window').height * 0.6, // 60% of screen
//     width: '100%',
//   },
//   map: { 
//     ...StyleSheet.absoluteFillObject 
//   },
//   inputContainer: {
//     margin: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   inputRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   inputWrapper: {
//     flex: 1,
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingHorizontal: 15,
//     paddingVertical: 12,
//   },
//   inputIconContainer: {
//     marginRight: 10,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   input: { 
//     flex: 1, 
//     fontSize: 16, 
//     color: '#333' 
//   },
//   selectMapButton: {
//     paddingHorizontal: 12,
//     paddingVertical: 8,
//     backgroundColor: '#4CAF50',
//     borderRadius: 8,
//     marginRight: 10,
//   },
//   selectMapButtonText: {
//     color: '#FFFFFF',
//     fontSize: 12,
//     fontWeight: '600'
//   },
//   suggestionsContainer: {
//     marginHorizontal: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 8,
//     elevation: 3,
//     maxHeight: 200
//   },
//   suggestionItem: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingVertical: 12,
//     paddingHorizontal: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   suggestionIcon: { 
//     marginRight: 12 
//   },
//   suggestionTextContainer: { 
//     flex: 1 
//   },
//   suggestionMainText: { 
//     fontSize: 16, 
//     fontWeight: '500', 
//     color: '#333333' 
//   },
//   suggestionSubText: { 
//     fontSize: 12, 
//     color: '#757575', 
//     marginTop: 2 
//   },
//   noSuggestionsContainer: { 
//     paddingVertical: 12, 
//     alignItems: 'center' 
//   },
//   noSuggestionsText: { 
//     fontSize: 14, 
//     color: '#666666' 
//   },

//   // ROUTE DETAILS POPUP STYLES
//   routeDetailsPopup: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     justifyContent: 'flex-end',
//     zIndex: 1000,
//   },
//   routeDetailsOverlay: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//   },
//   routeDetailsContent: {
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     padding: 20,
//     maxHeight: Dimensions.get('window').height * 0.7,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6,
//   },
//   routeDetailsHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20,
//     paddingBottom: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE',
//   },
//   routeDetailsTitle: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   routeInfoContainer: {
//     marginBottom: 20,
//   },
//   routeInfoItem: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   routeInfoText: {
//     marginLeft: 15,
//   },
//   routeInfoLabel: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 2,
//     fontWeight: '600',
//   },
//   routeInfoValue: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   transportSelection: {
//     marginBottom: 20,
//   },
//   transportTitle: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 15,
//     textAlign: 'center',
//   },
//   transportOption: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#F5F5F5',
//     borderRadius: 12,
//     padding: 15,
//     marginBottom: 10,
//     borderWidth: 2,
//     borderColor: 'transparent',
//   },
//   transportOptionSelected: {
//     backgroundColor: '#4CAF50',
//     borderColor: '#4CAF50',
//   },
//   transportIconContainer: {
//     marginRight: 15,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   transportTextContainer: {
//     flex: 1,
//   },
//   transportName: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 4,
//   },
//   transportNameSelected: {
//     color: '#FFFFFF',
//   },
//   transportDetails: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 6,
//   },
//   transportDetailsSelected: {
//     color: '#FFFFFF',
//   },
//   transportPrice: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   continueButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//   },
//   continueButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600',
//   },
//   modalMapContainer: {
//     flex: 1,
//     position: 'relative',
//   },
//   modalMap: {
//     flex: 1,
//   },
//   centerMarker: {
//     position: 'absolute',
//     top: '50%',
//     left: '50%',
//     transform: [{ translateX: -24 }, { translateY: -48 }],
//   },
//   modalCloseButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 8,
//     elevation: 3,
//   },
// });

// export default TaxiContent;











































































































































































































































































































































































// import React, { useState, useEffect, useRef, useCallback } from 'react';
// import {
//   View,
//   StyleSheet,
//   Text,
//   TouchableOpacity,
//   Dimensions,
//   Alert,
//   ActivityIndicator,
//   Animated,
//   Switch,
//   Modal,
//   TextInput,
//   PermissionsAndroid,
//   Platform,
//   Image
// } from 'react-native';
// import MapView, { Marker, Polyline } from 'react-native-maps';
// import Geolocation from '@react-native-community/geolocation';
// import socket from '../../socket';
// import haversine from 'haversine-distance';
// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
// import Ionicons from 'react-native-vector-icons/Ionicons';
// import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
// import FontAwesome from 'react-native-vector-icons/FontAwesome';
// import axios from 'axios';
// import Svg, { Path, Circle, Rect } from 'react-native-svg';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getBackendUrl } from '../../util/backendConfig';
// import BikeIcon from '../../../assets001/bike.svg';
// import LorryIcon from '../../../assets001/lorry.svg';
// import TaxiIcon from '../../../assets001/taxi.svg';



// const RideTypeSelector = ({ selectedRideType, setSelectedRideType, estimatedPrice, distance, dynamicPrices }) => {
//   return (
//     <View style={styles.rideTypeContainer}>
//       {/* Porter Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'port' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('port')}
//       >
//         <View style={styles.rideIconContainer}>
//           <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'port' && styles.selectedRideTypeText,
//           ]}>CarGo Porter</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'port' && styles.selectedRideDetailsText,
//           ]}>Max 5 ton</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
    
//       {/* Taxi Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'taxi' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('taxi')}
//       >
//         <View style={styles.rideIconContainer}>
//           <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'taxi' && styles.selectedRideTypeText,
//           ]}>Taxi</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'taxi' && styles.selectedRideDetailsText,
//           ]}>4 seats</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
    
//       {/* Bike Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'bike' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('bike')}
//       >
//         <View style={styles.rideIconContainer}>
//           <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'bike' && styles.selectedRideTypeText,
//           ]}>Motorcycle</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'bike' && styles.selectedRideDetailsText,
//           ]}>1 person</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
//     </View>
//   );
// };



// interface LocationType {
//   latitude: number;
//   longitude: number;
// }

// interface SuggestionType {
//   id: string;
//   name: string;
//   address: string;
//   lat: string;
//   lon: string;
//   type: string;
//   importance: number;
// }

// interface DriverType {
//   driverId: string;
//   name: string;
//   location: {
//     coordinates: [number, number]; // [longitude, latitude]
//   };
//   vehicleType: string;
//   status?: string;
//   driverMobile?: string;
// }

// interface TaxiContentProps {
//   loadingLocation?: boolean;
//   currentLocation: LocationType | null;
//   lastSavedLocation: LocationType | null;
//   pickup: string;
//   dropoff: string;
//   handlePickupChange: (text: string) => void;
//   handleDropoffChange: (text: string) => void;
// }

// const TaxiContent: React.FC<TaxiContentProps> = ({
//   loadingLocation: propLoadingLocation,
//   currentLocation: propCurrentLocation,
//   lastSavedLocation: propLastSavedLocation,
//   pickup,
//   dropoff,
//   handlePickupChange: propHandlePickupChange,
//   handleDropoffChange: propHandleDropoffChange,
// }) => {
//   const [isLoadingLocation, setIsLoadingLocation] = useState(true);
//   const [selectedRideType, setSelectedRideType] = useState<string>('taxi');
//   const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);
//   const [showPricePanel, setShowPricePanel] = useState(false);
//   const [wantReturn, setWantReturn] = useState(false);
//   const [distance, setDistance] = useState<string>('');
//   const [travelTime, setTravelTime] = useState<string>('');
//   const [showConfirmModal, setShowConfirmModal] = useState(false);
//   const [bookingOTP, setBookingOTP] = useState<string>('');
//   const [apiError, setApiError] = useState<string | null>(null);
//   const [location, setLocation] = useState<LocationType | null>(null);
//   const [pickupLocation, setPickupLocation] = useState<LocationType | null>(null);
//   const [dropoffLocation, setDropoffLocation] = useState<LocationType | null>(null);
//   const [routeCoords, setRouteCoords] = useState<LocationType[]>([]);
//   const [currentRideId, setCurrentRideId] = useState<string | null>(null);
//   const [rideStatus, setRideStatus] = useState<"idle" | "searching" | "onTheWay" | "arrived" | "started" | "completed">("idle");
//   const [driverId, setDriverId] = useState<string | null>(null);
//   const [driverLocation, setDriverLocation] = useState<LocationType | null>(null);
//   const [travelledKm, setTravelledKm] = useState(0);
//   const [lastCoord, setLastCoord] = useState<LocationType | null>(null);
//   const [nearbyDrivers, setNearbyDrivers] = useState<DriverType[]>([]);
//   const [nearbyDriversCount, setNearbyDriversCount] = useState<number>(0);
//   const [pickupSuggestions, setPickupSuggestions] = useState<SuggestionType[]>([]);
//   const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);
//   const [dropoffSuggestions, setDropoffSuggestions] = useState<SuggestionType[]>([]);
//   const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);
//   const [pickupLoading, setPickupLoading] = useState(false);
//   const [dropoffLoading, setDropoffLoading] = useState(false);
//   const [suggestionsError, setSuggestionsError] = useState<string | null>(null);
//   const [pickupCache, setPickupCache] = useState<Record<string, SuggestionType[]>>({});
//   const [dropoffCache, setDropoffCache] = useState<Record<string, SuggestionType[]>>({});
//   const [isPickupCurrent, setIsPickupCurrent] = useState(false); // ✅ FIXED: Changed default to false
//   const [socketConnected, setSocketConnected] = useState(false);
//   const [driverArrivedAlertShown, setDriverArrivedAlertShown] = useState(false);
//   const [rideCompletedAlertShown, setRideCompletedAlertShown] = useState(false);
//   const [acceptedDriver, setAcceptedDriver] = useState<DriverType | null>(null);
//   const [isBooking, setIsBooking] = useState(false);
//   const [driverName, setDriverName] = useState<string | null>(null);
//   const [driverMobile, setDriverMobile] = useState<string | null>(null);
//   const [bookedAt, setBookedAt] = useState<Date | null>(null);
//   const [showPickupMapModal, setShowPickupMapModal] = useState(false);
//   const [showDropoffMapModal, setShowDropoffMapModal] = useState(false);

//   const pickupDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const dropoffDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const regionChangeTimer = useRef<NodeJS.Timeout | null>(null);
//   const [priceLoading, setPriceLoading] = useState(false);
//   const panelAnimation = useRef(new Animated.Value(0)).current;
//   const mapRef = useRef<MapView | null>(null);
//   const fallbackLocation: LocationType = {
//     latitude: 11.3312971,
//     longitude: 77.7167303,
//   };

//   // ✅ IMPROVED: Accurate distance calculation
//   const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371; // Earth's radius in kilometers
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
//               Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//               Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distance = R * c;
//     console.log(`📍 Distance calculation: (${lat1},${lon1}) to (${lat2},${lon2}) = ${distance.toFixed(4)} km`);
//     return distance;
//   };

//   const calculateDistanceInMeters = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371;
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a =
//       Math.sin(dLat/2) * Math.sin(dLat/2) +
//       Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//       Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distanceKm = R * c;
//     return distanceKm * 1000;
//   };

//   // ✅ CORRECTED: Nearby drivers filtering logic
//   const fetchNearbyDrivers = (latitude: number, longitude: number) => {
//     console.log(`Fetching nearby drivers for lat: ${latitude}, lng: ${longitude}`);
//     if (socket && socketConnected) {
//       socket.emit("requestNearbyDrivers", {
//         latitude,
//         longitude,
//         radius: 10000,
//         vehicleType: selectedRideType
//       });
//       console.log("Emitted requestNearbyDrivers event");
//     } else {
//       console.log("Socket not connected, attempting to reconnect...");
//       socket.connect();
//       socket.once("connect", () => {
//         console.log("Socket reconnected, emitting requestNearbyDrivers");
//         socket.emit("requestNearbyDrivers", {
//           latitude,
//           longitude,
//           radius: 10000,
//           vehicleType: selectedRideType
//         });
//       });
//     }
//   };

//   // ✅ CORRECTED: Nearby drivers response handler with DEBUG
//   useEffect(() => {
//     const handleNearbyDriversResponse = (data: { drivers: DriverType[] }) => {
//       console.log('📍 Received nearby drivers response:', JSON.stringify(data, null, 2));
//       if (!location) {
//         console.log("❌ No location available, can't process drivers");
//         return;
//       }
    
//       console.log('📍 User current location:', location);
//       console.log('📍 Number of drivers received:', data.drivers.length);
    
//       // ✅ ACTIVE RIDE: Show only accepted driver
//       if (currentRideId && acceptedDriver) {
//         console.log('🚗 Active ride - Showing only accepted driver');
//         const acceptedDriverData = data.drivers.find(d => d.driverId === acceptedDriver.driverId);
//         if (acceptedDriverData) {
//           setNearbyDrivers([acceptedDriverData]);
//           setNearbyDriversCount(1);
//           console.log('✅ Accepted driver found and displayed');
//         } else {
//           setNearbyDrivers([]);
//           setNearbyDriversCount(0);
//           console.log('❌ Accepted driver not found in response');
//         }
//         return;
//       }
    
//       // ✅ NO ACTIVE RIDE: Show all online drivers with DEBUG
//       const filteredDrivers = data.drivers
//         .filter(driver => {
//           console.log(`🔍 Processing driver: ${driver.driverId} (${driver.name})`);
//           console.log(`📍 Driver location: ${driver.location.coordinates[1]}, ${driver.location.coordinates[0]}`);
        
//           // Check driver status
//           if (driver.status && !["Live", "online", "onRide", "available"].includes(driver.status)) {
//             console.log(`❌ Driver ${driver.driverId} filtered out by status: ${driver.status}`);
//             return false;
//           }
        
//           // Calculate distance
//           const distance = calculateDistance(
//             location.latitude,
//             location.longitude,
//             driver.location.coordinates[1],
//             driver.location.coordinates[0]
//           );
//           console.log(`📏 Driver ${driver.driverId} distance: ${distance.toFixed(2)} km`);
        
//           const isWithinRange = distance <= 10;
//           console.log(`✅ Driver ${driver.driverId} within 10km: ${isWithinRange}`);
        
//           return isWithinRange;
//         })
//         .sort((a, b) => {
//           const distA = calculateDistance(location.latitude, location.longitude, a.location.coordinates[1], a.location.coordinates[0]);
//           const distB = calculateDistance(location.latitude, location.longitude, b.location.coordinates[1], b.location.coordinates[0]);
//           return distA - distB;
//         })
//         .slice(0, 10);
    
//       console.log('✅ Filtered drivers count:', filteredDrivers.length);
//       console.log('📍 Final drivers to display:', filteredDrivers);
    
//       setNearbyDrivers(filteredDrivers);
//       setNearbyDriversCount(filteredDrivers.length);
//     };
//     socket.on("nearbyDriversResponse", handleNearbyDriversResponse);
//     return () => socket.off("nearbyDriversResponse", handleNearbyDriversResponse);
//   }, [location, socketConnected, currentRideId, acceptedDriver]);

//   useEffect(() => {
//     const requestLocation = async () => {
//       setIsLoadingLocation(true);
//       if (propCurrentLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using current location from props:`, propCurrentLocation);
//         setLocation(propCurrentLocation);
//         global.currentLocation = propCurrentLocation;
//         fetchNearbyDrivers(propCurrentLocation.latitude, propCurrentLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       if (propLastSavedLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using last saved location from props:`, propLastSavedLocation);
//         setLocation(propLastSavedLocation);
//         global.currentLocation = propLastSavedLocation;
//         fetchNearbyDrivers(propLastSavedLocation.latitude, propLastSavedLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using fallback location:`, fallbackLocation);
//       setLocation(fallbackLocation);
//       global.currentLocation = fallbackLocation;
//       fetchNearbyDrivers(fallbackLocation.latitude, fallbackLocation.longitude);
//       setIsLoadingLocation(false);
//       if (Platform.OS === "android") {
//         const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
//         if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location permission denied`);
//           Alert.alert("Permission Denied", "Location permission is required to proceed.");
//           return;
//         }
//       }
//       Geolocation.getCurrentPosition(
//         (pos) => {
//           const loc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Live location fetched successfully:`, loc);
//           setLocation(loc);
//           global.currentLocation = loc;
//           fetchNearbyDrivers(loc.latitude, loc.longitude);
//         },
//         (err) => {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location error:`, err.code, err.message);
//           Alert.alert("Location Error", "Could not fetch location. Please try again or check your GPS settings.");
//         },
//         { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000, distanceFilter: 10 }
//       );
//     };
//     requestLocation();
//   }, [propCurrentLocation, propLastSavedLocation]);

//   // Driver-side code (e.g., in a DriverDashboard component)
//   const handleCompleteRide = () => {
//     const rideId = currentRideId; // Assume this is stored in driver state
//     const driverId = currentDriverId; // Assume this is the logged-in driver ID
//     const finalDistance = calculateFinalDistance(); // Logic to compute distance
//     const finalTime = calculateFinalTime(); // Logic to compute travel time
//     const finalCharge = calculateFinalCharge(finalDistance, finalTime); // Pricing logic
//     socket.emit('rideCompleted', {
//       rideId,
//       driverId,
//       distance: finalDistance,
//       travelTime: finalTime,
//       charge: finalCharge
//     });
//     socket.emit('rideStatusUpdate', {
//       rideId,
//       status: 'completed',
//       distance: finalDistance,
//       travelTime: finalTime,
//       charge: finalCharge
//     });
//   };

//   useEffect(() => {
//     const handleConnect = async () => {
//       console.log("Socket connected");
//       setSocketConnected(true);
//       if (location) fetchNearbyDrivers(location.latitude, location.longitude);
    
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User registered with socket:', userId);
//         }
//       } catch (error) {
//         console.error('Error registering user with socket:', error);
//       }
//     };
  
//     const handleDisconnect = () => { console.log("Socket disconnected"); setSocketConnected(false); };
//     const handleConnectError = (error: Error) => { console.error("Socket connection error:", error); setSocketConnected(false); };
  
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     socket.on("connect_error", handleConnectError);
//     setSocketConnected(socket.connected);
  
//     return () => {
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//       socket.off("connect_error", handleConnectError);
//     };
//   }, [location]);

//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected]);

//   // ✅ CRITICAL FIX: Driver live location updates with proper state management
//   useEffect(() => {
//     const handleDriverLiveLocationUpdate = (data: { driverId: string; lat: number; lng: number; status?: string }) => {
//       console.log('📍 Received driver location update:', data);
    
//       // If we have an active ride and this is the accepted driver
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('📍 Updating accepted driver location during active ride');
      
//         // CRITICAL: Update driver location state
//         const driverCoords = { latitude: data.lat, longitude: data.lng };
//         setDriverLocation(driverCoords);
      
//         // Update the driver in nearbyDrivers
//         setNearbyDrivers(prev => {
//           if (prev.length > 0 && prev[0].driverId === data.driverId) {
//             return [{
//               ...prev[0],
//               location: { coordinates: [data.lng, data.lat] },
//               status: data.status || "onTheWay"
//             }];
//           }
//           return prev;
//         });
      
//         // Calculate distance if needed
//         if (lastCoord) {
//           const dist = haversine(lastCoord, driverCoords);
//           setTravelledKm(prev => prev + dist / 1000);
//         }
//         setLastCoord(driverCoords);
      
//         // Check if driver is near pickup location
//         // ✅ IMPROVED: Check if driver is near pickup location
//         if (pickupLocation && rideStatus === "onTheWay") {
//           const distanceToPickup = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             pickupLocation.latitude,
//             pickupLocation.longitude
//           );
//           console.log(`📍 Driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//           if (distanceToPickup <= 50 && !driverArrivedAlertShown) {
//             console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED');
//             setRideStatus("arrived");
//             setDriverArrivedAlertShown(true);
          
//             // ✅ Immediately update UI state
//             setNearbyDrivers(prev => {
//               if (prev.length > 0 && prev[0].driverId === data.driverId) {
//                 return [{
//                   ...prev[0],
//                   status: "arrived"
//                 }];
//               }
//               return prev;
//             });
          
//             // Get customer ID for OTP
//             AsyncStorage.getItem('customerId').then(customerId => {
//               const otp = customerId ? customerId.slice(-4) : '1234';
//               Alert.alert(
//                 "🎉 Driver Arrived!",
//                 `Our driver (${acceptedDriver.name}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//                 [{ text: "OK", onPress: () => {
//                   console.log('✅ User acknowledged driver arrival');
//                 }}]
//               );
//             });
//           }
//         }
        
//         // Check if driver is near dropoff location
//         if (dropoffLocation && rideStatus === "started") {
//           const distanceToDropoff = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             dropoffLocation.latitude,
//             dropoffLocation.longitude
//           );
        
//           if (distanceToDropoff <= 50 && !rideCompletedAlertShown) {
//             // Instead of immediately completing the ride, just notify the backend
//             // The backend will handle the actual ride completion
//             socket.emit('driverReachedDestination', {
//               rideId: currentRideId,
//               driverId: data.driverId,
//               distance: travelledKm.toFixed(2)
//             });
          
//             // Set a flag to prevent multiple notifications
//             setRideCompletedAlertShown(true);
//           }
//         }
//         return; // Ignore other drivers during active ride
//       }
    
    
//       // If no active ride, update all drivers
//       setNearbyDrivers((prev) => {
//         const existingIndex = prev.findIndex(d => d.driverId === data.driverId);
//         if (existingIndex >= 0) {
//           const updated = [...prev];
//           updated[existingIndex] = {
//             ...updated[existingIndex],
//             location: { coordinates: [data.lng, data.lat] },
//             status: data.status || "Live"
//           };
//           return updated;
//         } else {
//           if (data.status && !["Live", "online", "onRide", "available"].includes(data.status)) return prev;
//           return [
//             ...prev,
//             {
//               driverId: data.driverId,
//               name: `Driver ${data.driverId}`,
//               location: { coordinates: [data.lng, data.lat] },
//               vehicleType: "taxi",
//               status: data.status || "Live"
//             }
//           ];
//         }
//       });
//     };
//     socket.on("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//     return () => socket.off("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//   }, [location, currentRideId, acceptedDriver, lastCoord, pickupLocation, dropoffLocation, rideStatus, driverArrivedAlertShown, rideCompletedAlertShown]);

//   // ✅ NEW: Polling for driver arrival to ensure reliability
//   useEffect(() => {
//     let intervalId;
//     if (rideStatus === "onTheWay" && pickupLocation && driverLocation && !driverArrivedAlertShown) {
//       intervalId = setInterval(() => {
//         const distanceToPickup = calculateDistanceInMeters(
//           driverLocation.latitude,
//           driverLocation.longitude,
//           pickupLocation.latitude,
//           pickupLocation.longitude
//         );
//         console.log(`📍 Polling driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//         if (distanceToPickup <= 50) {
//           console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED FROM POLLING');
//           setRideStatus("arrived");
//           setDriverArrivedAlertShown(true);
//           AsyncStorage.getItem('customerId').then(customerId => {
//             const otp = customerId ? customerId.slice(-4) : '1234';
//             Alert.alert(
//               "🎉 Driver Arrived!",
//               `Our driver (${acceptedDriver?.name || 'Driver'}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//               [{ text: "OK", onPress: () => {
//                 console.log('✅ User acknowledged driver arrival');
//               }}]
//             );
//           });
//           clearInterval(intervalId);
//         }
//       }, 2000); // Poll every 2 seconds
//     }
//     return () => {
//       if (intervalId) clearInterval(intervalId);
//     };
//   }, [rideStatus, pickupLocation, driverLocation, driverArrivedAlertShown, acceptedDriver]);

//   // ✅ NEW: Ride completion event handler
//   useEffect(() => {
//     const handleRideCompleted = (data: any) => {
//       console.log('🎉 Ride completed event received:', data);
    
//       // Update ride status to completed
//       setRideStatus("completed");
    
//       // Calculate final distance and time if not provided
//       const finalDistance = data.distance || travelledKm.toFixed(2);
//       const finalTime = data.travelTime || travelTime;
//       const finalCharge = data.charge || estimatedPrice;
    
//       // Show completion alert
//       Alert.alert(
//         "Ride Completed",
//         `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//         [
//           {
//             text: "OK",
//             onPress: () => {
//               // Reset ride state after completion
//               setTimeout(() => {
//                 setCurrentRideId(null);
//                 setDriverId(null);
//                 setDriverLocation(null);
//                 setAcceptedDriver(null);
//                 setRouteCoords([]);
//                 setPickupLocation(null);
//                 setDropoffLocation(null);
//                 propHandlePickupChange("");
//                 propHandleDropoffChange("");
//                 setRideStatus("idle");
//                 setDriverArrivedAlertShown(false);
//                 setRideCompletedAlertShown(false);
              
//                 // Fetch all drivers again after ride completion
//                 if (location) {
//                   fetchNearbyDrivers(location.latitude, location.longitude);
//                 }
//               }, 2000);
//             }
//           }
//         ]
//       );
    
//       // Clear ride data from storage
//       AsyncStorage.removeItem('currentRideId');
//       AsyncStorage.removeItem('acceptedDriver');
//       AsyncStorage.removeItem('bookedAt');
//       setBookedAt(null);
//     };
  
//     socket.on("rideCompleted", handleRideCompleted);
  
//     return () => {
//       socket.off("rideCompleted", handleRideCompleted);
//     };
//   }, [travelledKm, travelTime, estimatedPrice, location]);

//   // ✅ NEW: Ride status update handler
//   useEffect(() => {
//     const handleRideStatusUpdate = (data: any) => {
//       console.log('📋 Ride status update received:', data);
    
//       if (data.rideId === currentRideId) {
//         if (data.status === 'completed') {
//           // Handle ride completion
//           setRideStatus("completed");
        
//           // Calculate final distance and time if not provided
//           const finalDistance = data.distance || travelledKm.toFixed(2);
//           const finalTime = data.travelTime || travelTime;
//           const finalCharge = data.charge || estimatedPrice;
        
//           // Show completion alert
//           Alert.alert(
//             "Ride Completed",
//             `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//             [
//               {
//                 text: "OK",
//                 onPress: () => {
//                   // Reset ride state after completion
//                   setTimeout(() => {
//                     setCurrentRideId(null);
//                     setDriverId(null);
//                     setDriverLocation(null);
//                     setAcceptedDriver(null);
//                     setRouteCoords([]);
//                     setPickupLocation(null);
//                     setDropoffLocation(null);
//                     propHandlePickupChange("");
//                     propHandleDropoffChange("");
//                     setRideStatus("idle");
//                     setDriverArrivedAlertShown(false);
//                     setRideCompletedAlertShown(false);
                  
//                     // Fetch all drivers again after ride completion
//                     if (location) {
//                       fetchNearbyDrivers(location.latitude, location.longitude);
//                     }
//                   }, 2000);
//                 }
//               }
//             ]
//           );
        
//           // Clear ride data from storage
//           AsyncStorage.removeItem('currentRideId');
//           AsyncStorage.removeItem('acceptedDriver');
//           AsyncStorage.removeItem('bookedAt');
//           setBookedAt(null);
//         }
//       }
//     };
  
//     socket.on("rideStatusUpdate", handleRideStatusUpdate);
  
//     return () => {
//       socket.off("rideStatusUpdate", handleRideStatusUpdate);
//     };
//   }, [currentRideId, travelledKm, travelTime, estimatedPrice, location]);

//   useEffect(() => {
//     const handleDriverOffline = (data: { driverId: string }) => {
//       console.log(`Driver ${data.driverId} went offline`);
    
//       // ✅ Don't remove accepted driver during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('⚠️ Accepted driver went offline during active ride');
//         return;
//       }
    
//       setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//       setNearbyDriversCount(prev => Math.max(0, prev - 1));
//     };
  
//     socket.on("driverOffline", handleDriverOffline);
//     return () => socket.off("driverOffline", handleDriverOffline);
//   }, [currentRideId, acceptedDriver]);

//   useEffect(() => {
//     const handleDriverStatusUpdate = (data: { driverId: string; status: string }) => {
//       console.log(`Driver ${data.driverId} status updated to: ${data.status}`);
    
//       // ✅ Don't update accepted driver status during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('Keeping accepted driver status as onTheWay');
//         return;
//       }
    
//       if (data.status === "offline") {
//         setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//         setNearbyDriversCount(prev => Math.max(0, prev - 1));
//         return;
//       }
//       setNearbyDrivers(prev => prev.map(driver =>
//         driver.driverId === data.driverId ? { ...driver, status: data.status } : driver
//       ));
//     };
  
//     socket.on("driverStatusUpdate", handleDriverStatusUpdate);
//     return () => socket.off("driverStatusUpdate", handleDriverStatusUpdate);
//   }, [currentRideId, acceptedDriver]);

//   // ✅ BACKUP: Recover ride acceptance data on component mount
//   useEffect(() => {
//     const recoverRideData = async () => {
//       try {
//         const savedRideId = await AsyncStorage.getItem('currentRideId');
//         const savedDriverData = await AsyncStorage.getItem('acceptedDriver');
      
//         if (savedRideId && !currentRideId) {
//           console.log('🔄 Recovering ride data from storage:', savedRideId);
//           setCurrentRideId(savedRideId);
        
//           if (savedDriverData) {
//             const driverData = JSON.parse(savedDriverData);
//             setAcceptedDriver(driverData);
//             setDriverName(driverData.name);
//             setDriverMobile(driverData.driverMobile);
//             setRideStatus("onTheWay");
//           } else {
//             setRideStatus("searching");
//             const bookedStr = await AsyncStorage.getItem('bookedAt');
//             setBookedAt(bookedStr ? new Date(bookedStr) : new Date());
//             // Restart polling
//             const pollInterval = setInterval(() => {
//               if (currentRideId) {
//                 socket.emit('getRideStatus', { rideId: currentRideId });
//               }
//             }, 5000);
//             AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//             // Restart timeout (increased to 60s)
//             const acceptanceTimeout = setTimeout(() => {
//               if (rideStatus === "searching") {
//                 Alert.alert(
//                   "No Driver Available",
//                   "No driver has accepted your ride yet. Please try again or wait longer.",
//                   [{ text: "OK", onPress: () => setRideStatus("idle") }]
//                 );
//               }
//             }, 60000);
//             AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
//           }
        
//           // Request ride status from server
//           socket.emit('getRideStatus', { rideId: savedRideId });
//         }
//       } catch (error) {
//         console.error('Error recovering ride data:', error);
//       }
//     };
  
//     recoverRideData();
//   }, []);

//   const processRideAcceptance = useCallback((data: any) => {
//     console.log('🎯 PROCESSING RIDE ACCEPTANCE:', JSON.stringify(data, null, 2));
  
//     // Validate required data
//     if (!data.rideId || !data.driverId) {
//       console.error('❌ Invalid ride acceptance data:', data);
//       return;
//     }
//     // Clear existing timeouts and intervals
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Update ride status immediately
//     setRideStatus("onTheWay");
//     setDriverId(data.driverId);
//     setDriverName(data.driverName || 'Driver');
//     setDriverMobile(data.driverMobile || 'N/A');
//     setCurrentRideId(data.rideId);
//     // Create accepted driver object
//     const acceptedDriverData: DriverType = {
//       driverId: data.driverId,
//       name: data.driverName || 'Driver',
//       driverMobile: data.driverMobile || 'N/A',
//       location: {
//         coordinates: [data.driverLng || 0, data.driverLat || 0]
//       },
//       vehicleType: data.vehicleType || selectedRideType,
//       status: "onTheWay"
//     };
//     console.log('👨‍💼 Setting accepted driver:', acceptedDriverData);
  
//     // Update state
//     setAcceptedDriver(acceptedDriverData);
//     setNearbyDrivers([acceptedDriverData]);
//     setNearbyDriversCount(1);
//     // Set initial driver location
//     if (data.driverLat && data.driverLng) {
//       const driverLoc = {
//         latitude: data.driverLat,
//         longitude: data.driverLng
//       };
//       setDriverLocation(driverLoc);
//       console.log('📍 Initial driver location set:', driverLoc);
//     }
//     // Store in AsyncStorage for recovery
//     AsyncStorage.setItem('currentRideId', data.rideId);
//     AsyncStorage.setItem('acceptedDriver', JSON.stringify(acceptedDriverData));
  
//     console.log('✅ Ride acceptance processed successfully for:', data.rideId);
//   }, [selectedRideType]);

//   // Global ride acceptance listener
//   useEffect(() => {
//     console.log('🎯 Setting up GLOBAL ride acceptance listener');
//     const handleRideAccepted = (data: any) => {
//       console.log('🚨 ===== USER APP: RIDE ACCEPTED ====');
//       console.log('📦 Acceptance data:', JSON.stringify(data, null, 2));
//       console.log('🚨 ===== END ACCEPTANCE DATA ====');
//       processRideAcceptance(data);
//     };
//     // Listen on multiple channels
//     socket.on("rideAccepted", handleRideAccepted);
  
//     // Fixed: Proper async handling
//     socket.on("rideAcceptedBroadcast", async (data) => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (data.targetUserId === userId) {
//           handleRideAccepted(data);
//         }
//       } catch (error) {
//         console.error('Error checking user ID:', error);
//       }
//     });
//     return () => {
//       socket.off("rideAccepted", handleRideAccepted);
//       socket.off("rideAcceptedBroadcast", handleRideAccepted);
//     };
//   }, [processRideAcceptance]);

//   // ✅ CRITICAL: Add these missing socket event handlers
//   useEffect(() => {
//     console.log('🔌 Setting up CRITICAL socket event handlers');
//     // Handle getDriverData response
//     const handleDriverDataResponse = (data: any) => {
//       console.log('🚗 Driver data received:', data);
//       if (data.success) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle getRideStatus response
//     const handleRideStatusResponse = (data: any) => {
//       console.log('📋 Ride status received:', data);
//       if (data.driverId) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle backup ride acceptance
//     const handleBackupRideAccepted = (data: any) => {
//       console.log('🔄 Backup ride acceptance:', data);
//       processRideAcceptance(data);
//     };
//     socket.on("driverDataResponse", handleDriverDataResponse);
//     socket.on("rideStatusResponse", handleRideStatusResponse);
//     socket.on("backupRideAccepted", handleBackupRideAccepted);
//     return () => {
//       socket.off("driverDataResponse", handleDriverDataResponse);
//       socket.off("rideStatusResponse", handleRideStatusResponse);
//       socket.off("backupRideAccepted", handleBackupRideAccepted);
//     };
//   }, [selectedRideType]);

//   // ✅ COMPREHENSIVE SOCKET DEBUGGER
//   useEffect(() => {
//     console.log('🔍 Starting comprehensive socket debugging');
  
//     // Debug all socket events
//     const debugAllEvents = (eventName: string, data: any) => {
//       if (eventName.includes('ride') || eventName.includes('driver') || eventName.includes('Room')) {
//         console.log(`📡 SOCKET EVENT [${eventName}]:`, data);
//       }
//     };
//     // Specific debug for rideAccepted
//     const debugRideAccepted = (data: any) => {
//       console.log('🚨🚨🚨 RIDE ACCEPTED EVENT RECEIVED 🚨🚨🚨');
//       console.log('📦 Data:', JSON.stringify(data, null, 2));
//       console.log('🔍 Current state:', {
//         currentRideId,
//         rideStatus,
//         hasAcceptedDriver: !!acceptedDriver
//       });
    
//       // Process immediately
//       processRideAcceptance(data);
//     };
//     // Debug connection
//     const handleConnect = () => {
//       console.log('✅ Socket connected - ID:', socket.id);
//       setSocketConnected(true);
//     };
//     const handleDisconnect = () => {
//       console.log('❌ Socket disconnected');
//       setSocketConnected(false);
//     };
//     // Add all listeners
//     socket.onAny(debugAllEvents);
//     socket.on("rideAccepted", debugRideAccepted);
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     console.log('🔍 Socket debuggers activated');
//     return () => {
//       socket.offAny(debugAllEvents);
//       socket.off("rideAccepted", debugRideAccepted);
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//     };
//   }, [currentRideId, rideStatus, acceptedDriver, processRideAcceptance]);

//   // Add this to your user app component (e.g., TaxiContent.js)
//   // Send location updates to backend
//   const sendLocationUpdate = async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
//       const currentRideId = await AsyncStorage.getItem('currentRideId');
    
//       if (!userId) return;
    
//       // Send to socket
//       socket.emit('userLocationUpdate', {
//         userId,
//         latitude,
//         longitude,
//         rideId: currentRideId
//       });
    
//       // Also send to REST API as backup
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//     latitude,
//     longitude
//   }, {
//     headers: {
//       Authorization: `Bearer ${token}`
//     }
//   });
//       }
//     } catch (error) {
//       console.error('Error sending location update:', error);
//     }
//   };

//   // ✅ ADD TO YOUR TaxiContent.js COMPONENT
//   // Real-time user location tracking function
//   const sendUserLocationUpdate = useCallback(async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
    
//       if (!userId || !currentRideId) {
//         console.log('❌ Cannot send location: Missing userId or rideId');
//         return;
//       }
//       console.log(`📍 SENDING USER LOCATION UPDATE: ${latitude}, ${longitude} for ride ${currentRideId}`);
    
//       // Send to socket for real-time updates
//       socket.emit('userLocationUpdate', {
//         userId,
//         rideId: currentRideId,
//         latitude,
//         longitude,
//         timestamp: Date.now()
//       });
//       // Also save to database via REST API
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//           latitude,
//           longitude,
//           rideId: currentRideId
//         }, {
//           headers: {
//             Authorization: `Bearer ${token}`
//           }
//         });
//       }
//       console.log('✅ User location update sent successfully');
//     } catch (error) {
//       console.error('❌ Error sending user location update:', error);
//     }
//   }, [currentRideId]);

//   // ✅ CRITICAL: Continuous location tracking during active rides
//   useEffect(() => {
//     let locationInterval;
//     if ((rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && location) {
//       console.log('🔄 Starting continuous user location tracking');
    
//       locationInterval = setInterval(() => {
//         if (location) {
//           sendUserLocationUpdate(location.latitude, location.longitude);
//         }
//       }, 5000); // Send every 5 seconds
    
//     }
//     return () => {
//       if (locationInterval) {
//         clearInterval(locationInterval);
//         console.log('🛑 Stopped user location tracking');
//       }
//     };
//   }, [rideStatus, location, sendUserLocationUpdate]);

//   // ✅ ALSO UPDATE: Your existing location interval to include active ride statuses
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching" || rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
          
//             // Send location update if in active ride
//             if (rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") {
//               sendUserLocationUpdate(newLoc.latitude, newLoc.longitude);
//             }
          
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected, sendUserLocationUpdate]);

//   // ✅ FIXED: Remove the undefined property
//   useEffect(() => {
//     console.log('🔍 USER LOCATION DEBUG:', {
//       hasLocation: !!location,
//       rideStatus,
//       hasCurrentRideId: !!currentRideId,
//       socketConnected
//     });
//     if (currentRideId && location) {
//       console.log('📍 Current user position:', {
//         latitude: location.latitude,
//         longitude: location.longitude,
//         rideId: currentRideId
//       });
//     }
//   }, [location, rideStatus, currentRideId]);

//   // Update your location tracking code to send updates
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location) {
//         sendLocationUpdate(location.latitude, location.longitude);
//       }
//     }, 5000); // Send location every 5 seconds
//     return () => clearInterval(interval);
//   }, [location]);

//   // ✅ BACKUP: Manual ride status polling
//   useEffect(() => {
//     if (currentRideId && rideStatus === "searching") {
//       console.log('🔄 Starting backup polling for ride:', currentRideId);
    
//       const pollInterval = setInterval(() => {
//         console.log('📡 Polling ride status for:', currentRideId);
//         socket.emit('getRideStatus', { rideId: currentRideId }, (data) => {
//           if (data.driverId) {
//             processRideAcceptance(data);
//           } else if (bookedAt && (new Date().getTime() - bookedAt.getTime() > 60000) && rideStatus === "searching") {
//             console.log('⏰ No driver found after 60s');
//             Alert.alert(
//               "No Driver Available",
//               "No driver has accepted your ride yet. Please try again or wait longer.",
//               [{ text: "OK", onPress: () => setRideStatus("idle") }]
//             );
//             clearInterval(pollInterval);
//             AsyncStorage.removeItem('statusPollInterval');
//           }
//         });
//       }, 3000); // Poll every 3 seconds
//       // Store interval ID
//       AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//       return () => {
//         clearInterval(pollInterval);
//         AsyncStorage.removeItem('statusPollInterval');
//       };
//     }
//   }, [currentRideId, rideStatus, bookedAt]);

//   // ✅ CRITICAL: Ensure user joins their room on socket connection
//   useEffect(() => {
//     const registerUserRoom = async () => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId && socket.connected) {
//           console.log('👤 Registering user with socket room:', userId);
//           socket.emit('registerUser', { userId });
        
//           // Also join the room manually
//           socket.emit('joinRoom', { userId });
//         }
//       } catch (error) {
//         console.error('Error registering user room:', error);
//       }
//     };
//     // Register on connect and every 5 seconds to ensure room membership
//     socket.on('connect', registerUserRoom);
//     registerUserRoom();
//     // Re-register periodically to ensure room membership
//     const interval = setInterval(registerUserRoom, 5000);
//     return () => {
//       socket.off('connect', registerUserRoom);
//       clearInterval(interval);
//     };
//   }, []);

//   // ✅ SOCKET RECOVERY: Handle reconnection and missed events
//   useEffect(() => {
//     const handleReconnect = async () => {
//       console.log('🔌 Socket reconnected, recovering state...');
//       setSocketConnected(true);
    
//       // Re-register user
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User re-registered after reconnect:', userId);
//         }
      
//         // Request current ride status if we have a ride ID
//         const currentRideId = await AsyncStorage.getItem('currentRideId');
//         if (currentRideId) {
//           socket.emit('getRideStatus', { rideId: currentRideId });
//           console.log('🔄 Requesting status for current ride:', currentRideId);
//         }
//       } catch (error) {
//         console.error('Error during socket recovery:', error);
//       }
//     };
  
//     socket.on("connect", handleReconnect);
  
//     return () => {
//       socket.off("connect", handleReconnect);
//     };
//   }, []);

//   const fetchRoute = async (dropCoord: LocationType) => {
//     if (!pickupLocation) return;
//     try {
//       const url = `https://router.project-osrm.org/route/v1/driving/${pickupLocation.longitude},${pickupLocation.latitude};${dropCoord.longitude},${dropCoord.latitude}?overview=full&geometries=geojson`;
//       const res = await fetch(url);
//       const data = await res.json();
//       if (data.code === "Ok" && data.routes.length > 0) {
//         const coords = data.routes[0].geometry.coordinates.map(([lng, lat]: number[]) => ({ latitude: lat, longitude: lng }));
//         setRouteCoords(coords);
//         setDistance((data.routes[0].distance / 1000).toFixed(2) + " km");
//         setTravelTime(Math.round(data.routes[0].duration / 60) + " mins");
//       } else {
//         setApiError("Failed to fetch route");
//         Alert.alert("Route Error", "Could not find route. Please try different locations.");
//       }
//     } catch (err) {
//       console.error(err);
//       setRouteCoords([]);
//       setApiError("Network error fetching route");
//       Alert.alert("Route Error", "Failed to fetch route. Please check your internet connection.");
//     }
//   };

//   const fetchSuggestions = async (query: string, type: 'pickup' | 'dropoff'): Promise<SuggestionType[]> => {
//     try {
//       console.log(`Fetching suggestions for: ${query}`);
//       const cache = type === 'pickup' ? pickupCache : dropoffCache;
//       if (cache[query]) {
//         console.log(`Returning cached suggestions for: ${query}`);
//         return cache[query];
//       }
//       if (type === 'pickup') setPickupLoading(true);
//       else setDropoffLoading(true);
//       setSuggestionsError(null);
//       const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=5&addressdetails=1&countrycodes=IN`;
//       console.log(`API URL: ${url}`);
    
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
    
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       if (!Array.isArray(data)) throw new Error('Invalid response format');
    
//       const suggestions: SuggestionType[] = data.map((item: any) => ({
//         id: item.place_id || `${item.lat}-${item.lon}`,
//         name: item.display_name,
//         address: extractAddress(item),
//         lat: item.lat,
//         lon: item.lon,
//         type: item.type || 'unknown',
//         importance: item.importance || 0,
//       }));
//       if (type === 'pickup') setPickupCache(prev => ({ ...prev, [query]: suggestions }));
//       else setDropoffCache(prev => ({ ...prev, [query]: suggestions }));
//       return suggestions;
//     } catch (error: any) {
//       console.error('Suggestions fetch error:', error);
//       setSuggestionsError(error.message || 'Failed to fetch suggestions');
//       return [];
//     } finally {
//       if (type === 'pickup') setPickupLoading(false);
//       else setDropoffLoading(false);
//     }
//   };

//   const extractAddress = (item: any): string => {
//     if (item.address) {
//       const parts = [];
//       if (item.address.road) parts.push(item.address.road);
//       if (item.address.suburb) parts.push(item.address.suburb);
//       if (item.address.city || item.address.town || item.address.village) parts.push(item.address.city || item.address.town || item.address.village);
//       if (item.address.state) parts.push(item.address.state);
//       if (item.address.postcode) parts.push(item.address.postcode);
//       return parts.join(', ');
//     }
//     return item.display_name;
//   };

//   const handlePickupChange = (text: string) => {
//     console.log(`handlePickupChange called with: "${text}"`);
//     propHandlePickupChange(text);
//     if (pickupDebounceTimer.current) {
//       clearTimeout(pickupDebounceTimer.current);
//       pickupDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setPickupLoading(true);
//       setShowPickupSuggestions(true);
//       pickupDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'pickup');
//         setPickupSuggestions(sugg);
//         setPickupLoading(false);
//       }, 500);
//     } else {
//       setShowPickupSuggestions(false);
//       setPickupSuggestions([]);
//     }
//   };

//   const handleDropoffChange = (text: string) => {
//     console.log(`handleDropoffChange called with: "${text}"`);
//     propHandleDropoffChange(text);
//     if (dropoffDebounceTimer.current) {
//       clearTimeout(dropoffDebounceTimer.current);
//       dropoffDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setDropoffLoading(true);
//       setShowDropoffSuggestions(true);
//       dropoffDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'dropoff');
//         setDropoffSuggestions(sugg);
//         setDropoffLoading(false);
//       }, 500);
//     } else {
//       setShowDropoffSuggestions(false);
//       setDropoffSuggestions([]);
//     }
//   };

//   const selectPickupSuggestion = (suggestion: SuggestionType) => {
//     propHandlePickupChange(suggestion.name);
//     setPickupLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowPickupSuggestions(false);
//     setIsPickupCurrent(false);
//     if (dropoffLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     fetchNearbyDrivers(parseFloat(suggestion.lat), parseFloat(suggestion.lon));
//   };

//   const selectDropoffSuggestion = (suggestion: SuggestionType) => {
//     propHandleDropoffChange(suggestion.name);
//     setDropoffLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowDropoffSuggestions(false);
//     if (pickupLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//   };

//   useEffect(() => {
//     const updatePrice = async () => {
//       if (pickupLocation && dropoffLocation && distance) {
//         const price = await calculatePrice();
//         setEstimatedPrice(price);
//       }
//     };
//     updatePrice();
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   useEffect(() => {
//     if (pickupLocation && dropoffLocation && distance) {
//       const price = calculatePrice();
//       setEstimatedPrice(price);
//     }
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   useEffect(() => {
//     if (showPricePanel) {
//       Animated.timing(panelAnimation, {
//         toValue: 1,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     } else {
//       Animated.timing(panelAnimation, {
//         toValue: 0,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     }
//   }, [showPricePanel]);


  
//   // ❌ REMOVE THIS ENTIRE BLOCK - Hardcoded fallback prices
// // const fallbackPrices = {
// //   bike: 100,
// //   taxi: 500, 
// //   port: 1000
// // };

// // ✅ UPDATE THE fetchRidePrice FUNCTION - Remove fallback
// const fetchRidePrice = async (vehicleType: string, distance: number) => {
//   // Use ONLY dynamic prices from socket events
//   const pricePerKm = dynamicPrices[vehicleType];
  
//   // If dynamic prices are not set yet, wait for them
//   if (!pricePerKm || pricePerKm === 0) {
//     console.log(`⏳ Waiting for ${vehicleType} price from admin...`);
//     return 0;
//   }
  
//   const calculatedPrice = distance * pricePerKm;
  
//   console.log(`💰 Price calculation: ${distance}km ${vehicleType} × ₹${pricePerKm}/km = ₹${calculatedPrice}`);
//   return calculatedPrice;
// };






// const calculatePrice = async (): Promise<number | null> => {
//   if (!pickupLocation || !dropoffLocation || !distance) {
//     console.log('❌ Missing location data for price calculation');
//     return null;
//   }

//   const distanceKm = parseFloat(distance);
  
//   // DEBUG: Print current prices before calculation
//   console.log('\n💰 PRICE CALCULATION DEBUG:');
//   console.log(`📏 Distance: ${distanceKm}km`);
//   console.log(`🚗 Vehicle Type: ${selectedRideType}`);
//   console.log(`🏍️  BIKE Price/km: ₹${dynamicPrices.bike}`);
//   console.log(`🚕 TAXI Price/km: ₹${dynamicPrices.taxi}`);
//   console.log(`🚛 PORT Price/km: ₹${dynamicPrices.port}`);
//   console.log('─────────────────────────────────────');

//   try {
//     const pricePerKm = dynamicPrices[selectedRideType];
    
//     console.log(`💰 Using price per km: ₹${pricePerKm} for ${selectedRideType}`);

//     // Wait for admin prices - NO TEMPORARY FALLBACK
//     if (!pricePerKm || pricePerKm === 0) {
//       console.log('⏳ Waiting for admin prices to be loaded...');
//       console.log('🚫 Booking blocked until prices are received from admin');
//       return null;
//     }
    
//     const calculatedPrice = distanceKm * pricePerKm;
//     const multiplier = wantReturn ? 2 : 1;
//     const finalPrice = Math.round(calculatedPrice * multiplier);

//     console.log(`✅ Final price calculated: ${distanceKm}km × ₹${pricePerKm}/km × ${multiplier} = ₹${finalPrice}`);
//     return finalPrice;
//   } catch (error) {
//     console.error('❌ Error calculating price:', error);
//     return null;
//   }
// };




// // ✅ IMPROVED PRICE UPDATE HANDLER
// useEffect(() => {
//   const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 Received REAL-TIME price update from admin:', data);
    
//     // Update dynamic prices immediately
//     setDynamicPrices({
//       bike: data.bike,
//       taxi: data.taxi,
//       port: data.port,
//     });
    
//     // Log the new prices
//     console.log('🔄 PRICES UPDATED SUCCESSFULLY:');
//     console.log(`🏍️  BIKE: ₹${data.bike}/km`);
//     console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//     console.log(`🚛 PORT: ₹${data.port}/km`);
    
//     // Immediately recalculate price if a ride is being planned
//     if (pickupLocation && dropoffLocation && distance) {
//       console.log('🔄 Recalculating price with new admin rates...');
//       calculatePrice();
//     }
//   };

//   socket.on('priceUpdate', handlePriceUpdate);
  
//   return () => {
//     socket.off('priceUpdate', handlePriceUpdate);
//   };
// }, [pickupLocation, dropoffLocation, distance]);






// // ✅ INITIALIZE WITH ZERO PRICES - Force waiting for admin


// // ✅ FINAL WORKING SOLUTION - NO HARCODED PRICES

// const [dynamicPrices, setDynamicPrices] = useState({
//   bike: 0,
//   taxi: 0,
//   port: 0,
// });

// // Request prices on component mount
// useEffect(() => {
//   console.log('📡 Requesting current prices from admin...');
//   socket.emit('getCurrentPrices');
  
//   const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 Received current prices:', data);
//     setDynamicPrices(data);
//   };
  
//   socket.on('currentPrices', handleCurrentPrices);
  
//   return () => {
//     socket.off('currentPrices', handleCurrentPrices);
//   };
// }, []);

// // Listen for real-time price updates
// useEffect(() => {
//   const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 REAL-TIME PRICE UPDATE:', data);
//     setDynamicPrices(data);
    
//     console.log('✅ PRICES UPDATED:');
//     console.log(`🏍️  BIKE: ₹${data.bike}/km`);
//     console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//     console.log(`🚛 PORT: ₹${data.port}/km`);
    
//     // Recalculate immediately
//     if (pickupLocation && dropoffLocation && distance) {
//       calculatePrice();
//     }
//   };

//   socket.on('priceUpdate', handlePriceUpdate);
//   return () => socket.off('priceUpdate', handlePriceUpdate);
// }, [pickupLocation, dropoffLocation, distance]);



// // ✅ ADD THIS: Price debugging and console logging
// useEffect(() => {
//   console.log('💰 INITIALIZING PRICE DEBUGGING SYSTEM');
  
//   // Function to print current prices to console
//   const printCurrentPrices = () => {
//     console.log('\n🚗 ===== CURRENT RIDE PRICES =====');
//     console.log(`🏍️  BIKE: Today's price per km: ₹${dynamicPrices.bike}`);
//     console.log(`🚕 TAXI: Today's price per km: ₹${dynamicPrices.taxi}`);
//     console.log(`🚛 PORT: Today's price per km: ₹${dynamicPrices.port}`);
//     console.log('=================================\n');
//   };

//   // Listen for price updates from admin
//   const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 REAL-TIME PRICE UPDATE RECEIVED FROM ADMIN:', data);
    
//     // Update dynamic prices
//     setDynamicPrices({
//       bike: data.bike,
//       taxi: data.taxi,
//       port: data.port,
//     });
    
//     // Print updated prices to console
//     console.log('\n✅ ===== PRICES UPDATED SUCCESSFULLY =====');
//     console.log(`🏍️  BIKE: Today's price per km: ₹${data.bike}`);
//     console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//     console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//     console.log('=============================================\n');
    
//     // Recalculate price if needed
//     if (pickupLocation && dropoffLocation && distance) {
//       calculatePrice();
//     }
//   };

//   // Listen for initial prices when component mounts
//   const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 RECEIVED CURRENT PRICES FROM SERVER:');
//     console.log(`🏍️  BIKE: Today's price per km: ₹${data.bike}`);
//     console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//     console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//     console.log('─────────────────────────────────────');
    
//     setDynamicPrices(data);
//   };

//   // Request current prices when component mounts
//   console.log('📡 Requesting current prices from server...');
//   socket.emit('getCurrentPrices');

//   // Set up event listeners
//   socket.on('priceUpdate', handlePriceUpdate);
//   socket.on('currentPrices', handleCurrentPrices);
//   socket.on('ridePricesUpdated', handlePriceUpdate); // Alternative event name

//   // Print initial prices
//   printCurrentPrices();

//   // Set up interval to periodically request prices (as backup)
//   const priceInterval = setInterval(() => {
//     console.log('🔄 Periodic price check...');
//     socket.emit('getCurrentPrices');
//     printCurrentPrices();
//   }, 30000); // Every 30 seconds

//   return () => {
//     // Clean up event listeners
//     socket.off('priceUpdate', handlePriceUpdate);
//     socket.off('currentPrices', handleCurrentPrices);
//     socket.off('ridePricesUpdated', handlePriceUpdate);
//     clearInterval(priceInterval);
//   };
// }, [pickupLocation, dropoffLocation, distance]);



// // Add this useEffect to request current prices on component mount
// useEffect(() => {
//   console.log('📡 Requesting current prices from admin...');
  
//   // Request current prices when component mounts
//   socket.emit('getCurrentPrices');
  
//   // Also set up a listener for initial price response
//   const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 Received current prices from admin:', data);
//     setDynamicPrices(data);
//   };
  
//   socket.on('currentPrices', handleCurrentPrices);
  
//   return () => {
//     socket.off('currentPrices', handleCurrentPrices);
//   };
// }, []);






//   useEffect(() => {
//     const fetchInitialPrices = async () => {
//       try {
//         const bikeRate = await fetchRidePrice('bike', 1);
//         const taxiRate = await fetchRidePrice('taxi', 1);
//         const portRate = await fetchRidePrice('port', 1);
//         setDynamicPrices({
//           bike: bikeRate,
//           taxi: taxiRate,
//           port: portRate,
//         });
//         console.log(`BIKE: Today's price per km: ₹${bikeRate}`);
//         console.log(`TAXI: Today's price per km: ₹${taxiRate}`);
//         console.log(`PORT: Today's price per km: ₹${portRate}`);
//       } catch (error) {
//         console.error('❌ Error fetching initial prices:', error);
//         setDynamicPrices({
//           bike: 100,
//           taxi: 500,
//           port: 1000,
//         });
//         console.log(`BIKE: Today's price per km: ₹100 (fallback)`);
//         console.log(`TAXI: Today's price per km: ₹500 (fallback)`);
//         console.log(`PORT: Today's price per km: ₹1000 (fallback)`);
//       }
//     };
//     fetchInitialPrices();
//   }, []);

//   const handleRideTypeSelect = async (type: string) => {
//     if (selectedRideType === type) return;
//     setSelectedRideType(type);
//     setShowPricePanel(true);
//     if (pickupLocation && dropoffLocation) {
//       const price = await calculatePrice();
//       setEstimatedPrice(price);
//     }
//     if (location) fetchNearbyDrivers(location.latitude, location.longitude);
//   };

//   const handleBookRide = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
//       const price = await calculatePrice(); // Use async price calculation
//   if (!price) {
//     Alert.alert('Error', 'Price calculation failed. Please try again.');
//     return;
//   }
  
//     try {
//       setIsBooking(true);
    
//       const token = await AsyncStorage.getItem('authToken');
//       if (!token) {
//         Alert.alert('Authentication Error', 'Please log in to book a ride');
//         setIsBooking(false);
//         return;
//       }
//       if (!pickupLocation || !dropoffLocation) {
//         Alert.alert('Error', 'Please select both pickup and dropoff locations');
//         setIsBooking(false);
//         return;
//       }
//       if (!estimatedPrice) {
//         Alert.alert('Error', 'Price calculation failed. Please try again.');
//         setIsBooking(false);
//         return;
//       }
//       const userId = await AsyncStorage.getItem('userId');
//       const customerId = (await AsyncStorage.getItem('customerId')) || 'U001';
//       const userName = await AsyncStorage.getItem('userName');
//       const userMobile = await AsyncStorage.getItem('userMobile');
//       let otp;
//       if (customerId && customerId.length >= 4) {
//         otp = customerId.slice(-4);
//       } else {
//         otp = Math.floor(1000 + Math.random() * 9000).toString();
//       }
//       setRideStatus('searching');
//       setBookedAt(new Date());
//       console.log('📋 User Details:', {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup,
//         dropoff,
//         selectedRideType,
//         otp
//       });
//       const rideData = {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup: {
//           lat: pickupLocation.latitude,
//           lng: pickupLocation.longitude,
//           address: pickup,
//         },
//         drop: {
//           lat: dropoffLocation.latitude,
//           lng: dropoffLocation.longitude,
//           address: dropoff,
//         },
//         vehicleType: selectedRideType,
//         otp,
//         estimatedPrice,
//         distance,
//         travelTime,
//         wantReturn,
//         token
//       };
//       socket.emit('bookRide', rideData, (response) => {
//         setIsBooking(false);
      
//         if (response && response.success) {
//           setCurrentRideId(response.rideId);
//           AsyncStorage.setItem('bookedAt', new Date().toISOString());
//           setBookingOTP(response.otp);
//           setShowConfirmModal(true);
//           setRideStatus('searching');
//           console.log('✅ Ride booked successfully:', response);
//         } else {
//           Alert.alert('Booking Failed', response?.message || 'Failed to book ride');
//           setRideStatus('idle');
//           setCurrentRideId(null);
//         }
//       });
//     } catch (error) {
//       setIsBooking(false);
//       console.error('Booking error:', error);
//       Alert.alert('Booking Failed', 'An unexpected error occurred. Please try again.');
//       setRideStatus('idle');
//       setCurrentRideId(null);
//     }
//   };

//   // Add this useEffect to debug real-time events
//   useEffect(() => {
//     console.log('🎯 Setting up real-time event listeners');
  
//     // Listen for all socket events for debugging
//     const handler = (eventName: string, ...args: any[]) => {
//       if (eventName.includes('driver') || eventName.includes('location')) {
//         console.log('📡 Socket event:', eventName, args);
//       }
//     };
//     socket.onAny(handler);
//     return () => {
//       socket.offAny(handler);
//     };
//   }, []);

//   useEffect(() => {
//     const fetchUserData = async () => {
//       try {
//         const token = await AsyncStorage.getItem('authToken');
//         if (!token) return;
//         const backendUrl = getBackendUrl();
//         const response = await axios.get(`${backendUrl}/api/users/profile`, {
//           headers: { Authorization: `Bearer ${token}` }
//         });
      
//         const userProfile = response.data;
      
//         console.log('📋 User Profile:', userProfile);
      
//         const userMobile = userProfile.mobile ||
//                            userProfile.phone ||
//                            userProfile.phoneNumber ||
//                            userProfile.mobileNumber ||
//                            '';
//         await AsyncStorage.setItem('userId', userProfile._id);
//         await AsyncStorage.setItem('customerId', userProfile.customerId || userProfile._id);
//         await AsyncStorage.setItem('userName', userProfile.name || userProfile.username);
//         await AsyncStorage.setItem('userMobile', userProfile.phoneNumber);
//         await AsyncStorage.setItem('userAddress', userProfile.address || '');
      
//       } catch (error) {
//         console.error('Error fetching user data:', error);
//       }
//     };
//     fetchUserData();
//   }, []);

//   useEffect(() => {
//     const handleRideCreated = (data) => {
//       console.log('Ride created event received:', data);
//       if (data.success) {
//         if (data.rideId && !currentRideId) {
//           setCurrentRideId(data.rideId);
//         }
      
//         AsyncStorage.setItem('lastRideId', data.rideId || currentRideId || '');
      
//         setBookingOTP(data.otp);
//         setShowConfirmModal(true);
//         setRideStatus("searching");
//       } else if (data.message) {
//         Alert.alert("Booking Failed", data.message || "Failed to book ride");
//         setRideStatus("idle");
//         setCurrentRideId(null);
//       }
//     };
//     socket.on("rideCreated", handleRideCreated);
//     return () => {
//       socket.off("rideCreated", handleRideCreated);
//     };
//   }, [currentRideId]);

//   const handleConfirmBooking = async () => {
//     console.log('Confirming booking with OTP:', bookingOTP);
//     console.log('Current Ride ID:', currentRideId);
//     let rideIdToUse = currentRideId;
  
//     if (!rideIdToUse) {
//       rideIdToUse = await AsyncStorage.getItem('currentRideId');
//       console.log('🔄 Using rideId from storage:', rideIdToUse);
//     }
  
//     if (!rideIdToUse) {
//       Alert.alert("Error", "Invalid booking state. Please try booking again.");
//       setShowConfirmModal(false);
//       return;
//     }
  
//     setCurrentRideId(rideIdToUse);
//     setRideStatus("searching"); // Change to "searching" first
//     setShowConfirmModal(false);
  
//     console.log('🚀 Waiting for driver to accept ride:', rideIdToUse);
  
//     // Start polling for ride status updates
//     const statusPollInterval = setInterval(() => {
//       if (currentRideId) {
//         socket.emit('getRideStatus', { rideId: currentRideId });
//       }
//     }, 5000); // Poll every 5 seconds
  
//     AsyncStorage.setItem('statusPollInterval', statusPollInterval.toString());
//   };

//   const renderVehicleIcon = (type: 'bike' | 'taxi' | 'port', size: number = 24, color: string = '#000000') => {
//     try {
//       switch (type) {
//         case 'bike': return <BikeIcon width={size} height={size} fill={color} />;
//         case 'taxi': return <TaxiIcon width={size} height={size} fill={color} />;
//         case 'port': return <LorryIcon width={size} height={size} fill={color} />;
//         default: return <TaxiIcon width={size} height={size} fill={color} />;
//       }
//     } catch (error) {
//       return <TaxiIcon width={size} height={size} fill={color} />;
//     }
//   };

//   const renderSuggestionItem = (item: SuggestionType, onSelect: () => void, key: string) => {
//     let iconName = 'location-on';
//     let iconColor = '#A9A9A9';
//     if (item.type.includes('railway') || item.type.includes('station')) { iconName = 'train'; iconColor = '#3F51B5'; }
//     else if (item.type.includes('airport')) { iconName = 'flight'; iconColor = '#2196F3'; }
//     else if (item.type.includes('bus')) { iconName = 'directions-bus'; iconColor = '#FF9800'; }
//     else if (item.type.includes('hospital')) { iconName = 'local-hospital'; iconColor = '#F44336'; }
//     else if (item.type.includes('school') || item.type.includes('college')) { iconName = 'school'; iconColor = '#4CAF50'; }
//     else if (item.type.includes('place_of_worship')) { iconName = 'church'; iconColor = '#9C27B0'; }
//     else if (item.type.includes('shop') || item.type.includes('mall')) { iconName = 'shopping-mall'; iconColor = '#E91E63'; }
//     else if (item.type.includes('park')) { iconName = 'park'; iconColor = '#4CAF50'; }
  
//     return (
//       <TouchableOpacity key={key} style={styles.suggestionItem} onPress={onSelect}>
//         <MaterialIcons name={iconName as any} size={20} color={iconColor} style={styles.suggestionIcon} />
//         <View style={styles.suggestionTextContainer}>
//           <Text style={styles.suggestionMainText} numberOfLines={1}>{extractMainName(item.name)}</Text>
//           <Text style={styles.suggestionSubText} numberOfLines={1}>{item.address}</Text>
//         </View>
//       </TouchableOpacity>
//     );
//   };

//   const extractMainName = (fullName: string): string => {
//     const parts = fullName.split(',');
//     return parts[0].trim();
//   };

//   const isBookRideButtonEnabled = pickup && dropoff && selectedRideType && estimatedPrice !== null;

//   const reverseGeocode = async (lat: number, lon: number): Promise<string | null> => {
//     try {
//       const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1&countrycodes=IN`;
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       return data.display_name || null;
//     } catch (error) {
//       console.error('Reverse geocode error:', error);
//       return null;
//     }
//   };

//   const handleRegionChangeComplete = async (region: any, isPickup: boolean) => {
//     if (regionChangeTimer.current) {
//       clearTimeout(regionChangeTimer.current);
//     }
//     regionChangeTimer.current = setTimeout(async () => {
//       const addr = await reverseGeocode(region.latitude, region.longitude);
//       if (addr) {
//         if (isPickup) {
//           propHandlePickupChange(addr);
//           setPickupLocation({ latitude: region.latitude, longitude: region.longitude });
//           setIsPickupCurrent(false);
//           if (dropoffLocation) fetchRoute(dropoffLocation);
//           fetchNearbyDrivers(region.latitude, region.longitude);
//         } else {
//           propHandleDropoffChange(addr);
//           setDropoffLocation({ latitude: region.latitude, longitude: region.longitude });
//           if (pickupLocation) fetchRoute({ latitude: region.latitude, longitude: region.longitude });
//         }
//       }
//     }, 500);
//   };

//   return (
//     <View style={styles.container}>
//       {isLoadingLocation ? (
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#4CAF50" />
//           <Text style={styles.loadingText}>Fetching your location...</Text>
//         </View>
//       ) : (
//         <>
//           <View style={styles.mapContainer}>
//             {location && (
//               <MapView
//                 ref={mapRef}
//                 style={styles.map}
//                 initialRegion={{
//                   latitude: location.latitude,
//                   longitude: location.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 showsUserLocation
//               >
//                 {/* ✅ Pickup & Drop markers */}
//                 {pickupLocation && (
//                   <Marker
//                     coordinate={pickupLocation}
//                     title="Pickup"
//                     pinColor="blue"
//                   />
//                 )}
//                 {dropoffLocation && (
//                   <Marker
//                     coordinate={dropoffLocation}
//                     title="Dropoff"
//                     pinColor="red"
//                   />
//                 )}
//                 {/* ✅ Driver marker */}
//                 {driverLocation && (
//                   <Marker
//                     coordinate={driverLocation}
//                     title="Driver"
//                     key={`driver-${driverLocation.latitude}-${driverLocation.longitude}`}
//                   >
//                     <View style={styles.driverMarkerContainer}>
//                       <View
//                         style={[
//                           styles.vehicleIconContainer,
//                           {
//                             backgroundColor:
//                               rideStatus === "onTheWay" ||
//                               rideStatus === "arrived" ||
//                               rideStatus === "started"
//                                 ? "#FF6B00"
//                                 : "#4CAF50",
//                           },
//                         ]}
//                       >
//                         {renderVehicleIcon(selectedRideType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                       </View>
//                     </View>
//                   </Marker>
//                 )}
//                 {/* ✅ Nearby Drivers */}
//                 {(rideStatus === "idle" || rideStatus === "searching") &&
//                   nearbyDrivers &&
//                   nearbyDrivers.length > 0 &&
//                   nearbyDrivers.map((driver) => (
//                     <Marker
//                       key={`nearby-${driver.driverId}-${driver.location.coordinates[1]}-${driver.location.coordinates[0]}`}
//                       coordinate={{
//                         latitude: driver.location.coordinates[1],
//                         longitude: driver.location.coordinates[0],
//                       }}
//                       title={`${driver.name} (${driver.status || "Live"})`}
//                     >
//                       <View style={styles.driverMarkerContainer}>
//                         <View style={styles.vehicleIconContainer}>
//                           {renderVehicleIcon(driver.vehicleType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                         </View>
//                       </View>
//                     </Marker>
//                   ))}
//                 {/* ✅ Route polyline */}
//                 {routeCoords && routeCoords.length > 0 && (
//                   <Polyline
//                     coordinates={routeCoords}
//                     strokeWidth={5}
//                     strokeColor="#4CAF50"
//                   />
//                 )}
//               </MapView>
//             )}
          
//             {/* ✅ CORRECTED: Driver count display based on ride status */}
//             {(rideStatus === "idle" || rideStatus === "searching") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Available Drivers Nearby: {nearbyDriversCount}
//                 </Text>
//               </View>
//             )}
//             {/* ✅ ACTIVE RIDE: Show driver status */}
//             {(rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Your Driver is on the way
//                 </Text>
//               </View>
//             )}
//           </View>
//           {/* Driver Info Section */}
//           {acceptedDriver && (
//             <View style={styles.driverInfoContainer}>
//               <Text style={styles.driverInfoTitle}>Your Driver</Text>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="person" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.name}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="phone" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.driverMobile || 'N/A'}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="directions-car" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.vehicleType}</Text>
//               </View>
//             </View>
//           )}
//           {/* Status Indicator */}
//           {/* ✅ ACTIVE RIDE: Show driver status based on actual ride status */}
//           {rideStatus === "onTheWay" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Driver is on the way
//                 {driverLocation && pickupLocation && (
//                   <Text style={styles.distanceText}>
//                     {"\n"}Estimated arrival: {calculateDistance(
//                       pickupLocation.latitude,
//                       pickupLocation.longitude,
//                       driverLocation.latitude,
//                       driverLocation.longitude
//                     ).toFixed(1)} km away
//                   </Text>
//                 )}
//               </Text>
//             </View>
//           )}
//           {rideStatus === "arrived" && (
//             <View style={[styles.driversCountOverlay, { backgroundColor: '#4CAF50' }]}>
//               <Text style={[styles.driversCountText, { color: '#FFFFFF' }]}>
//                 🎉 Driver Has Arrived!
//               </Text>
//             </View>
//           )}
//           {rideStatus === "started" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Ride in Progress...
//               </Text>
//             </View>
//           )}
//           <View style={styles.inputContainer}>
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="my-location" size={20} color="#4CAF50" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter pickup location"
//                   value={pickup}
//                   onChangeText={handlePickupChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowPickupMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>Select on Map</Text>
//               </TouchableOpacity>
//             </View>
          
//             {showPickupSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {pickupLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : suggestionsError ? (
//                   <View style={styles.errorContainer}>
//                     <Text style={styles.errorText}>{suggestionsError}</Text>
//                   </View>
//                 ) : pickupSuggestions.length > 0 ? (
//                   pickupSuggestions.map((item) => (
//                     renderSuggestionItem(item, () => selectPickupSuggestion(item), item.id)
//                   ))
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}
          
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="place" size={20} color="#F44336" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter dropoff location"
//                   value={dropoff}
//                   onChangeText={handleDropoffChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowDropoffMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>Select on Map</Text>
//               </TouchableOpacity>
//             </View>
          
//             {showDropoffSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {dropoffLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : suggestionsError ? (
//                   <View style={styles.errorContainer}>
//                     <Text style={styles.errorText}>{suggestionsError}</Text>
//                   </View>
//                 ) : dropoffSuggestions.length > 0 ? (
//                   dropoffSuggestions.map((item) => (
//                     renderSuggestionItem(item, () => selectDropoffSuggestion(item), item.id)
//                   ))
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}
//           </View>
        
//           {(distance || travelTime) && (
//             <View style={styles.distanceTimeContainer}>
//               <View style={styles.distanceTimeItem}>
//                 <MaterialIcons name="route" size={18} color="#757575" />
//                 <Text style={styles.distanceTimeLabel}>DISTANCE:</Text>
//                 <Text style={styles.distanceTimeValue}>{distance || '---'}</Text>
//               </View>
//               <View style={styles.distanceTimeItem}>
//                 <MaterialIcons name="schedule" size={18} color="#757575" />
//                 <Text style={styles.distanceTimeLabel}>TRAVEL TIME:</Text>
//                 <Text style={styles.distanceTimeValue}>{travelTime || '---'}</Text>
//               </View>
//             </View>
//           )}
        
//           {apiError && (
//             <View style={styles.errorContainer}>
//               <Text style={styles.errorText}>{apiError}</Text>
//             </View>
//           )}
        
          
// <RideTypeSelector
//   selectedRideType={selectedRideType}
//   setSelectedRideType={handleRideTypeSelect}
//   estimatedPrice={estimatedPrice}
//   distance={distance}
//   dynamicPrices={dynamicPrices}
// />
        
//           <View style={styles.bookRideButtonContainer}>
//             <TouchableOpacity
//               style={[
//                 styles.bookRideButton,
//                 isBookRideButtonEnabled ? styles.enabledBookRideButton : styles.disabledBookRideButton,
//               ]}
//               onPress={handleBookRide}
//               disabled={!isBookRideButtonEnabled}
//             >
//               <Text style={styles.bookRideButtonText}>BOOK RIDE</Text>
//             </TouchableOpacity>
//           </View>
        
//           {showPricePanel && selectedRideType && (
//             <Animated.View
//               style={[
//                 styles.pricePanel,
//                 {
//                   transform: [{
//                     translateY: panelAnimation.interpolate({
//                       inputRange: [0, 1],
//                       outputRange: [300, 0],
//                     }),
//                   }],
//                 },
//               ]}
//             >
//               <View style={styles.panelHeader}>
//                 <Text style={styles.panelTitle}>Ride Details</Text>
//                 <TouchableOpacity onPress={() => setShowPricePanel(false)}>
//                   <MaterialIcons name="close" size={24} color="#666" />
//                 </TouchableOpacity>
//               </View>
//               <View style={styles.priceDetailsContainer}>
//                 <View style={styles.vehicleIconContainer}>
//                   {renderVehicleIcon(selectedRideType as 'bike' | 'taxi' | 'port', 40, '#000000')}
//                 </View>
//                 <View style={styles.priceInfoContainer}>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Pickup:</Text>
//                     <Text style={styles.priceValue} numberOfLines={1}>{pickup || 'Not selected'}</Text>
//                   </View>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Drop-off:</Text>
//                     <Text style={styles.priceValue} numberOfLines={1}>{dropoff || 'Not selected'}</Text>
//                   </View>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Distance:</Text>
//                     <Text style={styles.priceValue}>{distance || '---'}</Text>
//                   </View>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Price:</Text>
//                     <Text style={styles.priceValue}>₹{estimatedPrice || '---'}</Text>
//                   </View>
//                   <View style={styles.returnTripRow}>
//                     <Text style={styles.priceLabel}>Return trip:</Text>
//                     <Switch
//                       value={wantReturn}
//                       onValueChange={setWantReturn}
//                       trackColor={{ false: '#767577', true: '#4CAF50' }}
//                       thumbColor={wantReturn ? '#FFFFFF' : '#FFFFFF'}
//                     />
//                   </View>
//                 </View>
//               </View>
//               <View style={styles.bookButtonContainer}>
//                 <TouchableOpacity
//                   style={styles.bookMyRideButton}
//                   onPress={handleBookRide}
//                 >
//                   <Text style={styles.bookMyRideButtonText}>BOOK MY RIDE</Text>
//                 </TouchableOpacity>
//               </View>
//             </Animated.View>
//           )}
        
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showConfirmModal}
//             onRequestClose={() => setShowConfirmModal(false)}
//           >
//             <View style={styles.modalOverlay}>
//               <View style={styles.modalContainer}>
//                 <View style={styles.modalHeader}>
//                   <Text style={styles.modalTitle}>Confirm Booking</Text>
//                   <TouchableOpacity onPress={() => setShowConfirmModal(false)}>
//                     <MaterialIcons name="close" size={24} color="#666" />
//                   </TouchableOpacity>
//                 </View>
//                 <View style={styles.modalContent}>
//                   <View style={styles.modalIconContainer}>
//                     <Ionicons name="checkmark-circle" size={60} color="#4CAF50" />
//                   </View>
//                   <Text style={styles.modalMessage}>
//                     Thank you for choosing EAZY GO!
//                   </Text>
//                   <Text style={styles.modalSubMessage}>
//                     Your ride has been successfully booked.
//                   </Text>
//                   <View style={styles.otpContainer}>
//                     <Text style={styles.otpLabel}>Your pickup OTP is:</Text>
//                     <Text style={styles.otpValue}>{bookingOTP}</Text>
//                   </View>
//                   <Text style={styles.otpWarning}>
//                     Please don't share it with anyone. Only share with our driver.
//                   </Text>
//                 </View>
//                 <View style={styles.modalButtons}>
//                   <TouchableOpacity
//                     style={styles.modalCancelButton}
//                     onPress={() => setShowConfirmModal(false)}
//                   >
//                     <Text style={styles.modalCancelButtonText}>Cancel</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={styles.modalConfirmButton}
//                     onPress={handleConfirmBooking}
//                   >
//                     <Text style={styles.modalConfirmButtonText}>Confirm</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
//           {/* Pickup Map Modal */}
//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showPickupMapModal}
//             onRequestClose={() => setShowPickupMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: pickupLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: pickupLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, true)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#4CAF50" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowPickupMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>
//           {/* Dropoff Map Modal */}
//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showDropoffMapModal}
//             onRequestClose={() => setShowDropoffMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: dropoffLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: dropoffLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, false)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#F44336" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowDropoffMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>
//         </>
//       )}
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: { flex: 1, backgroundColor: '#F5F5F5' },
//   loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
//   loadingText: { color: '#757575', fontSize: 16, marginTop: 10 },
//   mapContainer: {
//     height: Dimensions.get('window').height * 0.4,
//     width: '100%',
//     borderRadius: 15,
//     overflow: 'hidden',
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   map: { ...StyleSheet.absoluteFillObject },
//   driversCountOverlay: {
//     position: 'absolute',
//     top: 289,
//     left: 3,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     paddingHorizontal: 12,
//     paddingVertical: 8,
//     borderRadius: 20,
//     elevation: 2,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.2,
//     shadowRadius: 2
//   },
//   driversCountText: { fontSize: 14, fontWeight: '600', color: '#333333' },
//   driverInfoContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   driverInfoTitle: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#333333',
//     marginBottom: 10
//   },
//   driverDetailsRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   driverDetailText: {
//     fontSize: 14,
//     color: '#555555',
//     marginLeft: 10
//   },
//   statusContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   statusIndicator: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   statusText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#4CAF50',
//     marginLeft: 10
//   },
//   statusSubText: {
//     fontSize: 14,
//     color: '#757575',
//     textAlign: 'center'
//   },
//   inputContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   inputRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   inputWrapper: {
//     flex: 1,
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingHorizontal: 15,
//     paddingVertical: 5,
//   },
//   inputIconContainer: {
//     marginRight: 10,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   distanceText: {
//     fontSize: 12,
//     fontWeight: 'normal',
//     color: '#666666',
//   },
//   input: { flex: 1, fontSize: 16, paddingVertical: 12, color: '#333' },
//   selectMapButton: {
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     backgroundColor: '#4CAF50',
//     borderRadius: 5,
//     marginRight: 10,
//   },
//   selectMapButtonText: {
//     color: '#FFFFFF',
//     fontSize: 12,
//   },
//   suggestionsContainer: {
//     marginTop: 5,
//     marginHorizontal: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 8,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     maxHeight: 200
//   },
//   suggestionItem: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingVertical: 12,
//     paddingHorizontal: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   suggestionIcon: { marginRight: 12 },
//   suggestionTextContainer: { flex: 1 },
//   suggestionMainText: { fontSize: 16, fontWeight: '500', color: '#333333' },
//   suggestionSubText: { fontSize: 12, color: '#757575', marginTop: 2 },
//   noSuggestionsContainer: { paddingVertical: 12, alignItems: 'center' },
//   noSuggestionsText: { fontSize: 14, color: '#666666' },
//   distanceTimeContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   distanceTimeItem: { flexDirection: 'row', alignItems: 'center' },
//   distanceTimeLabel: { fontSize: 14, fontWeight: '600', color: '#757575', marginLeft: 8 },
//   distanceTimeValue: { fontSize: 14, fontWeight: 'bold', color: '#333333', marginLeft: 5 },
//   rideTypeContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//   },
//   rideTypeButton: {
//     width: '100%',
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 5,
//     marginBottom: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   selectedRideTypeButton: {
//     backgroundColor: '#4caf50',
//     borderWidth: 2,
//     borderColor: '#4caf50'
//   },
//   rideIconContainer: {
//     marginRight: 15,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideInfoContainer: {
//     flex: 1,
//   },
//   rideTypeText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 4,
//   },
//   selectedRideTypeText: {
//     color: '#FFFFFF'
//   },
//   rideDetailsText: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 6,
//   },
//   selectedRideDetailsText: {
//     color: '#FFFFFF'
//   },
//   ridePriceText: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   bookRideButtonContainer: {
//     marginHorizontal: 20,
//     marginBottom: 20
//   },
//   bookRideButton: {
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   enabledBookRideButton: { backgroundColor: '#4caf50' },
//   disabledBookRideButton: { backgroundColor: '#BDBDBD' },
//   bookRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   errorContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFEBEE',
//     borderRadius: 12,
//     padding: 15,
//     borderLeftWidth: 4,
//     borderLeftColor: '#F44336'
//   },
//   errorText: {
//     color: '#D32F2F',
//     fontSize: 14,
//     textAlign: 'center'
//   },
//   pricePanel: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     padding: 20,
//     maxHeight: Dimensions.get('window').height * 0.5,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   panelHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//     paddingBottom: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   panelTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   priceDetailsContainer: {
//     flexDirection: 'row',
//     marginBottom: 8
//   },
//   driverMarkerContainer: {
//     alignItems: 'center',
//     justifyContent: 'center',
//     width: 50,
//     height: 50,
//   },
//   vehicleIconContainer: {
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     backgroundColor: '#4CAF50',
//     alignItems: 'center',
//     justifyContent: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   priceInfoContainer: {
//     flex: 1
//   },
//   priceRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 10
//   },
//   priceLabel: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     flex: 1
//   },
//   priceValue: {
//     fontSize: 13,
//     fontWeight: 'bold',
//     color: '#333333',
//     flex: 2,
//     textAlign: 'right'
//   },
//   returnTripRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginTop: 5
//   },
//   bookButtonContainer: {
//     marginTop: 10
//   },
//   bookMyRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   bookMyRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   modalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   modalContainer: {
//     width: '85%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   modalHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   modalContent: {
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalIconContainer: {
//     marginBottom: 15
//   },
//   modalMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 5
//   },
//   modalSubMessage: {
//     fontSize: 16,
//     color: '#666666',
//     textAlign: 'center',
//     marginBottom: 20
//   },
//   otpContainer: {
//     backgroundColor: '#F5F5F5',
//     borderRadius: 10,
//     padding: 15,
//     alignItems: 'center',
//     marginBottom: 15,
//     width: '100%'
//   },
//   otpLabel: {
//     fontSize: 14,
//     color: '#666666',
//     marginBottom: 5
//   },
//   otpValue: {
//     fontSize: 24,
//     fontWeight: 'bold',
//     color: '#4caf50'
//   },
//   otpWarning: {
//     fontSize: 12,
//     color: '#F44336',
//     textAlign: 'center',
//     fontStyle: 'italic'
//   },
//   modalButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between'
//   },
//   modalCancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginRight: 10,
//     alignItems: 'center'
//   },
//   modalCancelButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#666666'
//   },
//   modalConfirmButton: {
//     flex: 1,
//     backgroundColor: '#4CAF50',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginLeft: 10,
//     alignItems: 'center'
//   },
//   modalConfirmButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#FFFFFF'
//   },
//   vehicleMarkerContainer: {
//     borderRadius: 20,
//     padding: 5,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   modalMapContainer: {
//     flex: 1,
//     position: 'relative',
//   },
//   modalMap: {
//     flex: 1,
//   },
//   centerMarker: {
//     position: 'absolute',
//     top: '50%',
//     left: '50%',
//     transform: [{ translateX: -24 }, { translateY: -48 }],
//   },
//   modalCloseButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 8,
//     elevation: 3,
//   },
// });

// export default TaxiContent;
























































































































































































































































































































































































// import React, { useState, useEffect, useRef, useCallback } from 'react';
// import {
//   View,
//   StyleSheet,
//   Text,
//   TouchableOpacity,
//   Dimensions,
//   Alert,
//   ActivityIndicator,
//   Animated,
//   Switch,
//   Modal,
//   TextInput,
//   PermissionsAndroid,
//   Platform,
//   Image
// } from 'react-native';
// import MapView, { Marker, Polyline } from 'react-native-maps';
// import Geolocation from '@react-native-community/geolocation';
// import socket from '../../socket';
// import haversine from 'haversine-distance';
// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
// import Ionicons from 'react-native-vector-icons/Ionicons';
// import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
// import FontAwesome from 'react-native-vector-icons/FontAwesome';
// import axios from 'axios';
// import Svg, { Path, Circle, Rect } from 'react-native-svg';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getBackendUrl } from '../../util/backendConfig';
// import BikeIcon from '../../../assets001/bike.svg';
// import LorryIcon from '../../../assets001/lorry.svg';
// import TaxiIcon from '../../../assets001/taxi.svg';



// const RideTypeSelector = ({ selectedRideType, setSelectedRideType, estimatedPrice, distance, dynamicPrices }) => {
//   return (
//     <View style={styles.rideTypeContainer}>
//       {/* Porter Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'port' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('port')}
//       >
//         <View style={styles.rideIconContainer}>
//           <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'port' && styles.selectedRideTypeText,
//           ]}>CarGo Porter</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'port' && styles.selectedRideDetailsText,
//           ]}>Max 5 ton</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
    
//       {/* Taxi Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'taxi' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('taxi')}
//       >
//         <View style={styles.rideIconContainer}>
//           <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'taxi' && styles.selectedRideTypeText,
//           ]}>Taxi</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'taxi' && styles.selectedRideDetailsText,
//           ]}>4 seats</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
    
//       {/* Bike Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'bike' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('bike')}
//       >
//         <View style={styles.rideIconContainer}>
//           <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'bike' && styles.selectedRideTypeText,
//           ]}>Motorcycle</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'bike' && styles.selectedRideDetailsText,
//           ]}>1 person</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
//     </View>
//   );
// };



// interface LocationType {
//   latitude: number;
//   longitude: number;
// }

// interface SuggestionType {
//   id: string;
//   name: string;
//   address: string;
//   lat: string;
//   lon: string;
//   type: string;
//   importance: number;
// }

// interface DriverType {
//   driverId: string;
//   name: string;
//   location: {
//     coordinates: [number, number]; // [longitude, latitude]
//   };
//   vehicleType: string;
//   status?: string;
//   driverMobile?: string;
// }

// interface TaxiContentProps {
//   loadingLocation?: boolean;
//   currentLocation: LocationType | null;
//   lastSavedLocation: LocationType | null;
//   pickup: string;
//   dropoff: string;
//   handlePickupChange: (text: string) => void;
//   handleDropoffChange: (text: string) => void;
// }

// const TaxiContent: React.FC<TaxiContentProps> = ({
//   loadingLocation: propLoadingLocation,
//   currentLocation: propCurrentLocation,
//   lastSavedLocation: propLastSavedLocation,
//   pickup,
//   dropoff,
//   handlePickupChange: propHandlePickupChange,
//   handleDropoffChange: propHandleDropoffChange,
// }) => {
//   const [isLoadingLocation, setIsLoadingLocation] = useState(true);
//   const [selectedRideType, setSelectedRideType] = useState<string>('taxi');
//   const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);
//   const [showPricePanel, setShowPricePanel] = useState(false);
//   const [wantReturn, setWantReturn] = useState(false);
//   const [distance, setDistance] = useState<string>('');
//   const [travelTime, setTravelTime] = useState<string>('');
//   const [showConfirmModal, setShowConfirmModal] = useState(false);
//   const [bookingOTP, setBookingOTP] = useState<string>('');
//   const [apiError, setApiError] = useState<string | null>(null);
//   const [location, setLocation] = useState<LocationType | null>(null);
//   const [pickupLocation, setPickupLocation] = useState<LocationType | null>(null);
//   const [dropoffLocation, setDropoffLocation] = useState<LocationType | null>(null);
//   const [routeCoords, setRouteCoords] = useState<LocationType[]>([]);
//   const [currentRideId, setCurrentRideId] = useState<string | null>(null);
//   const [rideStatus, setRideStatus] = useState<"idle" | "searching" | "onTheWay" | "arrived" | "started" | "completed">("idle");
//   const [driverId, setDriverId] = useState<string | null>(null);
//   const [driverLocation, setDriverLocation] = useState<LocationType | null>(null);
//   const [travelledKm, setTravelledKm] = useState(0);
//   const [lastCoord, setLastCoord] = useState<LocationType | null>(null);
//   const [nearbyDrivers, setNearbyDrivers] = useState<DriverType[]>([]);
//   const [nearbyDriversCount, setNearbyDriversCount] = useState<number>(0);
//   const [pickupSuggestions, setPickupSuggestions] = useState<SuggestionType[]>([]);
//   const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);
//   const [dropoffSuggestions, setDropoffSuggestions] = useState<SuggestionType[]>([]);
//   const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);
//   const [pickupLoading, setPickupLoading] = useState(false);
//   const [dropoffLoading, setDropoffLoading] = useState(false);
//   const [suggestionsError, setSuggestionsError] = useState<string | null>(null);
//   const [pickupCache, setPickupCache] = useState<Record<string, SuggestionType[]>>({});
//   const [dropoffCache, setDropoffCache] = useState<Record<string, SuggestionType[]>>({});
//   const [isPickupCurrent, setIsPickupCurrent] = useState(false); // ✅ FIXED: Changed default to false
//   const [socketConnected, setSocketConnected] = useState(false);
//   const [driverArrivedAlertShown, setDriverArrivedAlertShown] = useState(false);
//   const [rideCompletedAlertShown, setRideCompletedAlertShown] = useState(false);
//   const [acceptedDriver, setAcceptedDriver] = useState<DriverType | null>(null);
//   const [isBooking, setIsBooking] = useState(false);
//   const [driverName, setDriverName] = useState<string | null>(null);
//   const [driverMobile, setDriverMobile] = useState<string | null>(null);
//   const [bookedAt, setBookedAt] = useState<Date | null>(null);
//   const [showPickupMapModal, setShowPickupMapModal] = useState(false);
//   const [showDropoffMapModal, setShowDropoffMapModal] = useState(false);

//   const pickupDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const dropoffDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const regionChangeTimer = useRef<NodeJS.Timeout | null>(null);
//   const [priceLoading, setPriceLoading] = useState(false);
//   const panelAnimation = useRef(new Animated.Value(0)).current;
//   const mapRef = useRef<MapView | null>(null);
//   const fallbackLocation: LocationType = {
//     latitude: 11.3312971,
//     longitude: 77.7167303,
//   };

//   // ✅ IMPROVED: Accurate distance calculation
//   const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371; // Earth's radius in kilometers
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
//               Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//               Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distance = R * c;
//     console.log(`📍 Distance calculation: (${lat1},${lon1}) to (${lat2},${lon2}) = ${distance.toFixed(4)} km`);
//     return distance;
//   };

//   const calculateDistanceInMeters = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371;
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a =
//       Math.sin(dLat/2) * Math.sin(dLat/2) +
//       Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//       Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distanceKm = R * c;
//     return distanceKm * 1000;
//   };

//   // ✅ CORRECTED: Nearby drivers filtering logic
//   const fetchNearbyDrivers = (latitude: number, longitude: number) => {
//     console.log(`Fetching nearby drivers for lat: ${latitude}, lng: ${longitude}`);
//     if (socket && socketConnected) {
//       socket.emit("requestNearbyDrivers", {
//         latitude,
//         longitude,
//         radius: 10000,
//         vehicleType: selectedRideType
//       });
//       console.log("Emitted requestNearbyDrivers event");
//     } else {
//       console.log("Socket not connected, attempting to reconnect...");
//       socket.connect();
//       socket.once("connect", () => {
//         console.log("Socket reconnected, emitting requestNearbyDrivers");
//         socket.emit("requestNearbyDrivers", {
//           latitude,
//           longitude,
//           radius: 10000,
//           vehicleType: selectedRideType
//         });
//       });
//     }
//   };

//   // ✅ CORRECTED: Nearby drivers response handler with DEBUG
//   useEffect(() => {
//     const handleNearbyDriversResponse = (data: { drivers: DriverType[] }) => {
//       console.log('📍 Received nearby drivers response:', JSON.stringify(data, null, 2));
//       if (!location) {
//         console.log("❌ No location available, can't process drivers");
//         return;
//       }
    
//       console.log('📍 User current location:', location);
//       console.log('📍 Number of drivers received:', data.drivers.length);
    
//       // ✅ ACTIVE RIDE: Show only accepted driver
//       if (currentRideId && acceptedDriver) {
//         console.log('🚗 Active ride - Showing only accepted driver');
//         const acceptedDriverData = data.drivers.find(d => d.driverId === acceptedDriver.driverId);
//         if (acceptedDriverData) {
//           setNearbyDrivers([acceptedDriverData]);
//           setNearbyDriversCount(1);
//           console.log('✅ Accepted driver found and displayed');
//         } else {
//           setNearbyDrivers([]);
//           setNearbyDriversCount(0);
//           console.log('❌ Accepted driver not found in response');
//         }
//         return;
//       }
    
//       // ✅ NO ACTIVE RIDE: Show all online drivers with DEBUG
//       const filteredDrivers = data.drivers
//         .filter(driver => {
//           console.log(`🔍 Processing driver: ${driver.driverId} (${driver.name})`);
//           console.log(`📍 Driver location: ${driver.location.coordinates[1]}, ${driver.location.coordinates[0]}`);
        
//           // Check driver status
//           if (driver.status && !["Live", "online", "onRide", "available"].includes(driver.status)) {
//             console.log(`❌ Driver ${driver.driverId} filtered out by status: ${driver.status}`);
//             return false;
//           }
        
//           // Calculate distance
//           const distance = calculateDistance(
//             location.latitude,
//             location.longitude,
//             driver.location.coordinates[1],
//             driver.location.coordinates[0]
//           );
//           console.log(`📏 Driver ${driver.driverId} distance: ${distance.toFixed(2)} km`);
        
//           const isWithinRange = distance <= 10;
//           console.log(`✅ Driver ${driver.driverId} within 10km: ${isWithinRange}`);
        
//           return isWithinRange;
//         })
//         .sort((a, b) => {
//           const distA = calculateDistance(location.latitude, location.longitude, a.location.coordinates[1], a.location.coordinates[0]);
//           const distB = calculateDistance(location.latitude, location.longitude, b.location.coordinates[1], b.location.coordinates[0]);
//           return distA - distB;
//         })
//         .slice(0, 10);
    
//       console.log('✅ Filtered drivers count:', filteredDrivers.length);
//       console.log('📍 Final drivers to display:', filteredDrivers);
    
//       setNearbyDrivers(filteredDrivers);
//       setNearbyDriversCount(filteredDrivers.length);
//     };
//     socket.on("nearbyDriversResponse", handleNearbyDriversResponse);
//     return () => socket.off("nearbyDriversResponse", handleNearbyDriversResponse);
//   }, [location, socketConnected, currentRideId, acceptedDriver]);

//   useEffect(() => {
//     const requestLocation = async () => {
//       setIsLoadingLocation(true);
//       if (propCurrentLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using current location from props:`, propCurrentLocation);
//         setLocation(propCurrentLocation);
//         global.currentLocation = propCurrentLocation;
//         fetchNearbyDrivers(propCurrentLocation.latitude, propCurrentLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       if (propLastSavedLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using last saved location from props:`, propLastSavedLocation);
//         setLocation(propLastSavedLocation);
//         global.currentLocation = propLastSavedLocation;
//         fetchNearbyDrivers(propLastSavedLocation.latitude, propLastSavedLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using fallback location:`, fallbackLocation);
//       setLocation(fallbackLocation);
//       global.currentLocation = fallbackLocation;
//       fetchNearbyDrivers(fallbackLocation.latitude, fallbackLocation.longitude);
//       setIsLoadingLocation(false);
//       if (Platform.OS === "android") {
//         const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
//         if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location permission denied`);
//           Alert.alert("Permission Denied", "Location permission is required to proceed.");
//           return;
//         }
//       }
//       Geolocation.getCurrentPosition(
//         (pos) => {
//           const loc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Live location fetched successfully:`, loc);
//           setLocation(loc);
//           global.currentLocation = loc;
//           fetchNearbyDrivers(loc.latitude, loc.longitude);
//         },
//         (err) => {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location error:`, err.code, err.message);
//           Alert.alert("Location Error", "Could not fetch location. Please try again or check your GPS settings.");
//         },
//         { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000, distanceFilter: 10 }
//       );
//     };
//     requestLocation();
//   }, [propCurrentLocation, propLastSavedLocation]);

//   // Driver-side code (e.g., in a DriverDashboard component)
//   const handleCompleteRide = () => {
//     const rideId = currentRideId; // Assume this is stored in driver state
//     const driverId = currentDriverId; // Assume this is the logged-in driver ID
//     const finalDistance = calculateFinalDistance(); // Logic to compute distance
//     const finalTime = calculateFinalTime(); // Logic to compute travel time
//     const finalCharge = calculateFinalCharge(finalDistance, finalTime); // Pricing logic
//     socket.emit('rideCompleted', {
//       rideId,
//       driverId,
//       distance: finalDistance,
//       travelTime: finalTime,
//       charge: finalCharge
//     });
//     socket.emit('rideStatusUpdate', {
//       rideId,
//       status: 'completed',
//       distance: finalDistance,
//       travelTime: finalTime,
//       charge: finalCharge
//     });
//   };

//   useEffect(() => {
//     const handleConnect = async () => {
//       console.log("Socket connected");
//       setSocketConnected(true);
//       if (location) fetchNearbyDrivers(location.latitude, location.longitude);
    
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User registered with socket:', userId);
//         }
//       } catch (error) {
//         console.error('Error registering user with socket:', error);
//       }
//     };
  
//     const handleDisconnect = () => { console.log("Socket disconnected"); setSocketConnected(false); };
//     const handleConnectError = (error: Error) => { console.error("Socket connection error:", error); setSocketConnected(false); };
  
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     socket.on("connect_error", handleConnectError);
//     setSocketConnected(socket.connected);
  
//     return () => {
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//       socket.off("connect_error", handleConnectError);
//     };
//   }, [location]);

//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected]);

//   // ✅ CRITICAL FIX: Driver live location updates with proper state management
//   useEffect(() => {
//     const handleDriverLiveLocationUpdate = (data: { driverId: string; lat: number; lng: number; status?: string }) => {
//       console.log('📍 Received driver location update:', data);
    
//       // If we have an active ride and this is the accepted driver
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('📍 Updating accepted driver location during active ride');
      
//         // CRITICAL: Update driver location state
//         const driverCoords = { latitude: data.lat, longitude: data.lng };
//         setDriverLocation(driverCoords);
      
//         // Update the driver in nearbyDrivers
//         setNearbyDrivers(prev => {
//           if (prev.length > 0 && prev[0].driverId === data.driverId) {
//             return [{
//               ...prev[0],
//               location: { coordinates: [data.lng, data.lat] },
//               status: data.status || "onTheWay"
//             }];
//           }
//           return prev;
//         });
      
//         // Calculate distance if needed
//         if (lastCoord) {
//           const dist = haversine(lastCoord, driverCoords);
//           setTravelledKm(prev => prev + dist / 1000);
//         }
//         setLastCoord(driverCoords);
      
//         // Check if driver is near pickup location
//         // ✅ IMPROVED: Check if driver is near pickup location
//         if (pickupLocation && rideStatus === "onTheWay") {
//           const distanceToPickup = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             pickupLocation.latitude,
//             pickupLocation.longitude
//           );
//           console.log(`📍 Driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//           if (distanceToPickup <= 50 && !driverArrivedAlertShown) {
//             console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED');
//             setRideStatus("arrived");
//             setDriverArrivedAlertShown(true);
          
//             // ✅ Immediately update UI state
//             setNearbyDrivers(prev => {
//               if (prev.length > 0 && prev[0].driverId === data.driverId) {
//                 return [{
//                   ...prev[0],
//                   status: "arrived"
//                 }];
//               }
//               return prev;
//             });
          
//             // Get customer ID for OTP
//             AsyncStorage.getItem('customerId').then(customerId => {
//               const otp = customerId ? customerId.slice(-4) : '1234';
//               Alert.alert(
//                 "🎉 Driver Arrived!",
//                 `Our driver (${acceptedDriver.name}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//                 [{ text: "OK", onPress: () => {
//                   console.log('✅ User acknowledged driver arrival');
//                 }}]
//               );
//             });
//           }
//         }
        
//         // Check if driver is near dropoff location
//         if (dropoffLocation && rideStatus === "started") {
//           const distanceToDropoff = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             dropoffLocation.latitude,
//             dropoffLocation.longitude
//           );
        
//           if (distanceToDropoff <= 50 && !rideCompletedAlertShown) {
//             // Instead of immediately completing the ride, just notify the backend
//             // The backend will handle the actual ride completion
//             socket.emit('driverReachedDestination', {
//               rideId: currentRideId,
//               driverId: data.driverId,
//               distance: travelledKm.toFixed(2)
//             });
          
//             // Set a flag to prevent multiple notifications
//             setRideCompletedAlertShown(true);
//           }
//         }
//         return; // Ignore other drivers during active ride
//       }
    
    
//       // If no active ride, update all drivers
//       setNearbyDrivers((prev) => {
//         const existingIndex = prev.findIndex(d => d.driverId === data.driverId);
//         if (existingIndex >= 0) {
//           const updated = [...prev];
//           updated[existingIndex] = {
//             ...updated[existingIndex],
//             location: { coordinates: [data.lng, data.lat] },
//             status: data.status || "Live"
//           };
//           return updated;
//         } else {
//           if (data.status && !["Live", "online", "onRide", "available"].includes(data.status)) return prev;
//           return [
//             ...prev,
//             {
//               driverId: data.driverId,
//               name: `Driver ${data.driverId}`,
//               location: { coordinates: [data.lng, data.lat] },
//               vehicleType: "taxi",
//               status: data.status || "Live"
//             }
//           ];
//         }
//       });
//     };
//     socket.on("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//     return () => socket.off("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//   }, [location, currentRideId, acceptedDriver, lastCoord, pickupLocation, dropoffLocation, rideStatus, driverArrivedAlertShown, rideCompletedAlertShown]);

//   // ✅ NEW: Polling for driver arrival to ensure reliability
//   useEffect(() => {
//     let intervalId;
//     if (rideStatus === "onTheWay" && pickupLocation && driverLocation && !driverArrivedAlertShown) {
//       intervalId = setInterval(() => {
//         const distanceToPickup = calculateDistanceInMeters(
//           driverLocation.latitude,
//           driverLocation.longitude,
//           pickupLocation.latitude,
//           pickupLocation.longitude
//         );
//         console.log(`📍 Polling driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//         if (distanceToPickup <= 50) {
//           console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED FROM POLLING');
//           setRideStatus("arrived");
//           setDriverArrivedAlertShown(true);
//           AsyncStorage.getItem('customerId').then(customerId => {
//             const otp = customerId ? customerId.slice(-4) : '1234';
//             Alert.alert(
//               "🎉 Driver Arrived!",
//               `Our driver (${acceptedDriver?.name || 'Driver'}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//               [{ text: "OK", onPress: () => {
//                 console.log('✅ User acknowledged driver arrival');
//               }}]
//             );
//           });
//           clearInterval(intervalId);
//         }
//       }, 2000); // Poll every 2 seconds
//     }
//     return () => {
//       if (intervalId) clearInterval(intervalId);
//     };
//   }, [rideStatus, pickupLocation, driverLocation, driverArrivedAlertShown, acceptedDriver]);

//   // ✅ NEW: Ride completion event handler
//   useEffect(() => {
//     const handleRideCompleted = (data: any) => {
//       console.log('🎉 Ride completed event received:', data);
    
//       // Update ride status to completed
//       setRideStatus("completed");
    
//       // Calculate final distance and time if not provided
//       const finalDistance = data.distance || travelledKm.toFixed(2);
//       const finalTime = data.travelTime || travelTime;
//       const finalCharge = data.charge || estimatedPrice;
    
//       // Show completion alert
//       Alert.alert(
//         "Ride Completed",
//         `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//         [
//           {
//             text: "OK",
//             onPress: () => {
//               // Reset ride state after completion
//               setTimeout(() => {
//                 setCurrentRideId(null);
//                 setDriverId(null);
//                 setDriverLocation(null);
//                 setAcceptedDriver(null);
//                 setRouteCoords([]);
//                 setPickupLocation(null);
//                 setDropoffLocation(null);
//                 propHandlePickupChange("");
//                 propHandleDropoffChange("");
//                 setRideStatus("idle");
//                 setDriverArrivedAlertShown(false);
//                 setRideCompletedAlertShown(false);
              
//                 // Fetch all drivers again after ride completion
//                 if (location) {
//                   fetchNearbyDrivers(location.latitude, location.longitude);
//                 }
//               }, 2000);
//             }
//           }
//         ]
//       );
    
//       // Clear ride data from storage
//       AsyncStorage.removeItem('currentRideId');
//       AsyncStorage.removeItem('acceptedDriver');
//       AsyncStorage.removeItem('bookedAt');
//       setBookedAt(null);
//     };
  
//     socket.on("rideCompleted", handleRideCompleted);
  
//     return () => {
//       socket.off("rideCompleted", handleRideCompleted);
//     };
//   }, [travelledKm, travelTime, estimatedPrice, location]);

//   // ✅ NEW: Ride status update handler
//   useEffect(() => {
//     const handleRideStatusUpdate = (data: any) => {
//       console.log('📋 Ride status update received:', data);
    
//       if (data.rideId === currentRideId) {
//         if (data.status === 'completed') {
//           // Handle ride completion
//           setRideStatus("completed");
        
//           // Calculate final distance and time if not provided
//           const finalDistance = data.distance || travelledKm.toFixed(2);
//           const finalTime = data.travelTime || travelTime;
//           const finalCharge = data.charge || estimatedPrice;
        
//           // Show completion alert
//           Alert.alert(
//             "Ride Completed",
//             `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//             [
//               {
//                 text: "OK",
//                 onPress: () => {
//                   // Reset ride state after completion
//                   setTimeout(() => {
//                     setCurrentRideId(null);
//                     setDriverId(null);
//                     setDriverLocation(null);
//                     setAcceptedDriver(null);
//                     setRouteCoords([]);
//                     setPickupLocation(null);
//                     setDropoffLocation(null);
//                     propHandlePickupChange("");
//                     propHandleDropoffChange("");
//                     setRideStatus("idle");
//                     setDriverArrivedAlertShown(false);
//                     setRideCompletedAlertShown(false);
                  
//                     // Fetch all drivers again after ride completion
//                     if (location) {
//                       fetchNearbyDrivers(location.latitude, location.longitude);
//                     }
//                   }, 2000);
//                 }
//               }
//             ]
//           );
        
//           // Clear ride data from storage
//           AsyncStorage.removeItem('currentRideId');
//           AsyncStorage.removeItem('acceptedDriver');
//           AsyncStorage.removeItem('bookedAt');
//           setBookedAt(null);
//         }
//       }
//     };
  
//     socket.on("rideStatusUpdate", handleRideStatusUpdate);
  
//     return () => {
//       socket.off("rideStatusUpdate", handleRideStatusUpdate);
//     };
//   }, [currentRideId, travelledKm, travelTime, estimatedPrice, location]);

//   useEffect(() => {
//     const handleDriverOffline = (data: { driverId: string }) => {
//       console.log(`Driver ${data.driverId} went offline`);
    
//       // ✅ Don't remove accepted driver during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('⚠️ Accepted driver went offline during active ride');
//         return;
//       }
    
//       setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//       setNearbyDriversCount(prev => Math.max(0, prev - 1));
//     };
  
//     socket.on("driverOffline", handleDriverOffline);
//     return () => socket.off("driverOffline", handleDriverOffline);
//   }, [currentRideId, acceptedDriver]);

//   useEffect(() => {
//     const handleDriverStatusUpdate = (data: { driverId: string; status: string }) => {
//       console.log(`Driver ${data.driverId} status updated to: ${data.status}`);
    
//       // ✅ Don't update accepted driver status during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('Keeping accepted driver status as onTheWay');
//         return;
//       }
    
//       if (data.status === "offline") {
//         setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//         setNearbyDriversCount(prev => Math.max(0, prev - 1));
//         return;
//       }
//       setNearbyDrivers(prev => prev.map(driver =>
//         driver.driverId === data.driverId ? { ...driver, status: data.status } : driver
//       ));
//     };
  
//     socket.on("driverStatusUpdate", handleDriverStatusUpdate);
//     return () => socket.off("driverStatusUpdate", handleDriverStatusUpdate);
//   }, [currentRideId, acceptedDriver]);

//   // ✅ BACKUP: Recover ride acceptance data on component mount
//   useEffect(() => {
//     const recoverRideData = async () => {
//       try {
//         const savedRideId = await AsyncStorage.getItem('currentRideId');
//         const savedDriverData = await AsyncStorage.getItem('acceptedDriver');
      
//         if (savedRideId && !currentRideId) {
//           console.log('🔄 Recovering ride data from storage:', savedRideId);
//           setCurrentRideId(savedRideId);
        
//           if (savedDriverData) {
//             const driverData = JSON.parse(savedDriverData);
//             setAcceptedDriver(driverData);
//             setDriverName(driverData.name);
//             setDriverMobile(driverData.driverMobile);
//             setRideStatus("onTheWay");
//           } else {
//             setRideStatus("searching");
//             const bookedStr = await AsyncStorage.getItem('bookedAt');
//             setBookedAt(bookedStr ? new Date(bookedStr) : new Date());
//             // Restart polling
//             const pollInterval = setInterval(() => {
//               if (currentRideId) {
//                 socket.emit('getRideStatus', { rideId: currentRideId });
//               }
//             }, 5000);
//             AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//             // Restart timeout (increased to 60s)
//             const acceptanceTimeout = setTimeout(() => {
//               if (rideStatus === "searching") {
//                 Alert.alert(
//                   "No Driver Available",
//                   "No driver has accepted your ride yet. Please try again or wait longer.",
//                   [{ text: "OK", onPress: () => setRideStatus("idle") }]
//                 );
//               }
//             }, 60000);
//             AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
//           }
        
//           // Request ride status from server
//           socket.emit('getRideStatus', { rideId: savedRideId });
//         }
//       } catch (error) {
//         console.error('Error recovering ride data:', error);
//       }
//     };
  
//     recoverRideData();
//   }, []);

//   const processRideAcceptance = useCallback((data: any) => {
//     console.log('🎯 PROCESSING RIDE ACCEPTANCE:', JSON.stringify(data, null, 2));
  
//     // Validate required data
//     if (!data.rideId || !data.driverId) {
//       console.error('❌ Invalid ride acceptance data:', data);
//       return;
//     }
//     // Clear existing timeouts and intervals
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Update ride status immediately
//     setRideStatus("onTheWay");
//     setDriverId(data.driverId);
//     setDriverName(data.driverName || 'Driver');
//     setDriverMobile(data.driverMobile || 'N/A');
//     setCurrentRideId(data.rideId);
//     // Create accepted driver object
//     const acceptedDriverData: DriverType = {
//       driverId: data.driverId,
//       name: data.driverName || 'Driver',
//       driverMobile: data.driverMobile || 'N/A',
//       location: {
//         coordinates: [data.driverLng || 0, data.driverLat || 0]
//       },
//       vehicleType: data.vehicleType || selectedRideType,
//       status: "onTheWay"
//     };
//     console.log('👨‍💼 Setting accepted driver:', acceptedDriverData);
  
//     // Update state
//     setAcceptedDriver(acceptedDriverData);
//     setNearbyDrivers([acceptedDriverData]);
//     setNearbyDriversCount(1);
//     // Set initial driver location
//     if (data.driverLat && data.driverLng) {
//       const driverLoc = {
//         latitude: data.driverLat,
//         longitude: data.driverLng
//       };
//       setDriverLocation(driverLoc);
//       console.log('📍 Initial driver location set:', driverLoc);
//     }
//     // Store in AsyncStorage for recovery
//     AsyncStorage.setItem('currentRideId', data.rideId);
//     AsyncStorage.setItem('acceptedDriver', JSON.stringify(acceptedDriverData));
  
//     console.log('✅ Ride acceptance processed successfully for:', data.rideId);
//   }, [selectedRideType]);

//   // Global ride acceptance listener
//   useEffect(() => {
//     console.log('🎯 Setting up GLOBAL ride acceptance listener');
//     const handleRideAccepted = (data: any) => {
//       console.log('🚨 ===== USER APP: RIDE ACCEPTED ====');
//       console.log('📦 Acceptance data:', JSON.stringify(data, null, 2));
//       console.log('🚨 ===== END ACCEPTANCE DATA ====');
//       processRideAcceptance(data);
//     };
//     // Listen on multiple channels
//     socket.on("rideAccepted", handleRideAccepted);
  
//     // Fixed: Proper async handling
//     socket.on("rideAcceptedBroadcast", async (data) => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (data.targetUserId === userId) {
//           handleRideAccepted(data);
//         }
//       } catch (error) {
//         console.error('Error checking user ID:', error);
//       }
//     });
//     return () => {
//       socket.off("rideAccepted", handleRideAccepted);
//       socket.off("rideAcceptedBroadcast", handleRideAccepted);
//     };
//   }, [processRideAcceptance]);

//   // ✅ CRITICAL: Add these missing socket event handlers
//   useEffect(() => {
//     console.log('🔌 Setting up CRITICAL socket event handlers');
//     // Handle getDriverData response
//     const handleDriverDataResponse = (data: any) => {
//       console.log('🚗 Driver data received:', data);
//       if (data.success) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle getRideStatus response
//     const handleRideStatusResponse = (data: any) => {
//       console.log('📋 Ride status received:', data);
//       if (data.driverId) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle backup ride acceptance
//     const handleBackupRideAccepted = (data: any) => {
//       console.log('🔄 Backup ride acceptance:', data);
//       processRideAcceptance(data);
//     };
//     socket.on("driverDataResponse", handleDriverDataResponse);
//     socket.on("rideStatusResponse", handleRideStatusResponse);
//     socket.on("backupRideAccepted", handleBackupRideAccepted);
//     return () => {
//       socket.off("driverDataResponse", handleDriverDataResponse);
//       socket.off("rideStatusResponse", handleRideStatusResponse);
//       socket.off("backupRideAccepted", handleBackupRideAccepted);
//     };
//   }, [selectedRideType]);

//   // ✅ COMPREHENSIVE SOCKET DEBUGGER
//   useEffect(() => {
//     console.log('🔍 Starting comprehensive socket debugging');
  
//     // Debug all socket events
//     const debugAllEvents = (eventName: string, data: any) => {
//       if (eventName.includes('ride') || eventName.includes('driver') || eventName.includes('Room')) {
//         console.log(`📡 SOCKET EVENT [${eventName}]:`, data);
//       }
//     };
//     // Specific debug for rideAccepted
//     const debugRideAccepted = (data: any) => {
//       console.log('🚨🚨🚨 RIDE ACCEPTED EVENT RECEIVED 🚨🚨🚨');
//       console.log('📦 Data:', JSON.stringify(data, null, 2));
//       console.log('🔍 Current state:', {
//         currentRideId,
//         rideStatus,
//         hasAcceptedDriver: !!acceptedDriver
//       });
    
//       // Process immediately
//       processRideAcceptance(data);
//     };
//     // Debug connection
//     const handleConnect = () => {
//       console.log('✅ Socket connected - ID:', socket.id);
//       setSocketConnected(true);
//     };
//     const handleDisconnect = () => {
//       console.log('❌ Socket disconnected');
//       setSocketConnected(false);
//     };
//     // Add all listeners
//     socket.onAny(debugAllEvents);
//     socket.on("rideAccepted", debugRideAccepted);
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     console.log('🔍 Socket debuggers activated');
//     return () => {
//       socket.offAny(debugAllEvents);
//       socket.off("rideAccepted", debugRideAccepted);
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//     };
//   }, [currentRideId, rideStatus, acceptedDriver, processRideAcceptance]);

//   // Add this to your user app component (e.g., TaxiContent.js)
//   // Send location updates to backend
//   const sendLocationUpdate = async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
//       const currentRideId = await AsyncStorage.getItem('currentRideId');
    
//       if (!userId) return;
    
//       // Send to socket
//       socket.emit('userLocationUpdate', {
//         userId,
//         latitude,
//         longitude,
//         rideId: currentRideId
//       });
    
//       // Also send to REST API as backup
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//     latitude,
//     longitude
//   }, {
//     headers: {
//       Authorization: `Bearer ${token}`
//     }
//   });
//       }
//     } catch (error) {
//       console.error('Error sending location update:', error);
//     }
//   };

//   // ✅ ADD TO YOUR TaxiContent.js COMPONENT
//   // Real-time user location tracking function
//   const sendUserLocationUpdate = useCallback(async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
    
//       if (!userId || !currentRideId) {
//         console.log('❌ Cannot send location: Missing userId or rideId');
//         return;
//       }
//       console.log(`📍 SENDING USER LOCATION UPDATE: ${latitude}, ${longitude} for ride ${currentRideId}`);
    
//       // Send to socket for real-time updates
//       socket.emit('userLocationUpdate', {
//         userId,
//         rideId: currentRideId,
//         latitude,
//         longitude,
//         timestamp: Date.now()
//       });
//       // Also save to database via REST API
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//           latitude,
//           longitude,
//           rideId: currentRideId
//         }, {
//           headers: {
//             Authorization: `Bearer ${token}`
//           }
//         });
//       }
//       console.log('✅ User location update sent successfully');
//     } catch (error) {
//       console.error('❌ Error sending user location update:', error);
//     }
//   }, [currentRideId]);

//   // ✅ CRITICAL: Continuous location tracking during active rides
//   useEffect(() => {
//     let locationInterval;
//     if ((rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && location) {
//       console.log('🔄 Starting continuous user location tracking');
    
//       locationInterval = setInterval(() => {
//         if (location) {
//           sendUserLocationUpdate(location.latitude, location.longitude);
//         }
//       }, 5000); // Send every 5 seconds
    
//     }
//     return () => {
//       if (locationInterval) {
//         clearInterval(locationInterval);
//         console.log('🛑 Stopped user location tracking');
//       }
//     };
//   }, [rideStatus, location, sendUserLocationUpdate]);

//   // ✅ ALSO UPDATE: Your existing location interval to include active ride statuses
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching" || rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
          
//             // Send location update if in active ride
//             if (rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") {
//               sendUserLocationUpdate(newLoc.latitude, newLoc.longitude);
//             }
          
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected, sendUserLocationUpdate]);

//   // ✅ FIXED: Remove the undefined property
//   useEffect(() => {
//     console.log('🔍 USER LOCATION DEBUG:', {
//       hasLocation: !!location,
//       rideStatus,
//       hasCurrentRideId: !!currentRideId,
//       socketConnected
//     });
//     if (currentRideId && location) {
//       console.log('📍 Current user position:', {
//         latitude: location.latitude,
//         longitude: location.longitude,
//         rideId: currentRideId
//       });
//     }
//   }, [location, rideStatus, currentRideId]);

//   // Update your location tracking code to send updates
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location) {
//         sendLocationUpdate(location.latitude, location.longitude);
//       }
//     }, 5000); // Send location every 5 seconds
//     return () => clearInterval(interval);
//   }, [location]);

//   // ✅ BACKUP: Manual ride status polling
//   useEffect(() => {
//     if (currentRideId && rideStatus === "searching") {
//       console.log('🔄 Starting backup polling for ride:', currentRideId);
    
//       const pollInterval = setInterval(() => {
//         console.log('📡 Polling ride status for:', currentRideId);
//         socket.emit('getRideStatus', { rideId: currentRideId }, (data) => {
//           if (data.driverId) {
//             processRideAcceptance(data);
//           } else if (bookedAt && (new Date().getTime() - bookedAt.getTime() > 60000) && rideStatus === "searching") {
//             console.log('⏰ No driver found after 60s');
//             Alert.alert(
//               "No Driver Available",
//               "No driver has accepted your ride yet. Please try again or wait longer.",
//               [{ text: "OK", onPress: () => setRideStatus("idle") }]
//             );
//             clearInterval(pollInterval);
//             AsyncStorage.removeItem('statusPollInterval');
//           }
//         });
//       }, 3000); // Poll every 3 seconds
//       // Store interval ID
//       AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//       return () => {
//         clearInterval(pollInterval);
//         AsyncStorage.removeItem('statusPollInterval');
//       };
//     }
//   }, [currentRideId, rideStatus, bookedAt]);

//   // ✅ CRITICAL: Ensure user joins their room on socket connection
//   useEffect(() => {
//     const registerUserRoom = async () => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId && socket.connected) {
//           console.log('👤 Registering user with socket room:', userId);
//           socket.emit('registerUser', { userId });
        
//           // Also join the room manually
//           socket.emit('joinRoom', { userId });
//         }
//       } catch (error) {
//         console.error('Error registering user room:', error);
//       }
//     };
//     // Register on connect and every 5 seconds to ensure room membership
//     socket.on('connect', registerUserRoom);
//     registerUserRoom();
//     // Re-register periodically to ensure room membership
//     const interval = setInterval(registerUserRoom, 5000);
//     return () => {
//       socket.off('connect', registerUserRoom);
//       clearInterval(interval);
//     };
//   }, []);

//   // ✅ SOCKET RECOVERY: Handle reconnection and missed events
//   useEffect(() => {
//     const handleReconnect = async () => {
//       console.log('🔌 Socket reconnected, recovering state...');
//       setSocketConnected(true);
    
//       // Re-register user
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User re-registered after reconnect:', userId);
//         }
      
//         // Request current ride status if we have a ride ID
//         const currentRideId = await AsyncStorage.getItem('currentRideId');
//         if (currentRideId) {
//           socket.emit('getRideStatus', { rideId: currentRideId });
//           console.log('🔄 Requesting status for current ride:', currentRideId);
//         }
//       } catch (error) {
//         console.error('Error during socket recovery:', error);
//       }
//     };
  
//     socket.on("connect", handleReconnect);
  
//     return () => {
//       socket.off("connect", handleReconnect);
//     };
//   }, []);

//   const fetchRoute = async (dropCoord: LocationType) => {
//     if (!pickupLocation) return;
//     try {
//       const url = `https://router.project-osrm.org/route/v1/driving/${pickupLocation.longitude},${pickupLocation.latitude};${dropCoord.longitude},${dropCoord.latitude}?overview=full&geometries=geojson`;
//       const res = await fetch(url);
//       const data = await res.json();
//       if (data.code === "Ok" && data.routes.length > 0) {
//         const coords = data.routes[0].geometry.coordinates.map(([lng, lat]: number[]) => ({ latitude: lat, longitude: lng }));
//         setRouteCoords(coords);
//         setDistance((data.routes[0].distance / 1000).toFixed(2) + " km");
//         setTravelTime(Math.round(data.routes[0].duration / 60) + " mins");
//       } else {
//         setApiError("Failed to fetch route");
//         Alert.alert("Route Error", "Could not find route. Please try different locations.");
//       }
//     } catch (err) {
//       console.error(err);
//       setRouteCoords([]);
//       setApiError("Network error fetching route");
//       Alert.alert("Route Error", "Failed to fetch route. Please check your internet connection.");
//     }
//   };

//   const fetchSuggestions = async (query: string, type: 'pickup' | 'dropoff'): Promise<SuggestionType[]> => {
//     try {
//       console.log(`Fetching suggestions for: ${query}`);
//       const cache = type === 'pickup' ? pickupCache : dropoffCache;
//       if (cache[query]) {
//         console.log(`Returning cached suggestions for: ${query}`);
//         return cache[query];
//       }
//       if (type === 'pickup') setPickupLoading(true);
//       else setDropoffLoading(true);
//       setSuggestionsError(null);
//       const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=5&addressdetails=1&countrycodes=IN`;
//       console.log(`API URL: ${url}`);
    
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
    
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       if (!Array.isArray(data)) throw new Error('Invalid response format');
    
//       const suggestions: SuggestionType[] = data.map((item: any) => ({
//         id: item.place_id || `${item.lat}-${item.lon}`,
//         name: item.display_name,
//         address: extractAddress(item),
//         lat: item.lat,
//         lon: item.lon,
//         type: item.type || 'unknown',
//         importance: item.importance || 0,
//       }));
//       if (type === 'pickup') setPickupCache(prev => ({ ...prev, [query]: suggestions }));
//       else setDropoffCache(prev => ({ ...prev, [query]: suggestions }));
//       return suggestions;
//     } catch (error: any) {
//       console.error('Suggestions fetch error:', error);
//       setSuggestionsError(error.message || 'Failed to fetch suggestions');
//       return [];
//     } finally {
//       if (type === 'pickup') setPickupLoading(false);
//       else setDropoffLoading(false);
//     }
//   };

//   const extractAddress = (item: any): string => {
//     if (item.address) {
//       const parts = [];
//       if (item.address.road) parts.push(item.address.road);
//       if (item.address.suburb) parts.push(item.address.suburb);
//       if (item.address.city || item.address.town || item.address.village) parts.push(item.address.city || item.address.town || item.address.village);
//       if (item.address.state) parts.push(item.address.state);
//       if (item.address.postcode) parts.push(item.address.postcode);
//       return parts.join(', ');
//     }
//     return item.display_name;
//   };

//   const handlePickupChange = (text: string) => {
//     console.log(`handlePickupChange called with: "${text}"`);
//     propHandlePickupChange(text);
//     if (pickupDebounceTimer.current) {
//       clearTimeout(pickupDebounceTimer.current);
//       pickupDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setPickupLoading(true);
//       setShowPickupSuggestions(true);
//       pickupDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'pickup');
//         setPickupSuggestions(sugg);
//         setPickupLoading(false);
//       }, 500);
//     } else {
//       setShowPickupSuggestions(false);
//       setPickupSuggestions([]);
//     }
//   };

//   const handleDropoffChange = (text: string) => {
//     console.log(`handleDropoffChange called with: "${text}"`);
//     propHandleDropoffChange(text);
//     if (dropoffDebounceTimer.current) {
//       clearTimeout(dropoffDebounceTimer.current);
//       dropoffDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setDropoffLoading(true);
//       setShowDropoffSuggestions(true);
//       dropoffDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'dropoff');
//         setDropoffSuggestions(sugg);
//         setDropoffLoading(false);
//       }, 500);
//     } else {
//       setShowDropoffSuggestions(false);
//       setDropoffSuggestions([]);
//     }
//   };

//   const selectPickupSuggestion = (suggestion: SuggestionType) => {
//     propHandlePickupChange(suggestion.name);
//     setPickupLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowPickupSuggestions(false);
//     setIsPickupCurrent(false);
//     if (dropoffLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     fetchNearbyDrivers(parseFloat(suggestion.lat), parseFloat(suggestion.lon));
//   };

//   const selectDropoffSuggestion = (suggestion: SuggestionType) => {
//     propHandleDropoffChange(suggestion.name);
//     setDropoffLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowDropoffSuggestions(false);
//     if (pickupLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//   };

//   useEffect(() => {
//     const updatePrice = async () => {
//       if (pickupLocation && dropoffLocation && distance) {
//         const price = await calculatePrice();
//         setEstimatedPrice(price);
//       }
//     };
//     updatePrice();
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   useEffect(() => {
//     if (pickupLocation && dropoffLocation && distance) {
//       const price = calculatePrice();
//       setEstimatedPrice(price);
//     }
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   useEffect(() => {
//     if (showPricePanel) {
//       Animated.timing(panelAnimation, {
//         toValue: 1,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     } else {
//       Animated.timing(panelAnimation, {
//         toValue: 0,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     }
//   }, [showPricePanel]);


  
//   // ❌ REMOVE THIS ENTIRE BLOCK - Hardcoded fallback prices
// // const fallbackPrices = {
// //   bike: 100,
// //   taxi: 500, 
// //   port: 1000
// // };

// // ✅ UPDATE THE fetchRidePrice FUNCTION - Remove fallback
// const fetchRidePrice = async (vehicleType: string, distance: number) => {
//   // Use ONLY dynamic prices from socket events
//   const pricePerKm = dynamicPrices[vehicleType];
  
//   // If dynamic prices are not set yet, wait for them
//   if (!pricePerKm || pricePerKm === 0) {
//     console.log(`⏳ Waiting for ${vehicleType} price from admin...`);
//     return 0;
//   }
  
//   const calculatedPrice = distance * pricePerKm;
  
//   console.log(`💰 Price calculation: ${distance}km ${vehicleType} × ₹${pricePerKm}/km = ₹${calculatedPrice}`);
//   return calculatedPrice;
// };






// const calculatePrice = async (): Promise<number | null> => {
//   if (!pickupLocation || !dropoffLocation || !distance) {
//     console.log('❌ Missing location data for price calculation');
//     return null;
//   }

//   const distanceKm = parseFloat(distance);
  
//   // DEBUG: Print current prices before calculation
//   console.log('\n💰 PRICE CALCULATION DEBUG:');
//   console.log(`📏 Distance: ${distanceKm}km`);
//   console.log(`🚗 Vehicle Type: ${selectedRideType}`);
//   console.log(`🏍️  BIKE Price/km: ₹${dynamicPrices.bike}`);
//   console.log(`🚕 TAXI Price/km: ₹${dynamicPrices.taxi}`);
//   console.log(`🚛 PORT Price/km: ₹${dynamicPrices.port}`);
//   console.log('─────────────────────────────────────');

//   try {
//     const pricePerKm = dynamicPrices[selectedRideType];
    
//     console.log(`💰 Using price per km: ₹${pricePerKm} for ${selectedRideType}`);

//     // Wait for admin prices - NO TEMPORARY FALLBACK
//     if (!pricePerKm || pricePerKm === 0) {
//       console.log('⏳ Waiting for admin prices to be loaded...');
//       console.log('🚫 Booking blocked until prices are received from admin');
//       return null;
//     }
    
//     const calculatedPrice = distanceKm * pricePerKm;
//     const multiplier = wantReturn ? 2 : 1;
//     const finalPrice = Math.round(calculatedPrice * multiplier);

//     console.log(`✅ Final price calculated: ${distanceKm}km × ₹${pricePerKm}/km × ${multiplier} = ₹${finalPrice}`);
//     return finalPrice;
//   } catch (error) {
//     console.error('❌ Error calculating price:', error);
//     return null;
//   }
// };




// // ✅ IMPROVED PRICE UPDATE HANDLER
// useEffect(() => {
//   const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 Received REAL-TIME price update from admin:', data);
    
//     // Update dynamic prices immediately
//     setDynamicPrices({
//       bike: data.bike,
//       taxi: data.taxi,
//       port: data.port,
//     });
    
//     // Log the new prices
//     console.log('🔄 PRICES UPDATED SUCCESSFULLY:');
//     console.log(`🏍️  BIKE: ₹${data.bike}/km`);
//     console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//     console.log(`🚛 PORT: ₹${data.port}/km`);
    
//     // Immediately recalculate price if a ride is being planned
//     if (pickupLocation && dropoffLocation && distance) {
//       console.log('🔄 Recalculating price with new admin rates...');
//       calculatePrice();
//     }
//   };

//   socket.on('priceUpdate', handlePriceUpdate);
  
//   return () => {
//     socket.off('priceUpdate', handlePriceUpdate);
//   };
// }, [pickupLocation, dropoffLocation, distance]);






// // ✅ INITIALIZE WITH ZERO PRICES - Force waiting for admin


// // ✅ FINAL WORKING SOLUTION - NO HARCODED PRICES

// const [dynamicPrices, setDynamicPrices] = useState({
//   bike: 0,
//   taxi: 0,
//   port: 0,
// });

// // Request prices on component mount
// useEffect(() => {
//   console.log('📡 Requesting current prices from admin...');
//   socket.emit('getCurrentPrices');
  
//   const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 Received current prices:', data);
//     setDynamicPrices(data);
//   };
  
//   socket.on('currentPrices', handleCurrentPrices);
  
//   return () => {
//     socket.off('currentPrices', handleCurrentPrices);
//   };
// }, []);

// // Listen for real-time price updates
// useEffect(() => {
//   const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 REAL-TIME PRICE UPDATE:', data);
//     setDynamicPrices(data);
    
//     console.log('✅ PRICES UPDATED:');
//     console.log(`🏍️  BIKE: ₹${data.bike}/km`);
//     console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//     console.log(`🚛 PORT: ₹${data.port}/km`);
    
//     // Recalculate immediately
//     if (pickupLocation && dropoffLocation && distance) {
//       calculatePrice();
//     }
//   };

//   socket.on('priceUpdate', handlePriceUpdate);
//   return () => socket.off('priceUpdate', handlePriceUpdate);
// }, [pickupLocation, dropoffLocation, distance]);



// // ✅ ADD THIS: Price debugging and console logging
// useEffect(() => {
//   console.log('💰 INITIALIZING PRICE DEBUGGING SYSTEM');
  
//   // Function to print current prices to console
//   const printCurrentPrices = () => {
//     console.log('\n🚗 ===== CURRENT RIDE PRICES =====');
//     console.log(`🏍️  BIKE: Today's price per km: ₹${dynamicPrices.bike}`);
//     console.log(`🚕 TAXI: Today's price per km: ₹${dynamicPrices.taxi}`);
//     console.log(`🚛 PORT: Today's price per km: ₹${dynamicPrices.port}`);
//     console.log('=================================\n');
//   };

//   // Listen for price updates from admin
//   const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 REAL-TIME PRICE UPDATE RECEIVED FROM ADMIN:', data);
    
//     // Update dynamic prices
//     setDynamicPrices({
//       bike: data.bike,
//       taxi: data.taxi,
//       port: data.port,
//     });
    
//     // Print updated prices to console
//     console.log('\n✅ ===== PRICES UPDATED SUCCESSFULLY =====');
//     console.log(`🏍️  BIKE: Today's price per km: ₹${data.bike}`);
//     console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//     console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//     console.log('=============================================\n');
    
//     // Recalculate price if needed
//     if (pickupLocation && dropoffLocation && distance) {
//       calculatePrice();
//     }
//   };

//   // Listen for initial prices when component mounts
//   const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 RECEIVED CURRENT PRICES FROM SERVER:');
//     console.log(`🏍️  BIKE: Today's price per km: ₹${data.bike}`);
//     console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//     console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//     console.log('─────────────────────────────────────');
    
//     setDynamicPrices(data);
//   };

//   // Request current prices when component mounts
//   console.log('📡 Requesting current prices from server...');
//   socket.emit('getCurrentPrices');

//   // Set up event listeners
//   socket.on('priceUpdate', handlePriceUpdate);
//   socket.on('currentPrices', handleCurrentPrices);
//   socket.on('ridePricesUpdated', handlePriceUpdate); // Alternative event name

//   // Print initial prices
//   printCurrentPrices();

//   // Set up interval to periodically request prices (as backup)
//   const priceInterval = setInterval(() => {
//     console.log('🔄 Periodic price check...');
//     socket.emit('getCurrentPrices');
//     printCurrentPrices();
//   }, 30000); // Every 30 seconds

//   return () => {
//     // Clean up event listeners
//     socket.off('priceUpdate', handlePriceUpdate);
//     socket.off('currentPrices', handleCurrentPrices);
//     socket.off('ridePricesUpdated', handlePriceUpdate);
//     clearInterval(priceInterval);
//   };
// }, [pickupLocation, dropoffLocation, distance]);



// // Add this useEffect to request current prices on component mount
// useEffect(() => {
//   console.log('📡 Requesting current prices from admin...');
  
//   // Request current prices when component mounts
//   socket.emit('getCurrentPrices');
  
//   // Also set up a listener for initial price response
//   const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 Received current prices from admin:', data);
//     setDynamicPrices(data);
//   };
  
//   socket.on('currentPrices', handleCurrentPrices);
  
//   return () => {
//     socket.off('currentPrices', handleCurrentPrices);
//   };
// }, []);






//   useEffect(() => {
//     const fetchInitialPrices = async () => {
//       try {
//         const bikeRate = await fetchRidePrice('bike', 1);
//         const taxiRate = await fetchRidePrice('taxi', 1);
//         const portRate = await fetchRidePrice('port', 1);
//         setDynamicPrices({
//           bike: bikeRate,
//           taxi: taxiRate,
//           port: portRate,
//         });
//         console.log(`BIKE: Today's price per km: ₹${bikeRate}`);
//         console.log(`TAXI: Today's price per km: ₹${taxiRate}`);
//         console.log(`PORT: Today's price per km: ₹${portRate}`);
//       } catch (error) {
//         console.error('❌ Error fetching initial prices:', error);
//         setDynamicPrices({
//           bike: 100,
//           taxi: 500,
//           port: 1000,
//         });
//         console.log(`BIKE: Today's price per km: ₹100 (fallback)`);
//         console.log(`TAXI: Today's price per km: ₹500 (fallback)`);
//         console.log(`PORT: Today's price per km: ₹1000 (fallback)`);
//       }
//     };
//     fetchInitialPrices();
//   }, []);

//   const handleRideTypeSelect = async (type: string) => {
//     if (selectedRideType === type) return;
//     setSelectedRideType(type);
//     setShowPricePanel(true);
//     if (pickupLocation && dropoffLocation) {
//       const price = await calculatePrice();
//       setEstimatedPrice(price);
//     }
//     if (location) fetchNearbyDrivers(location.latitude, location.longitude);
//   };

//   const handleBookRide = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
//       const price = await calculatePrice(); // Use async price calculation
//   if (!price) {
//     Alert.alert('Error', 'Price calculation failed. Please try again.');
//     return;
//   }
  
//     try {
//       setIsBooking(true);
    
//       const token = await AsyncStorage.getItem('authToken');
//       if (!token) {
//         Alert.alert('Authentication Error', 'Please log in to book a ride');
//         setIsBooking(false);
//         return;
//       }
//       if (!pickupLocation || !dropoffLocation) {
//         Alert.alert('Error', 'Please select both pickup and dropoff locations');
//         setIsBooking(false);
//         return;
//       }
//       if (!estimatedPrice) {
//         Alert.alert('Error', 'Price calculation failed. Please try again.');
//         setIsBooking(false);
//         return;
//       }
//       const userId = await AsyncStorage.getItem('userId');
//       const customerId = (await AsyncStorage.getItem('customerId')) || 'U001';
//       const userName = await AsyncStorage.getItem('userName');
//       const userMobile = await AsyncStorage.getItem('userMobile');
//       let otp;
//       if (customerId && customerId.length >= 4) {
//         otp = customerId.slice(-4);
//       } else {
//         otp = Math.floor(1000 + Math.random() * 9000).toString();
//       }
//       setRideStatus('searching');
//       setBookedAt(new Date());
//       console.log('📋 User Details:', {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup,
//         dropoff,
//         selectedRideType,
//         otp
//       });
//       const rideData = {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup: {
//           lat: pickupLocation.latitude,
//           lng: pickupLocation.longitude,
//           address: pickup,
//         },
//         drop: {
//           lat: dropoffLocation.latitude,
//           lng: dropoffLocation.longitude,
//           address: dropoff,
//         },
//         vehicleType: selectedRideType,
//         otp,
//         estimatedPrice,
//         distance,
//         travelTime,
//         wantReturn,
//         token
//       };
//       socket.emit('bookRide', rideData, (response) => {
//         setIsBooking(false);
      
//         if (response && response.success) {
//           setCurrentRideId(response.rideId);
//           AsyncStorage.setItem('bookedAt', new Date().toISOString());
//           setBookingOTP(response.otp);
//           setShowConfirmModal(true);
//           setRideStatus('searching');
//           console.log('✅ Ride booked successfully:', response);
//         } else {
//           Alert.alert('Booking Failed', response?.message || 'Failed to book ride');
//           setRideStatus('idle');
//           setCurrentRideId(null);
//         }
//       });
//     } catch (error) {
//       setIsBooking(false);
//       console.error('Booking error:', error);
//       Alert.alert('Booking Failed', 'An unexpected error occurred. Please try again.');
//       setRideStatus('idle');
//       setCurrentRideId(null);
//     }
//   };

//   // Add this useEffect to debug real-time events
//   useEffect(() => {
//     console.log('🎯 Setting up real-time event listeners');
  
//     // Listen for all socket events for debugging
//     const handler = (eventName: string, ...args: any[]) => {
//       if (eventName.includes('driver') || eventName.includes('location')) {
//         console.log('📡 Socket event:', eventName, args);
//       }
//     };
//     socket.onAny(handler);
//     return () => {
//       socket.offAny(handler);
//     };
//   }, []);

//   useEffect(() => {
//     const fetchUserData = async () => {
//       try {
//         const token = await AsyncStorage.getItem('authToken');
//         if (!token) return;
//         const backendUrl = getBackendUrl();
//         const response = await axios.get(`${backendUrl}/api/users/profile`, {
//           headers: { Authorization: `Bearer ${token}` }
//         });
      
//         const userProfile = response.data;
      
//         console.log('📋 User Profile:', userProfile);
      
//         const userMobile = userProfile.mobile ||
//                            userProfile.phone ||
//                            userProfile.phoneNumber ||
//                            userProfile.mobileNumber ||
//                            '';
//         await AsyncStorage.setItem('userId', userProfile._id);
//         await AsyncStorage.setItem('customerId', userProfile.customerId || userProfile._id);
//         await AsyncStorage.setItem('userName', userProfile.name || userProfile.username);
//         await AsyncStorage.setItem('userMobile', userProfile.phoneNumber);
//         await AsyncStorage.setItem('userAddress', userProfile.address || '');
      
//       } catch (error) {
//         console.error('Error fetching user data:', error);
//       }
//     };
//     fetchUserData();
//   }, []);

//   useEffect(() => {
//     const handleRideCreated = (data) => {
//       console.log('Ride created event received:', data);
//       if (data.success) {
//         if (data.rideId && !currentRideId) {
//           setCurrentRideId(data.rideId);
//         }
      
//         AsyncStorage.setItem('lastRideId', data.rideId || currentRideId || '');
      
//         setBookingOTP(data.otp);
//         setShowConfirmModal(true);
//         setRideStatus("searching");
//       } else if (data.message) {
//         Alert.alert("Booking Failed", data.message || "Failed to book ride");
//         setRideStatus("idle");
//         setCurrentRideId(null);
//       }
//     };
//     socket.on("rideCreated", handleRideCreated);
//     return () => {
//       socket.off("rideCreated", handleRideCreated);
//     };
//   }, [currentRideId]);

//   const handleConfirmBooking = async () => {
//     console.log('Confirming booking with OTP:', bookingOTP);
//     console.log('Current Ride ID:', currentRideId);
//     let rideIdToUse = currentRideId;
  
//     if (!rideIdToUse) {
//       rideIdToUse = await AsyncStorage.getItem('currentRideId');
//       console.log('🔄 Using rideId from storage:', rideIdToUse);
//     }
  
//     if (!rideIdToUse) {
//       Alert.alert("Error", "Invalid booking state. Please try booking again.");
//       setShowConfirmModal(false);
//       return;
//     }
  
//     setCurrentRideId(rideIdToUse);
//     setRideStatus("searching"); // Change to "searching" first
//     setShowConfirmModal(false);
  
//     console.log('🚀 Waiting for driver to accept ride:', rideIdToUse);
  
//     // Start polling for ride status updates
//     const statusPollInterval = setInterval(() => {
//       if (currentRideId) {
//         socket.emit('getRideStatus', { rideId: currentRideId });
//       }
//     }, 5000); // Poll every 5 seconds
  
//     AsyncStorage.setItem('statusPollInterval', statusPollInterval.toString());
//   };

//   const renderVehicleIcon = (type: 'bike' | 'taxi' | 'port', size: number = 24, color: string = '#000000') => {
//     try {
//       switch (type) {
//         case 'bike': return <BikeIcon width={size} height={size} fill={color} />;
//         case 'taxi': return <TaxiIcon width={size} height={size} fill={color} />;
//         case 'port': return <LorryIcon width={size} height={size} fill={color} />;
//         default: return <TaxiIcon width={size} height={size} fill={color} />;
//       }
//     } catch (error) {
//       return <TaxiIcon width={size} height={size} fill={color} />;
//     }
//   };

//   const renderSuggestionItem = (item: SuggestionType, onSelect: () => void, key: string) => {
//     let iconName = 'location-on';
//     let iconColor = '#A9A9A9';
//     if (item.type.includes('railway') || item.type.includes('station')) { iconName = 'train'; iconColor = '#3F51B5'; }
//     else if (item.type.includes('airport')) { iconName = 'flight'; iconColor = '#2196F3'; }
//     else if (item.type.includes('bus')) { iconName = 'directions-bus'; iconColor = '#FF9800'; }
//     else if (item.type.includes('hospital')) { iconName = 'local-hospital'; iconColor = '#F44336'; }
//     else if (item.type.includes('school') || item.type.includes('college')) { iconName = 'school'; iconColor = '#4CAF50'; }
//     else if (item.type.includes('place_of_worship')) { iconName = 'church'; iconColor = '#9C27B0'; }
//     else if (item.type.includes('shop') || item.type.includes('mall')) { iconName = 'shopping-mall'; iconColor = '#E91E63'; }
//     else if (item.type.includes('park')) { iconName = 'park'; iconColor = '#4CAF50'; }
  
//     return (
//       <TouchableOpacity key={key} style={styles.suggestionItem} onPress={onSelect}>
//         <MaterialIcons name={iconName as any} size={20} color={iconColor} style={styles.suggestionIcon} />
//         <View style={styles.suggestionTextContainer}>
//           <Text style={styles.suggestionMainText} numberOfLines={1}>{extractMainName(item.name)}</Text>
//           <Text style={styles.suggestionSubText} numberOfLines={1}>{item.address}</Text>
//         </View>
//       </TouchableOpacity>
//     );
//   };

//   const extractMainName = (fullName: string): string => {
//     const parts = fullName.split(',');
//     return parts[0].trim();
//   };

//   const isBookRideButtonEnabled = pickup && dropoff && selectedRideType && estimatedPrice !== null;

//   const reverseGeocode = async (lat: number, lon: number): Promise<string | null> => {
//     try {
//       const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1&countrycodes=IN`;
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       return data.display_name || null;
//     } catch (error) {
//       console.error('Reverse geocode error:', error);
//       return null;
//     }
//   };

//   const handleRegionChangeComplete = async (region: any, isPickup: boolean) => {
//     if (regionChangeTimer.current) {
//       clearTimeout(regionChangeTimer.current);
//     }
//     regionChangeTimer.current = setTimeout(async () => {
//       const addr = await reverseGeocode(region.latitude, region.longitude);
//       if (addr) {
//         if (isPickup) {
//           propHandlePickupChange(addr);
//           setPickupLocation({ latitude: region.latitude, longitude: region.longitude });
//           setIsPickupCurrent(false);
//           if (dropoffLocation) fetchRoute(dropoffLocation);
//           fetchNearbyDrivers(region.latitude, region.longitude);
//         } else {
//           propHandleDropoffChange(addr);
//           setDropoffLocation({ latitude: region.latitude, longitude: region.longitude });
//           if (pickupLocation) fetchRoute({ latitude: region.latitude, longitude: region.longitude });
//         }
//       }
//     }, 500);
//   };

//   return (
//     <View style={styles.container}>
//       {isLoadingLocation ? (
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#4CAF50" />
//           <Text style={styles.loadingText}>Fetching your location...</Text>
//         </View>
//       ) : (
//         <>
//           <View style={styles.mapContainer}>
//             {location && (
//               <MapView
//                 ref={mapRef}
//                 style={styles.map}
//                 initialRegion={{
//                   latitude: location.latitude,
//                   longitude: location.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 showsUserLocation
//               >
//                 {/* ✅ Pickup & Drop markers */}
//                 {pickupLocation && (
//                   <Marker
//                     coordinate={pickupLocation}
//                     title="Pickup"
//                     pinColor="blue"
//                   />
//                 )}
//                 {dropoffLocation && (
//                   <Marker
//                     coordinate={dropoffLocation}
//                     title="Dropoff"
//                     pinColor="red"
//                   />
//                 )}
//                 {/* ✅ Driver marker */}
//                 {driverLocation && (
//                   <Marker
//                     coordinate={driverLocation}
//                     title="Driver"
//                     key={`driver-${driverLocation.latitude}-${driverLocation.longitude}`}
//                   >
//                     <View style={styles.driverMarkerContainer}>
//                       <View
//                         style={[
//                           styles.vehicleIconContainer,
//                           {
//                             backgroundColor:
//                               rideStatus === "onTheWay" ||
//                               rideStatus === "arrived" ||
//                               rideStatus === "started"
//                                 ? "#FF6B00"
//                                 : "#4CAF50",
//                           },
//                         ]}
//                       >
//                         {renderVehicleIcon(selectedRideType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                       </View>
//                     </View>
//                   </Marker>
//                 )}
//                 {/* ✅ Nearby Drivers */}
//                 {(rideStatus === "idle" || rideStatus === "searching") &&
//                   nearbyDrivers &&
//                   nearbyDrivers.length > 0 &&
//                   nearbyDrivers.map((driver) => (
//                     <Marker
//                       key={`nearby-${driver.driverId}-${driver.location.coordinates[1]}-${driver.location.coordinates[0]}`}
//                       coordinate={{
//                         latitude: driver.location.coordinates[1],
//                         longitude: driver.location.coordinates[0],
//                       }}
//                       title={`${driver.name} (${driver.status || "Live"})`}
//                     >
//                       <View style={styles.driverMarkerContainer}>
//                         <View style={styles.vehicleIconContainer}>
//                           {renderVehicleIcon(driver.vehicleType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                         </View>
//                       </View>
//                     </Marker>
//                   ))}
//                 {/* ✅ Route polyline */}
//                 {routeCoords && routeCoords.length > 0 && (
//                   <Polyline
//                     coordinates={routeCoords}
//                     strokeWidth={5}
//                     strokeColor="#4CAF50"
//                   />
//                 )}
//               </MapView>
//             )}
          
//             {/* ✅ CORRECTED: Driver count display based on ride status */}
//             {(rideStatus === "idle" || rideStatus === "searching") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Available Drivers Nearby: {nearbyDriversCount}
//                 </Text>
//               </View>
//             )}
//             {/* ✅ ACTIVE RIDE: Show driver status */}
//             {(rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Your Driver is on the way
//                 </Text>
//               </View>
//             )}
//           </View>
//           {/* Driver Info Section */}
//           {acceptedDriver && (
//             <View style={styles.driverInfoContainer}>
//               <Text style={styles.driverInfoTitle}>Your Driver</Text>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="person" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.name}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="phone" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.driverMobile || 'N/A'}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="directions-car" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.vehicleType}</Text>
//               </View>
//             </View>
//           )}
//           {/* Status Indicator */}
//           {/* ✅ ACTIVE RIDE: Show driver status based on actual ride status */}
//           {rideStatus === "onTheWay" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Driver is on the way
//                 {driverLocation && pickupLocation && (
//                   <Text style={styles.distanceText}>
//                     {"\n"}Estimated arrival: {calculateDistance(
//                       pickupLocation.latitude,
//                       pickupLocation.longitude,
//                       driverLocation.latitude,
//                       driverLocation.longitude
//                     ).toFixed(1)} km away
//                   </Text>
//                 )}
//               </Text>
//             </View>
//           )}
//           {rideStatus === "arrived" && (
//             <View style={[styles.driversCountOverlay, { backgroundColor: '#4CAF50' }]}>
//               <Text style={[styles.driversCountText, { color: '#FFFFFF' }]}>
//                 🎉 Driver Has Arrived!
//               </Text>
//             </View>
//           )}
//           {rideStatus === "started" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Ride in Progress...
//               </Text>
//             </View>
//           )}
//           <View style={styles.inputContainer}>
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="my-location" size={20} color="#4CAF50" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter pickup location"
//                   value={pickup}
//                   onChangeText={handlePickupChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowPickupMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>Select on Map</Text>
//               </TouchableOpacity>
//             </View>
          
//             {showPickupSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {pickupLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : suggestionsError ? (
//                   <View style={styles.errorContainer}>
//                     <Text style={styles.errorText}>{suggestionsError}</Text>
//                   </View>
//                 ) : pickupSuggestions.length > 0 ? (
//                   pickupSuggestions.map((item) => (
//                     renderSuggestionItem(item, () => selectPickupSuggestion(item), item.id)
//                   ))
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}
          
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="place" size={20} color="#F44336" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter dropoff location"
//                   value={dropoff}
//                   onChangeText={handleDropoffChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowDropoffMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>Select on Map</Text>
//               </TouchableOpacity>
//             </View>
          
//             {showDropoffSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {dropoffLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : suggestionsError ? (
//                   <View style={styles.errorContainer}>
//                     <Text style={styles.errorText}>{suggestionsError}</Text>
//                   </View>
//                 ) : dropoffSuggestions.length > 0 ? (
//                   dropoffSuggestions.map((item) => (
//                     renderSuggestionItem(item, () => selectDropoffSuggestion(item), item.id)
//                   ))
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}
//           </View>
        
//           {(distance || travelTime) && (
//             <View style={styles.distanceTimeContainer}>
//               <View style={styles.distanceTimeItem}>
//                 <MaterialIcons name="route" size={18} color="#757575" />
//                 <Text style={styles.distanceTimeLabel}>DISTANCE:</Text>
//                 <Text style={styles.distanceTimeValue}>{distance || '---'}</Text>
//               </View>
//               <View style={styles.distanceTimeItem}>
//                 <MaterialIcons name="schedule" size={18} color="#757575" />
//                 <Text style={styles.distanceTimeLabel}>TRAVEL TIME:</Text>
//                 <Text style={styles.distanceTimeValue}>{travelTime || '---'}</Text>
//               </View>
//             </View>
//           )}
        
//           {apiError && (
//             <View style={styles.errorContainer}>
//               <Text style={styles.errorText}>{apiError}</Text>
//             </View>
//           )}
        
          
// <RideTypeSelector
//   selectedRideType={selectedRideType}
//   setSelectedRideType={handleRideTypeSelect}
//   estimatedPrice={estimatedPrice}
//   distance={distance}
//   dynamicPrices={dynamicPrices}
// />
        
//           <View style={styles.bookRideButtonContainer}>
//             <TouchableOpacity
//               style={[
//                 styles.bookRideButton,
//                 isBookRideButtonEnabled ? styles.enabledBookRideButton : styles.disabledBookRideButton,
//               ]}
//               onPress={handleBookRide}
//               disabled={!isBookRideButtonEnabled}
//             >
//               <Text style={styles.bookRideButtonText}>BOOK RIDE</Text>
//             </TouchableOpacity>
//           </View>
        
//           {showPricePanel && selectedRideType && (
//             <Animated.View
//               style={[
//                 styles.pricePanel,
//                 {
//                   transform: [{
//                     translateY: panelAnimation.interpolate({
//                       inputRange: [0, 1],
//                       outputRange: [300, 0],
//                     }),
//                   }],
//                 },
//               ]}
//             >
//               <View style={styles.panelHeader}>
//                 <Text style={styles.panelTitle}>Ride Details</Text>
//                 <TouchableOpacity onPress={() => setShowPricePanel(false)}>
//                   <MaterialIcons name="close" size={24} color="#666" />
//                 </TouchableOpacity>
//               </View>
//               <View style={styles.priceDetailsContainer}>
//                 <View style={styles.vehicleIconContainer}>
//                   {renderVehicleIcon(selectedRideType as 'bike' | 'taxi' | 'port', 40, '#000000')}
//                 </View>
//                 <View style={styles.priceInfoContainer}>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Pickup:</Text>
//                     <Text style={styles.priceValue} numberOfLines={1}>{pickup || 'Not selected'}</Text>
//                   </View>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Drop-off:</Text>
//                     <Text style={styles.priceValue} numberOfLines={1}>{dropoff || 'Not selected'}</Text>
//                   </View>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Distance:</Text>
//                     <Text style={styles.priceValue}>{distance || '---'}</Text>
//                   </View>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Price:</Text>
//                     <Text style={styles.priceValue}>₹{estimatedPrice || '---'}</Text>
//                   </View>
//                   <View style={styles.returnTripRow}>
//                     <Text style={styles.priceLabel}>Return trip:</Text>
//                     <Switch
//                       value={wantReturn}
//                       onValueChange={setWantReturn}
//                       trackColor={{ false: '#767577', true: '#4CAF50' }}
//                       thumbColor={wantReturn ? '#FFFFFF' : '#FFFFFF'}
//                     />
//                   </View>
//                 </View>
//               </View>
//               <View style={styles.bookButtonContainer}>
//                 <TouchableOpacity
//                   style={styles.bookMyRideButton}
//                   onPress={handleBookRide}
//                 >
//                   <Text style={styles.bookMyRideButtonText}>BOOK MY RIDE</Text>
//                 </TouchableOpacity>
//               </View>
//             </Animated.View>
//           )}
        
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showConfirmModal}
//             onRequestClose={() => setShowConfirmModal(false)}
//           >
//             <View style={styles.modalOverlay}>
//               <View style={styles.modalContainer}>
//                 <View style={styles.modalHeader}>
//                   <Text style={styles.modalTitle}>Confirm Booking</Text>
//                   <TouchableOpacity onPress={() => setShowConfirmModal(false)}>
//                     <MaterialIcons name="close" size={24} color="#666" />
//                   </TouchableOpacity>
//                 </View>
//                 <View style={styles.modalContent}>
//                   <View style={styles.modalIconContainer}>
//                     <Ionicons name="checkmark-circle" size={60} color="#4CAF50" />
//                   </View>
//                   <Text style={styles.modalMessage}>
//                     Thank you for choosing EAZY GO!
//                   </Text>
//                   <Text style={styles.modalSubMessage}>
//                     Your ride has been successfully booked.
//                   </Text>
//                   <View style={styles.otpContainer}>
//                     <Text style={styles.otpLabel}>Your pickup OTP is:</Text>
//                     <Text style={styles.otpValue}>{bookingOTP}</Text>
//                   </View>
//                   <Text style={styles.otpWarning}>
//                     Please don't share it with anyone. Only share with our driver.
//                   </Text>
//                 </View>
//                 <View style={styles.modalButtons}>
//                   <TouchableOpacity
//                     style={styles.modalCancelButton}
//                     onPress={() => setShowConfirmModal(false)}
//                   >
//                     <Text style={styles.modalCancelButtonText}>Cancel</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={styles.modalConfirmButton}
//                     onPress={handleConfirmBooking}
//                   >
//                     <Text style={styles.modalConfirmButtonText}>Confirm</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
//           {/* Pickup Map Modal */}
//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showPickupMapModal}
//             onRequestClose={() => setShowPickupMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: pickupLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: pickupLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, true)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#4CAF50" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowPickupMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>
//           {/* Dropoff Map Modal */}
//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showDropoffMapModal}
//             onRequestClose={() => setShowDropoffMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: dropoffLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: dropoffLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, false)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#F44336" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowDropoffMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>
//         </>
//       )}
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: { flex: 1, backgroundColor: '#F5F5F5' },
//   loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
//   loadingText: { color: '#757575', fontSize: 16, marginTop: 10 },
//   mapContainer: {
//     height: Dimensions.get('window').height * 0.4,
//     width: '100%',
//     borderRadius: 15,
//     overflow: 'hidden',
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   map: { ...StyleSheet.absoluteFillObject },
//   driversCountOverlay: {
//     position: 'absolute',
//     top: 289,
//     left: 3,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     paddingHorizontal: 12,
//     paddingVertical: 8,
//     borderRadius: 20,
//     elevation: 2,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.2,
//     shadowRadius: 2
//   },
//   driversCountText: { fontSize: 14, fontWeight: '600', color: '#333333' },
//   driverInfoContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   driverInfoTitle: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#333333',
//     marginBottom: 10
//   },
//   driverDetailsRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   driverDetailText: {
//     fontSize: 14,
//     color: '#555555',
//     marginLeft: 10
//   },
//   statusContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   statusIndicator: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   statusText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#4CAF50',
//     marginLeft: 10
//   },
//   statusSubText: {
//     fontSize: 14,
//     color: '#757575',
//     textAlign: 'center'
//   },
//   inputContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   inputRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   inputWrapper: {
//     flex: 1,
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingHorizontal: 15,
//     paddingVertical: 5,
//   },
//   inputIconContainer: {
//     marginRight: 10,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   distanceText: {
//     fontSize: 12,
//     fontWeight: 'normal',
//     color: '#666666',
//   },
//   input: { flex: 1, fontSize: 16, paddingVertical: 12, color: '#333' },
//   selectMapButton: {
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     backgroundColor: '#4CAF50',
//     borderRadius: 5,
//     marginRight: 10,
//   },
//   selectMapButtonText: {
//     color: '#FFFFFF',
//     fontSize: 12,
//   },
//   suggestionsContainer: {
//     marginTop: 5,
//     marginHorizontal: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 8,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     maxHeight: 200
//   },
//   suggestionItem: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingVertical: 12,
//     paddingHorizontal: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   suggestionIcon: { marginRight: 12 },
//   suggestionTextContainer: { flex: 1 },
//   suggestionMainText: { fontSize: 16, fontWeight: '500', color: '#333333' },
//   suggestionSubText: { fontSize: 12, color: '#757575', marginTop: 2 },
//   noSuggestionsContainer: { paddingVertical: 12, alignItems: 'center' },
//   noSuggestionsText: { fontSize: 14, color: '#666666' },
//   distanceTimeContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   distanceTimeItem: { flexDirection: 'row', alignItems: 'center' },
//   distanceTimeLabel: { fontSize: 14, fontWeight: '600', color: '#757575', marginLeft: 8 },
//   distanceTimeValue: { fontSize: 14, fontWeight: 'bold', color: '#333333', marginLeft: 5 },
//   rideTypeContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//   },
//   rideTypeButton: {
//     width: '100%',
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 5,
//     marginBottom: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   selectedRideTypeButton: {
//     backgroundColor: '#4caf50',
//     borderWidth: 2,
//     borderColor: '#4caf50'
//   },
//   rideIconContainer: {
//     marginRight: 15,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideInfoContainer: {
//     flex: 1,
//   },
//   rideTypeText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 4,
//   },
//   selectedRideTypeText: {
//     color: '#FFFFFF'
//   },
//   rideDetailsText: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 6,
//   },
//   selectedRideDetailsText: {
//     color: '#FFFFFF'
//   },
//   ridePriceText: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   bookRideButtonContainer: {
//     marginHorizontal: 20,
//     marginBottom: 20
//   },
//   bookRideButton: {
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   enabledBookRideButton: { backgroundColor: '#4caf50' },
//   disabledBookRideButton: { backgroundColor: '#BDBDBD' },
//   bookRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   errorContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFEBEE',
//     borderRadius: 12,
//     padding: 15,
//     borderLeftWidth: 4,
//     borderLeftColor: '#F44336'
//   },
//   errorText: {
//     color: '#D32F2F',
//     fontSize: 14,
//     textAlign: 'center'
//   },
//   pricePanel: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     padding: 20,
//     maxHeight: Dimensions.get('window').height * 0.5,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   panelHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//     paddingBottom: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   panelTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   priceDetailsContainer: {
//     flexDirection: 'row',
//     marginBottom: 8
//   },
//   driverMarkerContainer: {
//     alignItems: 'center',
//     justifyContent: 'center',
//     width: 50,
//     height: 50,
//   },
//   vehicleIconContainer: {
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     backgroundColor: '#4CAF50',
//     alignItems: 'center',
//     justifyContent: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   priceInfoContainer: {
//     flex: 1
//   },
//   priceRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 10
//   },
//   priceLabel: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     flex: 1
//   },
//   priceValue: {
//     fontSize: 13,
//     fontWeight: 'bold',
//     color: '#333333',
//     flex: 2,
//     textAlign: 'right'
//   },
//   returnTripRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginTop: 5
//   },
//   bookButtonContainer: {
//     marginTop: 10
//   },
//   bookMyRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   bookMyRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   modalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   modalContainer: {
//     width: '85%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   modalHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   modalContent: {
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalIconContainer: {
//     marginBottom: 15
//   },
//   modalMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 5
//   },
//   modalSubMessage: {
//     fontSize: 16,
//     color: '#666666',
//     textAlign: 'center',
//     marginBottom: 20
//   },
//   otpContainer: {
//     backgroundColor: '#F5F5F5',
//     borderRadius: 10,
//     padding: 15,
//     alignItems: 'center',
//     marginBottom: 15,
//     width: '100%'
//   },
//   otpLabel: {
//     fontSize: 14,
//     color: '#666666',
//     marginBottom: 5
//   },
//   otpValue: {
//     fontSize: 24,
//     fontWeight: 'bold',
//     color: '#4caf50'
//   },
//   otpWarning: {
//     fontSize: 12,
//     color: '#F44336',
//     textAlign: 'center',
//     fontStyle: 'italic'
//   },
//   modalButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between'
//   },
//   modalCancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginRight: 10,
//     alignItems: 'center'
//   },
//   modalCancelButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#666666'
//   },
//   modalConfirmButton: {
//     flex: 1,
//     backgroundColor: '#4CAF50',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginLeft: 10,
//     alignItems: 'center'
//   },
//   modalConfirmButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#FFFFFF'
//   },
//   vehicleMarkerContainer: {
//     borderRadius: 20,
//     padding: 5,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   modalMapContainer: {
//     flex: 1,
//     position: 'relative',
//   },
//   modalMap: {
//     flex: 1,
//   },
//   centerMarker: {
//     position: 'absolute',
//     top: '50%',
//     left: '50%',
//     transform: [{ translateX: -24 }, { translateY: -48 }],
//   },
//   modalCloseButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 8,
//     elevation: 3,
//   },
// });

// export default TaxiContent;






































































































































































































































































































































































































































































































































































































































































































































// import React, { useState, useEffect, useRef, useCallback } from 'react';
// import {
//   View,
//   StyleSheet,
//   Text,
//   TouchableOpacity,
//   Dimensions,
//   Alert,
//   ActivityIndicator,
//   Animated,
//   Switch,
//   Modal,
//   TextInput,
//   PermissionsAndroid,
//   Platform,
//   Image
// } from 'react-native';
// import MapView, { Marker, Polyline } from 'react-native-maps';
// import Geolocation from '@react-native-community/geolocation';
// import socket from '../../socket';
// import haversine from 'haversine-distance';
// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
// import Ionicons from 'react-native-vector-icons/Ionicons';
// import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
// import FontAwesome from 'react-native-vector-icons/FontAwesome';
// import axios from 'axios';
// import Svg, { Path, Circle, Rect } from 'react-native-svg';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getBackendUrl } from '../../util/backendConfig';
// import BikeIcon from '../../../assets001/bike.svg';
// import LorryIcon from '../../../assets001/lorry.svg';
// import TaxiIcon from '../../../assets001/taxi.svg';



// const RideTypeSelector = ({ selectedRideType, setSelectedRideType, estimatedPrice, distance, dynamicPrices }) => {
//   return (
//     <View style={styles.rideTypeContainer}>
//       {/* Porter Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'port' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('port')}
//       >
//         <View style={styles.rideIconContainer}>
//           <LorryIcon width={24} height={24} fill={selectedRideType === 'port' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'port' && styles.selectedRideTypeText,
//           ]}>CarGo Porter</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'port' && styles.selectedRideDetailsText,
//           ]}>Max 5 ton</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.port > 0 ? `₹${dynamicPrices.port}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
    
//       {/* Taxi Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'taxi' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('taxi')}
//       >
//         <View style={styles.rideIconContainer}>
//           <TaxiIcon width={24} height={24} fill={selectedRideType === 'taxi' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'taxi' && styles.selectedRideTypeText,
//           ]}>Taxi</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'taxi' && styles.selectedRideDetailsText,
//           ]}>4 seats</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.taxi > 0 ? `₹${dynamicPrices.taxi}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
    
//       {/* Bike Button */}
//       <TouchableOpacity
//         style={[
//           styles.rideTypeButton,
//           selectedRideType === 'bike' && styles.selectedRideTypeButton,
//         ]}
//         onPress={() => setSelectedRideType('bike')}
//       >
//         <View style={styles.rideIconContainer}>
//           <BikeIcon width={24} height={24} fill={selectedRideType === 'bike' ? '#FFFFFF' : '#333333'} />
//         </View>
//         <View style={styles.rideInfoContainer}>
//           <Text style={[
//             styles.rideTypeText,
//             selectedRideType === 'bike' && styles.selectedRideTypeText,
//           ]}>Motorcycle</Text>
//           <Text style={[
//             styles.rideDetailsText,
//             selectedRideType === 'bike' && styles.selectedRideDetailsText,
//           ]}>1 person</Text>
//           <Text style={styles.ridePriceText}>
//             {dynamicPrices.bike > 0 ? `₹${dynamicPrices.bike}/km` : 'Loading...'}
//           </Text>
//         </View>
//       </TouchableOpacity>
//     </View>
//   );
// };



// interface LocationType {
//   latitude: number;
//   longitude: number;
// }

// interface SuggestionType {
//   id: string;
//   name: string;
//   address: string;
//   lat: string;
//   lon: string;
//   type: string;
//   importance: number;
// }

// interface DriverType {
//   driverId: string;
//   name: string;
//   location: {
//     coordinates: [number, number]; // [longitude, latitude]
//   };
//   vehicleType: string;
//   status?: string;
//   driverMobile?: string;
// }

// interface TaxiContentProps {
//   loadingLocation?: boolean;
//   currentLocation: LocationType | null;
//   lastSavedLocation: LocationType | null;
//   pickup: string;
//   dropoff: string;
//   handlePickupChange: (text: string) => void;
//   handleDropoffChange: (text: string) => void;
// }

// const TaxiContent: React.FC<TaxiContentProps> = ({
//   loadingLocation: propLoadingLocation,
//   currentLocation: propCurrentLocation,
//   lastSavedLocation: propLastSavedLocation,
//   pickup,
//   dropoff,
//   handlePickupChange: propHandlePickupChange,
//   handleDropoffChange: propHandleDropoffChange,
// }) => {
//   const [isLoadingLocation, setIsLoadingLocation] = useState(true);
//   const [selectedRideType, setSelectedRideType] = useState<string>('taxi');
//   const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);
//   const [showPricePanel, setShowPricePanel] = useState(false);
//   const [wantReturn, setWantReturn] = useState(false);
//   const [distance, setDistance] = useState<string>('');
//   const [travelTime, setTravelTime] = useState<string>('');
//   const [showConfirmModal, setShowConfirmModal] = useState(false);
//   const [bookingOTP, setBookingOTP] = useState<string>('');
//   const [apiError, setApiError] = useState<string | null>(null);
//   const [location, setLocation] = useState<LocationType | null>(null);
//   const [pickupLocation, setPickupLocation] = useState<LocationType | null>(null);
//   const [dropoffLocation, setDropoffLocation] = useState<LocationType | null>(null);
//   const [routeCoords, setRouteCoords] = useState<LocationType[]>([]);
//   const [currentRideId, setCurrentRideId] = useState<string | null>(null);
//   const [rideStatus, setRideStatus] = useState<"idle" | "searching" | "onTheWay" | "arrived" | "started" | "completed">("idle");
//   const [driverId, setDriverId] = useState<string | null>(null);
//   const [driverLocation, setDriverLocation] = useState<LocationType | null>(null);
//   const [travelledKm, setTravelledKm] = useState(0);
//   const [lastCoord, setLastCoord] = useState<LocationType | null>(null);
//   const [nearbyDrivers, setNearbyDrivers] = useState<DriverType[]>([]);
//   const [nearbyDriversCount, setNearbyDriversCount] = useState<number>(0);
//   const [pickupSuggestions, setPickupSuggestions] = useState<SuggestionType[]>([]);
//   const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);
//   const [dropoffSuggestions, setDropoffSuggestions] = useState<SuggestionType[]>([]);
//   const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);
//   const [pickupLoading, setPickupLoading] = useState(false);
//   const [dropoffLoading, setDropoffLoading] = useState(false);
//   const [suggestionsError, setSuggestionsError] = useState<string | null>(null);
//   const [pickupCache, setPickupCache] = useState<Record<string, SuggestionType[]>>({});
//   const [dropoffCache, setDropoffCache] = useState<Record<string, SuggestionType[]>>({});
//   const [isPickupCurrent, setIsPickupCurrent] = useState(false); // ✅ FIXED: Changed default to false
//   const [socketConnected, setSocketConnected] = useState(false);
//   const [driverArrivedAlertShown, setDriverArrivedAlertShown] = useState(false);
//   const [rideCompletedAlertShown, setRideCompletedAlertShown] = useState(false);
//   const [acceptedDriver, setAcceptedDriver] = useState<DriverType | null>(null);
//   const [isBooking, setIsBooking] = useState(false);
//   const [driverName, setDriverName] = useState<string | null>(null);
//   const [driverMobile, setDriverMobile] = useState<string | null>(null);
//   const [bookedAt, setBookedAt] = useState<Date | null>(null);
//   const [showPickupMapModal, setShowPickupMapModal] = useState(false);
//   const [showDropoffMapModal, setShowDropoffMapModal] = useState(false);

//   const pickupDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const dropoffDebounceTimer = useRef<NodeJS.Timeout | null>(null);
//   const regionChangeTimer = useRef<NodeJS.Timeout | null>(null);
//   const [priceLoading, setPriceLoading] = useState(false);
//   const panelAnimation = useRef(new Animated.Value(0)).current;
//   const mapRef = useRef<MapView | null>(null);
//   const fallbackLocation: LocationType = {
//     latitude: 11.3312971,
//     longitude: 77.7167303,
//   };

//   // ✅ IMPROVED: Accurate distance calculation
//   const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371; // Earth's radius in kilometers
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
//               Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//               Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distance = R * c;
//     console.log(`📍 Distance calculation: (${lat1},${lon1}) to (${lat2},${lon2}) = ${distance.toFixed(4)} km`);
//     return distance;
//   };

//   const calculateDistanceInMeters = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
//     const R = 6371;
//     const dLat = (lat2 - lat1) * Math.PI / 180;
//     const dLon = (lon2 - lon1) * Math.PI / 180;
//     const a =
//       Math.sin(dLat/2) * Math.sin(dLat/2) +
//       Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
//       Math.sin(dLon/2) * Math.sin(dLon/2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//     const distanceKm = R * c;
//     return distanceKm * 1000;
//   };

//   // ✅ CORRECTED: Nearby drivers filtering logic
//   const fetchNearbyDrivers = (latitude: number, longitude: number) => {
//     console.log(`Fetching nearby drivers for lat: ${latitude}, lng: ${longitude}`);
//     if (socket && socketConnected) {
//       socket.emit("requestNearbyDrivers", {
//         latitude,
//         longitude,
//         radius: 10000,
//         vehicleType: selectedRideType
//       });
//       console.log("Emitted requestNearbyDrivers event");
//     } else {
//       console.log("Socket not connected, attempting to reconnect...");
//       socket.connect();
//       socket.once("connect", () => {
//         console.log("Socket reconnected, emitting requestNearbyDrivers");
//         socket.emit("requestNearbyDrivers", {
//           latitude,
//           longitude,
//           radius: 10000,
//           vehicleType: selectedRideType
//         });
//       });
//     }
//   };

//   // ✅ CORRECTED: Nearby drivers response handler with DEBUG
//   useEffect(() => {
//     const handleNearbyDriversResponse = (data: { drivers: DriverType[] }) => {
//       console.log('📍 Received nearby drivers response:', JSON.stringify(data, null, 2));
//       if (!location) {
//         console.log("❌ No location available, can't process drivers");
//         return;
//       }
    
//       console.log('📍 User current location:', location);
//       console.log('📍 Number of drivers received:', data.drivers.length);
    
//       // ✅ ACTIVE RIDE: Show only accepted driver
//       if (currentRideId && acceptedDriver) {
//         console.log('🚗 Active ride - Showing only accepted driver');
//         const acceptedDriverData = data.drivers.find(d => d.driverId === acceptedDriver.driverId);
//         if (acceptedDriverData) {
//           setNearbyDrivers([acceptedDriverData]);
//           setNearbyDriversCount(1);
//           console.log('✅ Accepted driver found and displayed');
//         } else {
//           setNearbyDrivers([]);
//           setNearbyDriversCount(0);
//           console.log('❌ Accepted driver not found in response');
//         }
//         return;
//       }
    
//       // ✅ NO ACTIVE RIDE: Show all online drivers with DEBUG
//       const filteredDrivers = data.drivers
//         .filter(driver => {
//           console.log(`🔍 Processing driver: ${driver.driverId} (${driver.name})`);
//           console.log(`📍 Driver location: ${driver.location.coordinates[1]}, ${driver.location.coordinates[0]}`);
        
//           // Check driver status
//           if (driver.status && !["Live", "online", "onRide", "available"].includes(driver.status)) {
//             console.log(`❌ Driver ${driver.driverId} filtered out by status: ${driver.status}`);
//             return false;
//           }
        
//           // Calculate distance
//           const distance = calculateDistance(
//             location.latitude,
//             location.longitude,
//             driver.location.coordinates[1],
//             driver.location.coordinates[0]
//           );
//           console.log(`📏 Driver ${driver.driverId} distance: ${distance.toFixed(2)} km`);
        
//           const isWithinRange = distance <= 10;
//           console.log(`✅ Driver ${driver.driverId} within 10km: ${isWithinRange}`);
        
//           return isWithinRange;
//         })
//         .sort((a, b) => {
//           const distA = calculateDistance(location.latitude, location.longitude, a.location.coordinates[1], a.location.coordinates[0]);
//           const distB = calculateDistance(location.latitude, location.longitude, b.location.coordinates[1], b.location.coordinates[0]);
//           return distA - distB;
//         })
//         .slice(0, 10);
    
//       console.log('✅ Filtered drivers count:', filteredDrivers.length);
//       console.log('📍 Final drivers to display:', filteredDrivers);
    
//       setNearbyDrivers(filteredDrivers);
//       setNearbyDriversCount(filteredDrivers.length);
//     };
//     socket.on("nearbyDriversResponse", handleNearbyDriversResponse);
//     return () => socket.off("nearbyDriversResponse", handleNearbyDriversResponse);
//   }, [location, socketConnected, currentRideId, acceptedDriver]);

//   useEffect(() => {
//     const requestLocation = async () => {
//       setIsLoadingLocation(true);
//       if (propCurrentLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using current location from props:`, propCurrentLocation);
//         setLocation(propCurrentLocation);
//         global.currentLocation = propCurrentLocation;
//         fetchNearbyDrivers(propCurrentLocation.latitude, propCurrentLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       if (propLastSavedLocation) {
//         console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using last saved location from props:`, propLastSavedLocation);
//         setLocation(propLastSavedLocation);
//         global.currentLocation = propLastSavedLocation;
//         fetchNearbyDrivers(propLastSavedLocation.latitude, propLastSavedLocation.longitude);
//         setIsLoadingLocation(false);
//         return;
//       }
//       console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Using fallback location:`, fallbackLocation);
//       setLocation(fallbackLocation);
//       global.currentLocation = fallbackLocation;
//       fetchNearbyDrivers(fallbackLocation.latitude, fallbackLocation.longitude);
//       setIsLoadingLocation(false);
//       if (Platform.OS === "android") {
//         const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
//         if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location permission denied`);
//           Alert.alert("Permission Denied", "Location permission is required to proceed.");
//           return;
//         }
//       }
//       Geolocation.getCurrentPosition(
//         (pos) => {
//           const loc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Live location fetched successfully:`, loc);
//           setLocation(loc);
//           global.currentLocation = loc;
//           fetchNearbyDrivers(loc.latitude, loc.longitude);
//         },
//         (err) => {
//           console.log(`[${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}] Location error:`, err.code, err.message);
//           Alert.alert("Location Error", "Could not fetch location. Please try again or check your GPS settings.");
//         },
//         { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000, distanceFilter: 10 }
//       );
//     };
//     requestLocation();
//   }, [propCurrentLocation, propLastSavedLocation]);

//   // Driver-side code (e.g., in a DriverDashboard component)
//   const handleCompleteRide = () => {
//     const rideId = currentRideId; // Assume this is stored in driver state
//     const driverId = currentDriverId; // Assume this is the logged-in driver ID
//     const finalDistance = calculateFinalDistance(); // Logic to compute distance
//     const finalTime = calculateFinalTime(); // Logic to compute travel time
//     const finalCharge = calculateFinalCharge(finalDistance, finalTime); // Pricing logic
//     socket.emit('rideCompleted', {
//       rideId,
//       driverId,
//       distance: finalDistance,
//       travelTime: finalTime,
//       charge: finalCharge
//     });
//     socket.emit('rideStatusUpdate', {
//       rideId,
//       status: 'completed',
//       distance: finalDistance,
//       travelTime: finalTime,
//       charge: finalCharge
//     });
//   };

//   useEffect(() => {
//     const handleConnect = async () => {
//       console.log("Socket connected");
//       setSocketConnected(true);
//       if (location) fetchNearbyDrivers(location.latitude, location.longitude);
    
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User registered with socket:', userId);
//         }
//       } catch (error) {
//         console.error('Error registering user with socket:', error);
//       }
//     };
  
//     const handleDisconnect = () => { console.log("Socket disconnected"); setSocketConnected(false); };
//     const handleConnectError = (error: Error) => { console.error("Socket connection error:", error); setSocketConnected(false); };
  
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     socket.on("connect_error", handleConnectError);
//     setSocketConnected(socket.connected);
  
//     return () => {
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//       socket.off("connect_error", handleConnectError);
//     };
//   }, [location]);

//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected]);

//   // ✅ CRITICAL FIX: Driver live location updates with proper state management
//   useEffect(() => {
//     const handleDriverLiveLocationUpdate = (data: { driverId: string; lat: number; lng: number; status?: string }) => {
//       console.log('📍 Received driver location update:', data);
    
//       // If we have an active ride and this is the accepted driver
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('📍 Updating accepted driver location during active ride');
      
//         // CRITICAL: Update driver location state
//         const driverCoords = { latitude: data.lat, longitude: data.lng };
//         setDriverLocation(driverCoords);
      
//         // Update the driver in nearbyDrivers
//         setNearbyDrivers(prev => {
//           if (prev.length > 0 && prev[0].driverId === data.driverId) {
//             return [{
//               ...prev[0],
//               location: { coordinates: [data.lng, data.lat] },
//               status: data.status || "onTheWay"
//             }];
//           }
//           return prev;
//         });
      
//         // Calculate distance if needed
//         if (lastCoord) {
//           const dist = haversine(lastCoord, driverCoords);
//           setTravelledKm(prev => prev + dist / 1000);
//         }
//         setLastCoord(driverCoords);
      
//         // Check if driver is near pickup location
//         // ✅ IMPROVED: Check if driver is near pickup location
//         if (pickupLocation && rideStatus === "onTheWay") {
//           const distanceToPickup = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             pickupLocation.latitude,
//             pickupLocation.longitude
//           );
//           console.log(`📍 Driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//           if (distanceToPickup <= 50 && !driverArrivedAlertShown) {
//             console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED');
//             setRideStatus("arrived");
//             setDriverArrivedAlertShown(true);
          
//             // ✅ Immediately update UI state
//             setNearbyDrivers(prev => {
//               if (prev.length > 0 && prev[0].driverId === data.driverId) {
//                 return [{
//                   ...prev[0],
//                   status: "arrived"
//                 }];
//               }
//               return prev;
//             });
          
//             // Get customer ID for OTP
//             AsyncStorage.getItem('customerId').then(customerId => {
//               const otp = customerId ? customerId.slice(-4) : '1234';
//               Alert.alert(
//                 "🎉 Driver Arrived!",
//                 `Our driver (${acceptedDriver.name}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//                 [{ text: "OK", onPress: () => {
//                   console.log('✅ User acknowledged driver arrival');
//                 }}]
//               );
//             });
//           }
//         }
        
//         // Check if driver is near dropoff location
//         if (dropoffLocation && rideStatus === "started") {
//           const distanceToDropoff = calculateDistanceInMeters(
//             driverCoords.latitude,
//             driverCoords.longitude,
//             dropoffLocation.latitude,
//             dropoffLocation.longitude
//           );
        
//           if (distanceToDropoff <= 50 && !rideCompletedAlertShown) {
//             // Instead of immediately completing the ride, just notify the backend
//             // The backend will handle the actual ride completion
//             socket.emit('driverReachedDestination', {
//               rideId: currentRideId,
//               driverId: data.driverId,
//               distance: travelledKm.toFixed(2)
//             });
          
//             // Set a flag to prevent multiple notifications
//             setRideCompletedAlertShown(true);
//           }
//         }
//         return; // Ignore other drivers during active ride
//       }
    
    
//       // If no active ride, update all drivers
//       setNearbyDrivers((prev) => {
//         const existingIndex = prev.findIndex(d => d.driverId === data.driverId);
//         if (existingIndex >= 0) {
//           const updated = [...prev];
//           updated[existingIndex] = {
//             ...updated[existingIndex],
//             location: { coordinates: [data.lng, data.lat] },
//             status: data.status || "Live"
//           };
//           return updated;
//         } else {
//           if (data.status && !["Live", "online", "onRide", "available"].includes(data.status)) return prev;
//           return [
//             ...prev,
//             {
//               driverId: data.driverId,
//               name: `Driver ${data.driverId}`,
//               location: { coordinates: [data.lng, data.lat] },
//               vehicleType: "taxi",
//               status: data.status || "Live"
//             }
//           ];
//         }
//       });
//     };
//     socket.on("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//     return () => socket.off("driverLiveLocationUpdate", handleDriverLiveLocationUpdate);
//   }, [location, currentRideId, acceptedDriver, lastCoord, pickupLocation, dropoffLocation, rideStatus, driverArrivedAlertShown, rideCompletedAlertShown]);

//   // ✅ NEW: Polling for driver arrival to ensure reliability
//   useEffect(() => {
//     let intervalId;
//     if (rideStatus === "onTheWay" && pickupLocation && driverLocation && !driverArrivedAlertShown) {
//       intervalId = setInterval(() => {
//         const distanceToPickup = calculateDistanceInMeters(
//           driverLocation.latitude,
//           driverLocation.longitude,
//           pickupLocation.latitude,
//           pickupLocation.longitude
//         );
//         console.log(`📍 Polling driver distance to pickup: ${distanceToPickup.toFixed(1)} meters`);
//         if (distanceToPickup <= 50) {
//           console.log('🚨 DRIVER ARRIVED ALERT TRIGGERED FROM POLLING');
//           setRideStatus("arrived");
//           setDriverArrivedAlertShown(true);
//           AsyncStorage.getItem('customerId').then(customerId => {
//             const otp = customerId ? customerId.slice(-4) : '1234';
//             Alert.alert(
//               "🎉 Driver Arrived!",
//               `Our driver (${acceptedDriver?.name || 'Driver'}) has reached your pickup location.\n\nPlease share your OTP: ${otp}`,
//               [{ text: "OK", onPress: () => {
//                 console.log('✅ User acknowledged driver arrival');
//               }}]
//             );
//           });
//           clearInterval(intervalId);
//         }
//       }, 2000); // Poll every 2 seconds
//     }
//     return () => {
//       if (intervalId) clearInterval(intervalId);
//     };
//   }, [rideStatus, pickupLocation, driverLocation, driverArrivedAlertShown, acceptedDriver]);

//   // ✅ NEW: Ride completion event handler
//   useEffect(() => {
//     const handleRideCompleted = (data: any) => {
//       console.log('🎉 Ride completed event received:', data);
    
//       // Update ride status to completed
//       setRideStatus("completed");
    
//       // Calculate final distance and time if not provided
//       const finalDistance = data.distance || travelledKm.toFixed(2);
//       const finalTime = data.travelTime || travelTime;
//       const finalCharge = data.charge || estimatedPrice;
    
//       // Show completion alert
//       Alert.alert(
//         "Ride Completed",
//         `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//         [
//           {
//             text: "OK",
//             onPress: () => {
//               // Reset ride state after completion
//               setTimeout(() => {
//                 setCurrentRideId(null);
//                 setDriverId(null);
//                 setDriverLocation(null);
//                 setAcceptedDriver(null);
//                 setRouteCoords([]);
//                 setPickupLocation(null);
//                 setDropoffLocation(null);
//                 propHandlePickupChange("");
//                 propHandleDropoffChange("");
//                 setRideStatus("idle");
//                 setDriverArrivedAlertShown(false);
//                 setRideCompletedAlertShown(false);
              
//                 // Fetch all drivers again after ride completion
//                 if (location) {
//                   fetchNearbyDrivers(location.latitude, location.longitude);
//                 }
//               }, 2000);
//             }
//           }
//         ]
//       );
    
//       // Clear ride data from storage
//       AsyncStorage.removeItem('currentRideId');
//       AsyncStorage.removeItem('acceptedDriver');
//       AsyncStorage.removeItem('bookedAt');
//       setBookedAt(null);
//     };
  
//     socket.on("rideCompleted", handleRideCompleted);
  
//     return () => {
//       socket.off("rideCompleted", handleRideCompleted);
//     };
//   }, [travelledKm, travelTime, estimatedPrice, location]);

//   // ✅ NEW: Ride status update handler
//   useEffect(() => {
//     const handleRideStatusUpdate = (data: any) => {
//       console.log('📋 Ride status update received:', data);
    
//       if (data.rideId === currentRideId) {
//         if (data.status === 'completed') {
//           // Handle ride completion
//           setRideStatus("completed");
        
//           // Calculate final distance and time if not provided
//           const finalDistance = data.distance || travelledKm.toFixed(2);
//           const finalTime = data.travelTime || travelTime;
//           const finalCharge = data.charge || estimatedPrice;
        
//           // Show completion alert
//           Alert.alert(
//             "Ride Completed",
//             `Thank you for choosing EAZYGO!\n\nDistance: ${finalDistance} km\nTravel Time: ${finalTime}\nCharge: ₹${finalCharge}`,
//             [
//               {
//                 text: "OK",
//                 onPress: () => {
//                   // Reset ride state after completion
//                   setTimeout(() => {
//                     setCurrentRideId(null);
//                     setDriverId(null);
//                     setDriverLocation(null);
//                     setAcceptedDriver(null);
//                     setRouteCoords([]);
//                     setPickupLocation(null);
//                     setDropoffLocation(null);
//                     propHandlePickupChange("");
//                     propHandleDropoffChange("");
//                     setRideStatus("idle");
//                     setDriverArrivedAlertShown(false);
//                     setRideCompletedAlertShown(false);
                  
//                     // Fetch all drivers again after ride completion
//                     if (location) {
//                       fetchNearbyDrivers(location.latitude, location.longitude);
//                     }
//                   }, 2000);
//                 }
//               }
//             ]
//           );
        
//           // Clear ride data from storage
//           AsyncStorage.removeItem('currentRideId');
//           AsyncStorage.removeItem('acceptedDriver');
//           AsyncStorage.removeItem('bookedAt');
//           setBookedAt(null);
//         }
//       }
//     };
  
//     socket.on("rideStatusUpdate", handleRideStatusUpdate);
  
//     return () => {
//       socket.off("rideStatusUpdate", handleRideStatusUpdate);
//     };
//   }, [currentRideId, travelledKm, travelTime, estimatedPrice, location]);

//   useEffect(() => {
//     const handleDriverOffline = (data: { driverId: string }) => {
//       console.log(`Driver ${data.driverId} went offline`);
    
//       // ✅ Don't remove accepted driver during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('⚠️ Accepted driver went offline during active ride');
//         return;
//       }
    
//       setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//       setNearbyDriversCount(prev => Math.max(0, prev - 1));
//     };
  
//     socket.on("driverOffline", handleDriverOffline);
//     return () => socket.off("driverOffline", handleDriverOffline);
//   }, [currentRideId, acceptedDriver]);

//   useEffect(() => {
//     const handleDriverStatusUpdate = (data: { driverId: string; status: string }) => {
//       console.log(`Driver ${data.driverId} status updated to: ${data.status}`);
    
//       // ✅ Don't update accepted driver status during active ride
//       if (currentRideId && acceptedDriver && data.driverId === acceptedDriver.driverId) {
//         console.log('Keeping accepted driver status as onTheWay');
//         return;
//       }
    
//       if (data.status === "offline") {
//         setNearbyDrivers(prev => prev.filter(driver => driver.driverId !== data.driverId));
//         setNearbyDriversCount(prev => Math.max(0, prev - 1));
//         return;
//       }
//       setNearbyDrivers(prev => prev.map(driver =>
//         driver.driverId === data.driverId ? { ...driver, status: data.status } : driver
//       ));
//     };
  
//     socket.on("driverStatusUpdate", handleDriverStatusUpdate);
//     return () => socket.off("driverStatusUpdate", handleDriverStatusUpdate);
//   }, [currentRideId, acceptedDriver]);

//   // ✅ BACKUP: Recover ride acceptance data on component mount
//   useEffect(() => {
//     const recoverRideData = async () => {
//       try {
//         const savedRideId = await AsyncStorage.getItem('currentRideId');
//         const savedDriverData = await AsyncStorage.getItem('acceptedDriver');
      
//         if (savedRideId && !currentRideId) {
//           console.log('🔄 Recovering ride data from storage:', savedRideId);
//           setCurrentRideId(savedRideId);
        
//           if (savedDriverData) {
//             const driverData = JSON.parse(savedDriverData);
//             setAcceptedDriver(driverData);
//             setDriverName(driverData.name);
//             setDriverMobile(driverData.driverMobile);
//             setRideStatus("onTheWay");
//           } else {
//             setRideStatus("searching");
//             const bookedStr = await AsyncStorage.getItem('bookedAt');
//             setBookedAt(bookedStr ? new Date(bookedStr) : new Date());
//             // Restart polling
//             const pollInterval = setInterval(() => {
//               if (currentRideId) {
//                 socket.emit('getRideStatus', { rideId: currentRideId });
//               }
//             }, 5000);
//             AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//             // Restart timeout (increased to 60s)
//             const acceptanceTimeout = setTimeout(() => {
//               if (rideStatus === "searching") {
//                 Alert.alert(
//                   "No Driver Available",
//                   "No driver has accepted your ride yet. Please try again or wait longer.",
//                   [{ text: "OK", onPress: () => setRideStatus("idle") }]
//                 );
//               }
//             }, 60000);
//             AsyncStorage.setItem('acceptanceTimeout', acceptanceTimeout.toString());
//           }
        
//           // Request ride status from server
//           socket.emit('getRideStatus', { rideId: savedRideId });
//         }
//       } catch (error) {
//         console.error('Error recovering ride data:', error);
//       }
//     };
  
//     recoverRideData();
//   }, []);

//   const processRideAcceptance = useCallback((data: any) => {
//     console.log('🎯 PROCESSING RIDE ACCEPTANCE:', JSON.stringify(data, null, 2));
  
//     // Validate required data
//     if (!data.rideId || !data.driverId) {
//       console.error('❌ Invalid ride acceptance data:', data);
//       return;
//     }
//     // Clear existing timeouts and intervals
//     AsyncStorage.getItem('statusPollInterval').then(id => {
//       if (id) {
//         clearInterval(parseInt(id));
//         AsyncStorage.removeItem('statusPollInterval');
//       }
//     });
//     // Update ride status immediately
//     setRideStatus("onTheWay");
//     setDriverId(data.driverId);
//     setDriverName(data.driverName || 'Driver');
//     setDriverMobile(data.driverMobile || 'N/A');
//     setCurrentRideId(data.rideId);
//     // Create accepted driver object
//     const acceptedDriverData: DriverType = {
//       driverId: data.driverId,
//       name: data.driverName || 'Driver',
//       driverMobile: data.driverMobile || 'N/A',
//       location: {
//         coordinates: [data.driverLng || 0, data.driverLat || 0]
//       },
//       vehicleType: data.vehicleType || selectedRideType,
//       status: "onTheWay"
//     };
//     console.log('👨‍💼 Setting accepted driver:', acceptedDriverData);
  
//     // Update state
//     setAcceptedDriver(acceptedDriverData);
//     setNearbyDrivers([acceptedDriverData]);
//     setNearbyDriversCount(1);
//     // Set initial driver location
//     if (data.driverLat && data.driverLng) {
//       const driverLoc = {
//         latitude: data.driverLat,
//         longitude: data.driverLng
//       };
//       setDriverLocation(driverLoc);
//       console.log('📍 Initial driver location set:', driverLoc);
//     }
//     // Store in AsyncStorage for recovery
//     AsyncStorage.setItem('currentRideId', data.rideId);
//     AsyncStorage.setItem('acceptedDriver', JSON.stringify(acceptedDriverData));
  
//     console.log('✅ Ride acceptance processed successfully for:', data.rideId);
//   }, [selectedRideType]);

//   // Global ride acceptance listener
//   useEffect(() => {
//     console.log('🎯 Setting up GLOBAL ride acceptance listener');
//     const handleRideAccepted = (data: any) => {
//       console.log('🚨 ===== USER APP: RIDE ACCEPTED ====');
//       console.log('📦 Acceptance data:', JSON.stringify(data, null, 2));
//       console.log('🚨 ===== END ACCEPTANCE DATA ====');
//       processRideAcceptance(data);
//     };
//     // Listen on multiple channels
//     socket.on("rideAccepted", handleRideAccepted);
  
//     // Fixed: Proper async handling
//     socket.on("rideAcceptedBroadcast", async (data) => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (data.targetUserId === userId) {
//           handleRideAccepted(data);
//         }
//       } catch (error) {
//         console.error('Error checking user ID:', error);
//       }
//     });
//     return () => {
//       socket.off("rideAccepted", handleRideAccepted);
//       socket.off("rideAcceptedBroadcast", handleRideAccepted);
//     };
//   }, [processRideAcceptance]);

//   // ✅ CRITICAL: Add these missing socket event handlers
//   useEffect(() => {
//     console.log('🔌 Setting up CRITICAL socket event handlers');
//     // Handle getDriverData response
//     const handleDriverDataResponse = (data: any) => {
//       console.log('🚗 Driver data received:', data);
//       if (data.success) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle getRideStatus response
//     const handleRideStatusResponse = (data: any) => {
//       console.log('📋 Ride status received:', data);
//       if (data.driverId) {
//         processRideAcceptance(data);
//       }
//     };
//     // Handle backup ride acceptance
//     const handleBackupRideAccepted = (data: any) => {
//       console.log('🔄 Backup ride acceptance:', data);
//       processRideAcceptance(data);
//     };
//     socket.on("driverDataResponse", handleDriverDataResponse);
//     socket.on("rideStatusResponse", handleRideStatusResponse);
//     socket.on("backupRideAccepted", handleBackupRideAccepted);
//     return () => {
//       socket.off("driverDataResponse", handleDriverDataResponse);
//       socket.off("rideStatusResponse", handleRideStatusResponse);
//       socket.off("backupRideAccepted", handleBackupRideAccepted);
//     };
//   }, [selectedRideType]);

//   // ✅ COMPREHENSIVE SOCKET DEBUGGER
//   useEffect(() => {
//     console.log('🔍 Starting comprehensive socket debugging');
  
//     // Debug all socket events
//     const debugAllEvents = (eventName: string, data: any) => {
//       if (eventName.includes('ride') || eventName.includes('driver') || eventName.includes('Room')) {
//         console.log(`📡 SOCKET EVENT [${eventName}]:`, data);
//       }
//     };
//     // Specific debug for rideAccepted
//     const debugRideAccepted = (data: any) => {
//       console.log('🚨🚨🚨 RIDE ACCEPTED EVENT RECEIVED 🚨🚨🚨');
//       console.log('📦 Data:', JSON.stringify(data, null, 2));
//       console.log('🔍 Current state:', {
//         currentRideId,
//         rideStatus,
//         hasAcceptedDriver: !!acceptedDriver
//       });
    
//       // Process immediately
//       processRideAcceptance(data);
//     };
//     // Debug connection
//     const handleConnect = () => {
//       console.log('✅ Socket connected - ID:', socket.id);
//       setSocketConnected(true);
//     };
//     const handleDisconnect = () => {
//       console.log('❌ Socket disconnected');
//       setSocketConnected(false);
//     };
//     // Add all listeners
//     socket.onAny(debugAllEvents);
//     socket.on("rideAccepted", debugRideAccepted);
//     socket.on("connect", handleConnect);
//     socket.on("disconnect", handleDisconnect);
//     console.log('🔍 Socket debuggers activated');
//     return () => {
//       socket.offAny(debugAllEvents);
//       socket.off("rideAccepted", debugRideAccepted);
//       socket.off("connect", handleConnect);
//       socket.off("disconnect", handleDisconnect);
//     };
//   }, [currentRideId, rideStatus, acceptedDriver, processRideAcceptance]);

//   // Add this to your user app component (e.g., TaxiContent.js)
//   // Send location updates to backend
//   const sendLocationUpdate = async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
//       const currentRideId = await AsyncStorage.getItem('currentRideId');
    
//       if (!userId) return;
    
//       // Send to socket
//       socket.emit('userLocationUpdate', {
//         userId,
//         latitude,
//         longitude,
//         rideId: currentRideId
//       });
    
//       // Also send to REST API as backup
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//     latitude,
//     longitude
//   }, {
//     headers: {
//       Authorization: `Bearer ${token}`
//     }
//   });
//       }
//     } catch (error) {
//       console.error('Error sending location update:', error);
//     }
//   };

//   // ✅ ADD TO YOUR TaxiContent.js COMPONENT
//   // Real-time user location tracking function
//   const sendUserLocationUpdate = useCallback(async (latitude, longitude) => {
//     try {
//       const userId = await AsyncStorage.getItem('userId');
    
//       if (!userId || !currentRideId) {
//         console.log('❌ Cannot send location: Missing userId or rideId');
//         return;
//       }
//       console.log(`📍 SENDING USER LOCATION UPDATE: ${latitude}, ${longitude} for ride ${currentRideId}`);
    
//       // Send to socket for real-time updates
//       socket.emit('userLocationUpdate', {
//         userId,
//         rideId: currentRideId,
//         latitude,
//         longitude,
//         timestamp: Date.now()
//       });
//       // Also save to database via REST API
//       const token = await AsyncStorage.getItem('authToken');
//       if (token) {
//         const backendUrl = getBackendUrl();
//         await axios.post(`${backendUrl}/api/users/save-location`, {
//           latitude,
//           longitude,
//           rideId: currentRideId
//         }, {
//           headers: {
//             Authorization: `Bearer ${token}`
//           }
//         });
//       }
//       console.log('✅ User location update sent successfully');
//     } catch (error) {
//       console.error('❌ Error sending user location update:', error);
//     }
//   }, [currentRideId]);

//   // ✅ CRITICAL: Continuous location tracking during active rides
//   useEffect(() => {
//     let locationInterval;
//     if ((rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && location) {
//       console.log('🔄 Starting continuous user location tracking');
    
//       locationInterval = setInterval(() => {
//         if (location) {
//           sendUserLocationUpdate(location.latitude, location.longitude);
//         }
//       }, 5000); // Send every 5 seconds
    
//     }
//     return () => {
//       if (locationInterval) {
//         clearInterval(locationInterval);
//         console.log('🛑 Stopped user location tracking');
//       }
//     };
//   }, [rideStatus, location, sendUserLocationUpdate]);

//   // ✅ ALSO UPDATE: Your existing location interval to include active ride statuses
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location && (rideStatus === "idle" || rideStatus === "searching" || rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started")) {
//         Geolocation.getCurrentPosition(
//           (pos) => {
//             const newLoc = { latitude: pos.coords.latitude, longitude: pos.coords.longitude };
//             setLocation(newLoc);
          
//             // Send location update if in active ride
//             if (rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") {
//               sendUserLocationUpdate(newLoc.latitude, newLoc.longitude);
//             }
          
//             if (isPickupCurrent && dropoffLocation) {
//               setPickupLocation(newLoc);
//               fetchRoute(newLoc);
//             }
//             fetchNearbyDrivers(newLoc.latitude, newLoc.longitude);
//           },
//           (err) => { console.error("Live location error:", err); },
//           { enableHighAccuracy: false, timeout: 15000, maximumAge: 300000 }
//         );
//       }
//     }, 5000);
//     return () => clearInterval(interval);
//   }, [rideStatus, isPickupCurrent, dropoffLocation, location, socketConnected, sendUserLocationUpdate]);

//   // ✅ FIXED: Remove the undefined property
//   useEffect(() => {
//     console.log('🔍 USER LOCATION DEBUG:', {
//       hasLocation: !!location,
//       rideStatus,
//       hasCurrentRideId: !!currentRideId,
//       socketConnected
//     });
//     if (currentRideId && location) {
//       console.log('📍 Current user position:', {
//         latitude: location.latitude,
//         longitude: location.longitude,
//         rideId: currentRideId
//       });
//     }
//   }, [location, rideStatus, currentRideId]);

//   // Update your location tracking code to send updates
//   useEffect(() => {
//     const interval = setInterval(() => {
//       if (location) {
//         sendLocationUpdate(location.latitude, location.longitude);
//       }
//     }, 5000); // Send location every 5 seconds
//     return () => clearInterval(interval);
//   }, [location]);

//   // ✅ BACKUP: Manual ride status polling
//   useEffect(() => {
//     if (currentRideId && rideStatus === "searching") {
//       console.log('🔄 Starting backup polling for ride:', currentRideId);
    
//       const pollInterval = setInterval(() => {
//         console.log('📡 Polling ride status for:', currentRideId);
//         socket.emit('getRideStatus', { rideId: currentRideId }, (data) => {
//           if (data.driverId) {
//             processRideAcceptance(data);
//           } else if (bookedAt && (new Date().getTime() - bookedAt.getTime() > 60000) && rideStatus === "searching") {
//             console.log('⏰ No driver found after 60s');
//             Alert.alert(
//               "No Driver Available",
//               "No driver has accepted your ride yet. Please try again or wait longer.",
//               [{ text: "OK", onPress: () => setRideStatus("idle") }]
//             );
//             clearInterval(pollInterval);
//             AsyncStorage.removeItem('statusPollInterval');
//           }
//         });
//       }, 3000); // Poll every 3 seconds
//       // Store interval ID
//       AsyncStorage.setItem('statusPollInterval', pollInterval.toString());
//       return () => {
//         clearInterval(pollInterval);
//         AsyncStorage.removeItem('statusPollInterval');
//       };
//     }
//   }, [currentRideId, rideStatus, bookedAt]);

//   // ✅ CRITICAL: Ensure user joins their room on socket connection
//   useEffect(() => {
//     const registerUserRoom = async () => {
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId && socket.connected) {
//           console.log('👤 Registering user with socket room:', userId);
//           socket.emit('registerUser', { userId });
        
//           // Also join the room manually
//           socket.emit('joinRoom', { userId });
//         }
//       } catch (error) {
//         console.error('Error registering user room:', error);
//       }
//     };
//     // Register on connect and every 5 seconds to ensure room membership
//     socket.on('connect', registerUserRoom);
//     registerUserRoom();
//     // Re-register periodically to ensure room membership
//     const interval = setInterval(registerUserRoom, 5000);
//     return () => {
//       socket.off('connect', registerUserRoom);
//       clearInterval(interval);
//     };
//   }, []);

//   // ✅ SOCKET RECOVERY: Handle reconnection and missed events
//   useEffect(() => {
//     const handleReconnect = async () => {
//       console.log('🔌 Socket reconnected, recovering state...');
//       setSocketConnected(true);
    
//       // Re-register user
//       try {
//         const userId = await AsyncStorage.getItem('userId');
//         if (userId) {
//           socket.emit('registerUser', { userId });
//           console.log('👤 User re-registered after reconnect:', userId);
//         }
      
//         // Request current ride status if we have a ride ID
//         const currentRideId = await AsyncStorage.getItem('currentRideId');
//         if (currentRideId) {
//           socket.emit('getRideStatus', { rideId: currentRideId });
//           console.log('🔄 Requesting status for current ride:', currentRideId);
//         }
//       } catch (error) {
//         console.error('Error during socket recovery:', error);
//       }
//     };
  
//     socket.on("connect", handleReconnect);
  
//     return () => {
//       socket.off("connect", handleReconnect);
//     };
//   }, []);

//   const fetchRoute = async (dropCoord: LocationType) => {
//     if (!pickupLocation) return;
//     try {
//       const url = `https://router.project-osrm.org/route/v1/driving/${pickupLocation.longitude},${pickupLocation.latitude};${dropCoord.longitude},${dropCoord.latitude}?overview=full&geometries=geojson`;
//       const res = await fetch(url);
//       const data = await res.json();
//       if (data.code === "Ok" && data.routes.length > 0) {
//         const coords = data.routes[0].geometry.coordinates.map(([lng, lat]: number[]) => ({ latitude: lat, longitude: lng }));
//         setRouteCoords(coords);
//         setDistance((data.routes[0].distance / 1000).toFixed(2) + " km");
//         setTravelTime(Math.round(data.routes[0].duration / 60) + " mins");
//       } else {
//         setApiError("Failed to fetch route");
//         Alert.alert("Route Error", "Could not find route. Please try different locations.");
//       }
//     } catch (err) {
//       console.error(err);
//       setRouteCoords([]);
//       setApiError("Network error fetching route");
//       Alert.alert("Route Error", "Failed to fetch route. Please check your internet connection.");
//     }
//   };

//   const fetchSuggestions = async (query: string, type: 'pickup' | 'dropoff'): Promise<SuggestionType[]> => {
//     try {
//       console.log(`Fetching suggestions for: ${query}`);
//       const cache = type === 'pickup' ? pickupCache : dropoffCache;
//       if (cache[query]) {
//         console.log(`Returning cached suggestions for: ${query}`);
//         return cache[query];
//       }
//       if (type === 'pickup') setPickupLoading(true);
//       else setDropoffLoading(true);
//       setSuggestionsError(null);
//       const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=5&addressdetails=1&countrycodes=IN`;
//       console.log(`API URL: ${url}`);
    
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
    
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       if (!Array.isArray(data)) throw new Error('Invalid response format');
    
//       const suggestions: SuggestionType[] = data.map((item: any) => ({
//         id: item.place_id || `${item.lat}-${item.lon}`,
//         name: item.display_name,
//         address: extractAddress(item),
//         lat: item.lat,
//         lon: item.lon,
//         type: item.type || 'unknown',
//         importance: item.importance || 0,
//       }));
//       if (type === 'pickup') setPickupCache(prev => ({ ...prev, [query]: suggestions }));
//       else setDropoffCache(prev => ({ ...prev, [query]: suggestions }));
//       return suggestions;
//     } catch (error: any) {
//       console.error('Suggestions fetch error:', error);
//       setSuggestionsError(error.message || 'Failed to fetch suggestions');
//       return [];
//     } finally {
//       if (type === 'pickup') setPickupLoading(false);
//       else setDropoffLoading(false);
//     }
//   };

//   const extractAddress = (item: any): string => {
//     if (item.address) {
//       const parts = [];
//       if (item.address.road) parts.push(item.address.road);
//       if (item.address.suburb) parts.push(item.address.suburb);
//       if (item.address.city || item.address.town || item.address.village) parts.push(item.address.city || item.address.town || item.address.village);
//       if (item.address.state) parts.push(item.address.state);
//       if (item.address.postcode) parts.push(item.address.postcode);
//       return parts.join(', ');
//     }
//     return item.display_name;
//   };

//   const handlePickupChange = (text: string) => {
//     console.log(`handlePickupChange called with: "${text}"`);
//     propHandlePickupChange(text);
//     if (pickupDebounceTimer.current) {
//       clearTimeout(pickupDebounceTimer.current);
//       pickupDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setPickupLoading(true);
//       setShowPickupSuggestions(true);
//       pickupDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'pickup');
//         setPickupSuggestions(sugg);
//         setPickupLoading(false);
//       }, 500);
//     } else {
//       setShowPickupSuggestions(false);
//       setPickupSuggestions([]);
//     }
//   };

//   const handleDropoffChange = (text: string) => {
//     console.log(`handleDropoffChange called with: "${text}"`);
//     propHandleDropoffChange(text);
//     if (dropoffDebounceTimer.current) {
//       clearTimeout(dropoffDebounceTimer.current);
//       dropoffDebounceTimer.current = null;
//     }
//     if (text.length > 2) {
//       setDropoffLoading(true);
//       setShowDropoffSuggestions(true);
//       dropoffDebounceTimer.current = setTimeout(async () => {
//         const sugg = await fetchSuggestions(text, 'dropoff');
//         setDropoffSuggestions(sugg);
//         setDropoffLoading(false);
//       }, 500);
//     } else {
//       setShowDropoffSuggestions(false);
//       setDropoffSuggestions([]);
//     }
//   };

//   const selectPickupSuggestion = (suggestion: SuggestionType) => {
//     propHandlePickupChange(suggestion.name);
//     setPickupLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowPickupSuggestions(false);
//     setIsPickupCurrent(false);
//     if (dropoffLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     fetchNearbyDrivers(parseFloat(suggestion.lat), parseFloat(suggestion.lon));
//   };

//   const selectDropoffSuggestion = (suggestion: SuggestionType) => {
//     propHandleDropoffChange(suggestion.name);
//     setDropoffLocation({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//     setShowDropoffSuggestions(false);
//     if (pickupLocation) fetchRoute({ latitude: parseFloat(suggestion.lat), longitude: parseFloat(suggestion.lon) });
//   };

//   useEffect(() => {
//     const updatePrice = async () => {
//       if (pickupLocation && dropoffLocation && distance) {
//         const price = await calculatePrice();
//         setEstimatedPrice(price);
//       }
//     };
//     updatePrice();
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   useEffect(() => {
//     if (pickupLocation && dropoffLocation && distance) {
//       const price = calculatePrice();
//       setEstimatedPrice(price);
//     }
//   }, [pickupLocation, dropoffLocation, selectedRideType, wantReturn, distance]);

//   useEffect(() => {
//     if (showPricePanel) {
//       Animated.timing(panelAnimation, {
//         toValue: 1,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     } else {
//       Animated.timing(panelAnimation, {
//         toValue: 0,
//         duration: 300,
//         useNativeDriver: true,
//       }).start();
//     }
//   }, [showPricePanel]);


  
//   // ❌ REMOVE THIS ENTIRE BLOCK - Hardcoded fallback prices
// // const fallbackPrices = {
// //   bike: 100,
// //   taxi: 500, 
// //   port: 1000
// // };

// // ✅ UPDATE THE fetchRidePrice FUNCTION - Remove fallback
// const fetchRidePrice = async (vehicleType: string, distance: number) => {
//   // Use ONLY dynamic prices from socket events
//   const pricePerKm = dynamicPrices[vehicleType];
  
//   // If dynamic prices are not set yet, wait for them
//   if (!pricePerKm || pricePerKm === 0) {
//     console.log(`⏳ Waiting for ${vehicleType} price from admin...`);
//     return 0;
//   }
  
//   const calculatedPrice = distance * pricePerKm;
  
//   console.log(`💰 Price calculation: ${distance}km ${vehicleType} × ₹${pricePerKm}/km = ₹${calculatedPrice}`);
//   return calculatedPrice;
// };






// const calculatePrice = async (): Promise<number | null> => {
//   if (!pickupLocation || !dropoffLocation || !distance) {
//     console.log('❌ Missing location data for price calculation');
//     return null;
//   }

//   const distanceKm = parseFloat(distance);
  
//   // DEBUG: Print current prices before calculation
//   console.log('\n💰 PRICE CALCULATION DEBUG:');
//   console.log(`📏 Distance: ${distanceKm}km`);
//   console.log(`🚗 Vehicle Type: ${selectedRideType}`);
//   console.log(`🏍️  BIKE Price/km: ₹${dynamicPrices.bike}`);
//   console.log(`🚕 TAXI Price/km: ₹${dynamicPrices.taxi}`);
//   console.log(`🚛 PORT Price/km: ₹${dynamicPrices.port}`);
//   console.log('─────────────────────────────────────');

//   try {
//     const pricePerKm = dynamicPrices[selectedRideType];
    
//     console.log(`💰 Using price per km: ₹${pricePerKm} for ${selectedRideType}`);

//     // Wait for admin prices - NO TEMPORARY FALLBACK
//     if (!pricePerKm || pricePerKm === 0) {
//       console.log('⏳ Waiting for admin prices to be loaded...');
//       console.log('🚫 Booking blocked until prices are received from admin');
//       return null;
//     }
    
//     const calculatedPrice = distanceKm * pricePerKm;
//     const multiplier = wantReturn ? 2 : 1;
//     const finalPrice = Math.round(calculatedPrice * multiplier);

//     console.log(`✅ Final price calculated: ${distanceKm}km × ₹${pricePerKm}/km × ${multiplier} = ₹${finalPrice}`);
//     return finalPrice;
//   } catch (error) {
//     console.error('❌ Error calculating price:', error);
//     return null;
//   }
// };




// // ✅ IMPROVED PRICE UPDATE HANDLER
// useEffect(() => {
//   const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 Received REAL-TIME price update from admin:', data);
    
//     // Update dynamic prices immediately
//     setDynamicPrices({
//       bike: data.bike,
//       taxi: data.taxi,
//       port: data.port,
//     });
    
//     // Log the new prices
//     console.log('🔄 PRICES UPDATED SUCCESSFULLY:');
//     console.log(`🏍️  BIKE: ₹${data.bike}/km`);
//     console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//     console.log(`🚛 PORT: ₹${data.port}/km`);
    
//     // Immediately recalculate price if a ride is being planned
//     if (pickupLocation && dropoffLocation && distance) {
//       console.log('🔄 Recalculating price with new admin rates...');
//       calculatePrice();
//     }
//   };

//   socket.on('priceUpdate', handlePriceUpdate);
  
//   return () => {
//     socket.off('priceUpdate', handlePriceUpdate);
//   };
// }, [pickupLocation, dropoffLocation, distance]);






// // ✅ INITIALIZE WITH ZERO PRICES - Force waiting for admin


// // ✅ FINAL WORKING SOLUTION - NO HARCODED PRICES

// const [dynamicPrices, setDynamicPrices] = useState({
//   bike: 0,
//   taxi: 0,
//   port: 0,
// });

// // Request prices on component mount
// useEffect(() => {
//   console.log('📡 Requesting current prices from admin...');
//   socket.emit('getCurrentPrices');
  
//   const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 Received current prices:', data);
//     setDynamicPrices(data);
//   };
  
//   socket.on('currentPrices', handleCurrentPrices);
  
//   return () => {
//     socket.off('currentPrices', handleCurrentPrices);
//   };
// }, []);

// // Listen for real-time price updates
// useEffect(() => {
//   const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 REAL-TIME PRICE UPDATE:', data);
//     setDynamicPrices(data);
    
//     console.log('✅ PRICES UPDATED:');
//     console.log(`🏍️  BIKE: ₹${data.bike}/km`);
//     console.log(`🚕 TAXI: ₹${data.taxi}/km`);
//     console.log(`🚛 PORT: ₹${data.port}/km`);
    
//     // Recalculate immediately
//     if (pickupLocation && dropoffLocation && distance) {
//       calculatePrice();
//     }
//   };

//   socket.on('priceUpdate', handlePriceUpdate);
//   return () => socket.off('priceUpdate', handlePriceUpdate);
// }, [pickupLocation, dropoffLocation, distance]);



// // ✅ ADD THIS: Price debugging and console logging
// useEffect(() => {
//   console.log('💰 INITIALIZING PRICE DEBUGGING SYSTEM');
  
//   // Function to print current prices to console
//   const printCurrentPrices = () => {
//     console.log('\n🚗 ===== CURRENT RIDE PRICES =====');
//     console.log(`🏍️  BIKE: Today's price per km: ₹${dynamicPrices.bike}`);
//     console.log(`🚕 TAXI: Today's price per km: ₹${dynamicPrices.taxi}`);
//     console.log(`🚛 PORT: Today's price per km: ₹${dynamicPrices.port}`);
//     console.log('=================================\n');
//   };

//   // Listen for price updates from admin
//   const handlePriceUpdate = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 REAL-TIME PRICE UPDATE RECEIVED FROM ADMIN:', data);
    
//     // Update dynamic prices
//     setDynamicPrices({
//       bike: data.bike,
//       taxi: data.taxi,
//       port: data.port,
//     });
    
//     // Print updated prices to console
//     console.log('\n✅ ===== PRICES UPDATED SUCCESSFULLY =====');
//     console.log(`🏍️  BIKE: Today's price per km: ₹${data.bike}`);
//     console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//     console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//     console.log('=============================================\n');
    
//     // Recalculate price if needed
//     if (pickupLocation && dropoffLocation && distance) {
//       calculatePrice();
//     }
//   };

//   // Listen for initial prices when component mounts
//   const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 RECEIVED CURRENT PRICES FROM SERVER:');
//     console.log(`🏍️  BIKE: Today's price per km: ₹${data.bike}`);
//     console.log(`🚕 TAXI: Today's price per km: ₹${data.taxi}`);
//     console.log(`🚛 PORT: Today's price per km: ₹${data.port}`);
//     console.log('─────────────────────────────────────');
    
//     setDynamicPrices(data);
//   };

//   // Request current prices when component mounts
//   console.log('📡 Requesting current prices from server...');
//   socket.emit('getCurrentPrices');

//   // Set up event listeners
//   socket.on('priceUpdate', handlePriceUpdate);
//   socket.on('currentPrices', handleCurrentPrices);
//   socket.on('ridePricesUpdated', handlePriceUpdate); // Alternative event name

//   // Print initial prices
//   printCurrentPrices();

//   // Set up interval to periodically request prices (as backup)
//   const priceInterval = setInterval(() => {
//     console.log('🔄 Periodic price check...');
//     socket.emit('getCurrentPrices');
//     printCurrentPrices();
//   }, 30000); // Every 30 seconds

//   return () => {
//     // Clean up event listeners
//     socket.off('priceUpdate', handlePriceUpdate);
//     socket.off('currentPrices', handleCurrentPrices);
//     socket.off('ridePricesUpdated', handlePriceUpdate);
//     clearInterval(priceInterval);
//   };
// }, [pickupLocation, dropoffLocation, distance]);



// // Add this useEffect to request current prices on component mount
// useEffect(() => {
//   console.log('📡 Requesting current prices from admin...');
  
//   // Request current prices when component mounts
//   socket.emit('getCurrentPrices');
  
//   // Also set up a listener for initial price response
//   const handleCurrentPrices = (data: { bike: number; taxi: number; port: number }) => {
//     console.log('📡 Received current prices from admin:', data);
//     setDynamicPrices(data);
//   };
  
//   socket.on('currentPrices', handleCurrentPrices);
  
//   return () => {
//     socket.off('currentPrices', handleCurrentPrices);
//   };
// }, []);






//   useEffect(() => {
//     const fetchInitialPrices = async () => {
//       try {
//         const bikeRate = await fetchRidePrice('bike', 1);
//         const taxiRate = await fetchRidePrice('taxi', 1);
//         const portRate = await fetchRidePrice('port', 1);
//         setDynamicPrices({
//           bike: bikeRate,
//           taxi: taxiRate,
//           port: portRate,
//         });
//         console.log(`BIKE: Today's price per km: ₹${bikeRate}`);
//         console.log(`TAXI: Today's price per km: ₹${taxiRate}`);
//         console.log(`PORT: Today's price per km: ₹${portRate}`);
//       } catch (error) {
//         console.error('❌ Error fetching initial prices:', error);
//         setDynamicPrices({
//           bike: 100,
//           taxi: 500,
//           port: 1000,
//         });
//         console.log(`BIKE: Today's price per km: ₹100 (fallback)`);
//         console.log(`TAXI: Today's price per km: ₹500 (fallback)`);
//         console.log(`PORT: Today's price per km: ₹1000 (fallback)`);
//       }
//     };
//     fetchInitialPrices();
//   }, []);

//   const handleRideTypeSelect = async (type: string) => {
//     if (selectedRideType === type) return;
//     setSelectedRideType(type);
//     setShowPricePanel(true);
//     if (pickupLocation && dropoffLocation) {
//       const price = await calculatePrice();
//       setEstimatedPrice(price);
//     }
//     if (location) fetchNearbyDrivers(location.latitude, location.longitude);
//   };

//   const handleBookRide = async () => {
//     if (isBooking) {
//       console.log('⏭️ Ride booking already in progress, skipping duplicate');
//       return;
//     }
//       const price = await calculatePrice(); // Use async price calculation
//   if (!price) {
//     Alert.alert('Error', 'Price calculation failed. Please try again.');
//     return;
//   }
  
//     try {
//       setIsBooking(true);
    
//       const token = await AsyncStorage.getItem('authToken');
//       if (!token) {
//         Alert.alert('Authentication Error', 'Please log in to book a ride');
//         setIsBooking(false);
//         return;
//       }
//       if (!pickupLocation || !dropoffLocation) {
//         Alert.alert('Error', 'Please select both pickup and dropoff locations');
//         setIsBooking(false);
//         return;
//       }
//       if (!estimatedPrice) {
//         Alert.alert('Error', 'Price calculation failed. Please try again.');
//         setIsBooking(false);
//         return;
//       }
//       const userId = await AsyncStorage.getItem('userId');
//       const customerId = (await AsyncStorage.getItem('customerId')) || 'U001';
//       const userName = await AsyncStorage.getItem('userName');
//       const userMobile = await AsyncStorage.getItem('userMobile');
//       let otp;
//       if (customerId && customerId.length >= 4) {
//         otp = customerId.slice(-4);
//       } else {
//         otp = Math.floor(1000 + Math.random() * 9000).toString();
//       }
//       setRideStatus('searching');
//       setBookedAt(new Date());
//       console.log('📋 User Details:', {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup,
//         dropoff,
//         selectedRideType,
//         otp
//       });
//       const rideData = {
//         userId,
//         customerId,
//         userName,
//         userMobile,
//         pickup: {
//           lat: pickupLocation.latitude,
//           lng: pickupLocation.longitude,
//           address: pickup,
//         },
//         drop: {
//           lat: dropoffLocation.latitude,
//           lng: dropoffLocation.longitude,
//           address: dropoff,
//         },
//         vehicleType: selectedRideType,
//         otp,
//         estimatedPrice,
//         distance,
//         travelTime,
//         wantReturn,
//         token
//       };
//       socket.emit('bookRide', rideData, (response) => {
//         setIsBooking(false);
      
//         if (response && response.success) {
//           setCurrentRideId(response.rideId);
//           AsyncStorage.setItem('bookedAt', new Date().toISOString());
//           setBookingOTP(response.otp);
//           setShowConfirmModal(true);
//           setRideStatus('searching');
//           console.log('✅ Ride booked successfully:', response);
//         } else {
//           Alert.alert('Booking Failed', response?.message || 'Failed to book ride');
//           setRideStatus('idle');
//           setCurrentRideId(null);
//         }
//       });
//     } catch (error) {
//       setIsBooking(false);
//       console.error('Booking error:', error);
//       Alert.alert('Booking Failed', 'An unexpected error occurred. Please try again.');
//       setRideStatus('idle');
//       setCurrentRideId(null);
//     }
//   };

//   // Add this useEffect to debug real-time events
//   useEffect(() => {
//     console.log('🎯 Setting up real-time event listeners');
  
//     // Listen for all socket events for debugging
//     const handler = (eventName: string, ...args: any[]) => {
//       if (eventName.includes('driver') || eventName.includes('location')) {
//         console.log('📡 Socket event:', eventName, args);
//       }
//     };
//     socket.onAny(handler);
//     return () => {
//       socket.offAny(handler);
//     };
//   }, []);

//   useEffect(() => {
//     const fetchUserData = async () => {
//       try {
//         const token = await AsyncStorage.getItem('authToken');
//         if (!token) return;
//         const backendUrl = getBackendUrl();
//         const response = await axios.get(`${backendUrl}/api/users/profile`, {
//           headers: { Authorization: `Bearer ${token}` }
//         });
      
//         const userProfile = response.data;
      
//         console.log('📋 User Profile:', userProfile);
      
//         const userMobile = userProfile.mobile ||
//                            userProfile.phone ||
//                            userProfile.phoneNumber ||
//                            userProfile.mobileNumber ||
//                            '';
//         await AsyncStorage.setItem('userId', userProfile._id);
//         await AsyncStorage.setItem('customerId', userProfile.customerId || userProfile._id);
//         await AsyncStorage.setItem('userName', userProfile.name || userProfile.username);
//         await AsyncStorage.setItem('userMobile', userProfile.phoneNumber);
//         await AsyncStorage.setItem('userAddress', userProfile.address || '');
      
//       } catch (error) {
//         console.error('Error fetching user data:', error);
//       }
//     };
//     fetchUserData();
//   }, []);

//   useEffect(() => {
//     const handleRideCreated = (data) => {
//       console.log('Ride created event received:', data);
//       if (data.success) {
//         if (data.rideId && !currentRideId) {
//           setCurrentRideId(data.rideId);
//         }
      
//         AsyncStorage.setItem('lastRideId', data.rideId || currentRideId || '');
      
//         setBookingOTP(data.otp);
//         setShowConfirmModal(true);
//         setRideStatus("searching");
//       } else if (data.message) {
//         Alert.alert("Booking Failed", data.message || "Failed to book ride");
//         setRideStatus("idle");
//         setCurrentRideId(null);
//       }
//     };
//     socket.on("rideCreated", handleRideCreated);
//     return () => {
//       socket.off("rideCreated", handleRideCreated);
//     };
//   }, [currentRideId]);

//   const handleConfirmBooking = async () => {
//     console.log('Confirming booking with OTP:', bookingOTP);
//     console.log('Current Ride ID:', currentRideId);
//     let rideIdToUse = currentRideId;
  
//     if (!rideIdToUse) {
//       rideIdToUse = await AsyncStorage.getItem('currentRideId');
//       console.log('🔄 Using rideId from storage:', rideIdToUse);
//     }
  
//     if (!rideIdToUse) {
//       Alert.alert("Error", "Invalid booking state. Please try booking again.");
//       setShowConfirmModal(false);
//       return;
//     }
  
//     setCurrentRideId(rideIdToUse);
//     setRideStatus("searching"); // Change to "searching" first
//     setShowConfirmModal(false);
  
//     console.log('🚀 Waiting for driver to accept ride:', rideIdToUse);
  
//     // Start polling for ride status updates
//     const statusPollInterval = setInterval(() => {
//       if (currentRideId) {
//         socket.emit('getRideStatus', { rideId: currentRideId });
//       }
//     }, 5000); // Poll every 5 seconds
  
//     AsyncStorage.setItem('statusPollInterval', statusPollInterval.toString());
//   };

//   const renderVehicleIcon = (type: 'bike' | 'taxi' | 'port', size: number = 24, color: string = '#000000') => {
//     try {
//       switch (type) {
//         case 'bike': return <BikeIcon width={size} height={size} fill={color} />;
//         case 'taxi': return <TaxiIcon width={size} height={size} fill={color} />;
//         case 'port': return <LorryIcon width={size} height={size} fill={color} />;
//         default: return <TaxiIcon width={size} height={size} fill={color} />;
//       }
//     } catch (error) {
//       return <TaxiIcon width={size} height={size} fill={color} />;
//     }
//   };

//   const renderSuggestionItem = (item: SuggestionType, onSelect: () => void, key: string) => {
//     let iconName = 'location-on';
//     let iconColor = '#A9A9A9';
//     if (item.type.includes('railway') || item.type.includes('station')) { iconName = 'train'; iconColor = '#3F51B5'; }
//     else if (item.type.includes('airport')) { iconName = 'flight'; iconColor = '#2196F3'; }
//     else if (item.type.includes('bus')) { iconName = 'directions-bus'; iconColor = '#FF9800'; }
//     else if (item.type.includes('hospital')) { iconName = 'local-hospital'; iconColor = '#F44336'; }
//     else if (item.type.includes('school') || item.type.includes('college')) { iconName = 'school'; iconColor = '#4CAF50'; }
//     else if (item.type.includes('place_of_worship')) { iconName = 'church'; iconColor = '#9C27B0'; }
//     else if (item.type.includes('shop') || item.type.includes('mall')) { iconName = 'shopping-mall'; iconColor = '#E91E63'; }
//     else if (item.type.includes('park')) { iconName = 'park'; iconColor = '#4CAF50'; }
  
//     return (
//       <TouchableOpacity key={key} style={styles.suggestionItem} onPress={onSelect}>
//         <MaterialIcons name={iconName as any} size={20} color={iconColor} style={styles.suggestionIcon} />
//         <View style={styles.suggestionTextContainer}>
//           <Text style={styles.suggestionMainText} numberOfLines={1}>{extractMainName(item.name)}</Text>
//           <Text style={styles.suggestionSubText} numberOfLines={1}>{item.address}</Text>
//         </View>
//       </TouchableOpacity>
//     );
//   };

//   const extractMainName = (fullName: string): string => {
//     const parts = fullName.split(',');
//     return parts[0].trim();
//   };

//   const isBookRideButtonEnabled = pickup && dropoff && selectedRideType && estimatedPrice !== null;

//   const reverseGeocode = async (lat: number, lon: number): Promise<string | null> => {
//     try {
//       const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1&countrycodes=IN`;
//       const response = await fetch(url, {
//         headers: { 'User-Agent': 'EAZYGOApp/1.0' },
//       });
//       if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//       const data = await response.json();
//       return data.display_name || null;
//     } catch (error) {
//       console.error('Reverse geocode error:', error);
//       return null;
//     }
//   };

//   const handleRegionChangeComplete = async (region: any, isPickup: boolean) => {
//     if (regionChangeTimer.current) {
//       clearTimeout(regionChangeTimer.current);
//     }
//     regionChangeTimer.current = setTimeout(async () => {
//       const addr = await reverseGeocode(region.latitude, region.longitude);
//       if (addr) {
//         if (isPickup) {
//           propHandlePickupChange(addr);
//           setPickupLocation({ latitude: region.latitude, longitude: region.longitude });
//           setIsPickupCurrent(false);
//           if (dropoffLocation) fetchRoute(dropoffLocation);
//           fetchNearbyDrivers(region.latitude, region.longitude);
//         } else {
//           propHandleDropoffChange(addr);
//           setDropoffLocation({ latitude: region.latitude, longitude: region.longitude });
//           if (pickupLocation) fetchRoute({ latitude: region.latitude, longitude: region.longitude });
//         }
//       }
//     }, 500);
//   };

//   return (
//     <View style={styles.container}>
//       {isLoadingLocation ? (
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#4CAF50" />
//           <Text style={styles.loadingText}>Fetching your location...</Text>
//         </View>
//       ) : (
//         <>
//           <View style={styles.mapContainer}>
//             {location && (
//               <MapView
//                 ref={mapRef}
//                 style={styles.map}
//                 initialRegion={{
//                   latitude: location.latitude,
//                   longitude: location.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 showsUserLocation
//               >
//                 {/* ✅ Pickup & Drop markers */}
//                 {pickupLocation && (
//                   <Marker
//                     coordinate={pickupLocation}
//                     title="Pickup"
//                     pinColor="blue"
//                   />
//                 )}
//                 {dropoffLocation && (
//                   <Marker
//                     coordinate={dropoffLocation}
//                     title="Dropoff"
//                     pinColor="red"
//                   />
//                 )}
//                 {/* ✅ Driver marker */}
//                 {driverLocation && (
//                   <Marker
//                     coordinate={driverLocation}
//                     title="Driver"
//                     key={`driver-${driverLocation.latitude}-${driverLocation.longitude}`}
//                   >
//                     <View style={styles.driverMarkerContainer}>
//                       <View
//                         style={[
//                           styles.vehicleIconContainer,
//                           {
//                             backgroundColor:
//                               rideStatus === "onTheWay" ||
//                               rideStatus === "arrived" ||
//                               rideStatus === "started"
//                                 ? "#FF6B00"
//                                 : "#4CAF50",
//                           },
//                         ]}
//                       >
//                         {renderVehicleIcon(selectedRideType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                       </View>
//                     </View>
//                   </Marker>
//                 )}
//                 {/* ✅ Nearby Drivers */}
//                 {(rideStatus === "idle" || rideStatus === "searching") &&
//                   nearbyDrivers &&
//                   nearbyDrivers.length > 0 &&
//                   nearbyDrivers.map((driver) => (
//                     <Marker
//                       key={`nearby-${driver.driverId}-${driver.location.coordinates[1]}-${driver.location.coordinates[0]}`}
//                       coordinate={{
//                         latitude: driver.location.coordinates[1],
//                         longitude: driver.location.coordinates[0],
//                       }}
//                       title={`${driver.name} (${driver.status || "Live"})`}
//                     >
//                       <View style={styles.driverMarkerContainer}>
//                         <View style={styles.vehicleIconContainer}>
//                           {renderVehicleIcon(driver.vehicleType as "bike" | "taxi" | "port", 20, "#FFFFFF")}
//                         </View>
//                       </View>
//                     </Marker>
//                   ))}
//                 {/* ✅ Route polyline */}
//                 {routeCoords && routeCoords.length > 0 && (
//                   <Polyline
//                     coordinates={routeCoords}
//                     strokeWidth={5}
//                     strokeColor="#4CAF50"
//                   />
//                 )}
//               </MapView>
//             )}
          
//             {/* ✅ CORRECTED: Driver count display based on ride status */}
//             {(rideStatus === "idle" || rideStatus === "searching") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Available Drivers Nearby: {nearbyDriversCount}
//                 </Text>
//               </View>
//             )}
//             {/* ✅ ACTIVE RIDE: Show driver status */}
//             {(rideStatus === "onTheWay" || rideStatus === "arrived" || rideStatus === "started") && (
//               <View style={styles.driversCountOverlay}>
//                 <Text style={styles.driversCountText}>
//                   Your Driver is on the way
//                 </Text>
//               </View>
//             )}
//           </View>
//           {/* Driver Info Section */}
//           {acceptedDriver && (
//             <View style={styles.driverInfoContainer}>
//               <Text style={styles.driverInfoTitle}>Your Driver</Text>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="person" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.name}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="phone" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.driverMobile || 'N/A'}</Text>
//               </View>
//               <View style={styles.driverDetailsRow}>
//                 <MaterialIcons name="directions-car" size={20} color="#4CAF50" />
//                 <Text style={styles.driverDetailText}>{acceptedDriver.vehicleType}</Text>
//               </View>
//             </View>
//           )}
//           {/* Status Indicator */}
//           {/* ✅ ACTIVE RIDE: Show driver status based on actual ride status */}
//           {rideStatus === "onTheWay" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Driver is on the way
//                 {driverLocation && pickupLocation && (
//                   <Text style={styles.distanceText}>
//                     {"\n"}Estimated arrival: {calculateDistance(
//                       pickupLocation.latitude,
//                       pickupLocation.longitude,
//                       driverLocation.latitude,
//                       driverLocation.longitude
//                     ).toFixed(1)} km away
//                   </Text>
//                 )}
//               </Text>
//             </View>
//           )}
//           {rideStatus === "arrived" && (
//             <View style={[styles.driversCountOverlay, { backgroundColor: '#4CAF50' }]}>
//               <Text style={[styles.driversCountText, { color: '#FFFFFF' }]}>
//                 🎉 Driver Has Arrived!
//               </Text>
//             </View>
//           )}
//           {rideStatus === "started" && (
//             <View style={styles.driversCountOverlay}>
//               <Text style={styles.driversCountText}>
//                 Ride in Progress...
//               </Text>
//             </View>
//           )}
//           <View style={styles.inputContainer}>
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="my-location" size={20} color="#4CAF50" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter pickup location"
//                   value={pickup}
//                   onChangeText={handlePickupChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowPickupMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>Select on Map</Text>
//               </TouchableOpacity>
//             </View>
          
//             {showPickupSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {pickupLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : suggestionsError ? (
//                   <View style={styles.errorContainer}>
//                     <Text style={styles.errorText}>{suggestionsError}</Text>
//                   </View>
//                 ) : pickupSuggestions.length > 0 ? (
//                   pickupSuggestions.map((item) => (
//                     renderSuggestionItem(item, () => selectPickupSuggestion(item), item.id)
//                   ))
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}
          
//             <View style={styles.inputRow}>
//               <View style={styles.inputWrapper}>
//                 <View style={styles.inputIconContainer}>
//                   <MaterialIcons name="place" size={20} color="#F44336" />
//                 </View>
//                 <TextInput
//                   style={styles.input}
//                   placeholder="Enter dropoff location"
//                   value={dropoff}
//                   onChangeText={handleDropoffChange}
//                   placeholderTextColor="#999"
//                 />
//               </View>
//               <TouchableOpacity
//                 style={styles.selectMapButton}
//                 onPress={() => setShowDropoffMapModal(true)}
//               >
//                 <Text style={styles.selectMapButtonText}>Select on Map</Text>
//               </TouchableOpacity>
//             </View>
          
//             {showDropoffSuggestions && (
//               <View style={styles.suggestionsContainer}>
//                 {dropoffLoading ? (
//                   <View style={styles.loadingContainer}>
//                     <ActivityIndicator size="small" color="#4CAF50" />
//                     <Text style={styles.loadingText}>Loading suggestions...</Text>
//                   </View>
//                 ) : suggestionsError ? (
//                   <View style={styles.errorContainer}>
//                     <Text style={styles.errorText}>{suggestionsError}</Text>
//                   </View>
//                 ) : dropoffSuggestions.length > 0 ? (
//                   dropoffSuggestions.map((item) => (
//                     renderSuggestionItem(item, () => selectDropoffSuggestion(item), item.id)
//                   ))
//                 ) : (
//                   <View style={styles.noSuggestionsContainer}>
//                     <Text style={styles.noSuggestionsText}>No suggestions found</Text>
//                   </View>
//                 )}
//               </View>
//             )}
//           </View>
        
//           {(distance || travelTime) && (
//             <View style={styles.distanceTimeContainer}>
//               <View style={styles.distanceTimeItem}>
//                 <MaterialIcons name="route" size={18} color="#757575" />
//                 <Text style={styles.distanceTimeLabel}>DISTANCE:</Text>
//                 <Text style={styles.distanceTimeValue}>{distance || '---'}</Text>
//               </View>
//               <View style={styles.distanceTimeItem}>
//                 <MaterialIcons name="schedule" size={18} color="#757575" />
//                 <Text style={styles.distanceTimeLabel}>TRAVEL TIME:</Text>
//                 <Text style={styles.distanceTimeValue}>{travelTime || '---'}</Text>
//               </View>
//             </View>
//           )}
        
//           {apiError && (
//             <View style={styles.errorContainer}>
//               <Text style={styles.errorText}>{apiError}</Text>
//             </View>
//           )}
        
          
// <RideTypeSelector
//   selectedRideType={selectedRideType}
//   setSelectedRideType={handleRideTypeSelect}
//   estimatedPrice={estimatedPrice}
//   distance={distance}
//   dynamicPrices={dynamicPrices}
// />
        
//           <View style={styles.bookRideButtonContainer}>
//             <TouchableOpacity
//               style={[
//                 styles.bookRideButton,
//                 isBookRideButtonEnabled ? styles.enabledBookRideButton : styles.disabledBookRideButton,
//               ]}
//               onPress={handleBookRide}
//               disabled={!isBookRideButtonEnabled}
//             >
//               <Text style={styles.bookRideButtonText}>BOOK RIDE</Text>
//             </TouchableOpacity>
//           </View>
        
//           {showPricePanel && selectedRideType && (
//             <Animated.View
//               style={[
//                 styles.pricePanel,
//                 {
//                   transform: [{
//                     translateY: panelAnimation.interpolate({
//                       inputRange: [0, 1],
//                       outputRange: [300, 0],
//                     }),
//                   }],
//                 },
//               ]}
//             >
//               <View style={styles.panelHeader}>
//                 <Text style={styles.panelTitle}>Ride Details</Text>
//                 <TouchableOpacity onPress={() => setShowPricePanel(false)}>
//                   <MaterialIcons name="close" size={24} color="#666" />
//                 </TouchableOpacity>
//               </View>
//               <View style={styles.priceDetailsContainer}>
//                 <View style={styles.vehicleIconContainer}>
//                   {renderVehicleIcon(selectedRideType as 'bike' | 'taxi' | 'port', 40, '#000000')}
//                 </View>
//                 <View style={styles.priceInfoContainer}>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Pickup:</Text>
//                     <Text style={styles.priceValue} numberOfLines={1}>{pickup || 'Not selected'}</Text>
//                   </View>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Drop-off:</Text>
//                     <Text style={styles.priceValue} numberOfLines={1}>{dropoff || 'Not selected'}</Text>
//                   </View>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Distance:</Text>
//                     <Text style={styles.priceValue}>{distance || '---'}</Text>
//                   </View>
//                   <View style={styles.priceRow}>
//                     <Text style={styles.priceLabel}>Price:</Text>
//                     <Text style={styles.priceValue}>₹{estimatedPrice || '---'}</Text>
//                   </View>
//                   <View style={styles.returnTripRow}>
//                     <Text style={styles.priceLabel}>Return trip:</Text>
//                     <Switch
//                       value={wantReturn}
//                       onValueChange={setWantReturn}
//                       trackColor={{ false: '#767577', true: '#4CAF50' }}
//                       thumbColor={wantReturn ? '#FFFFFF' : '#FFFFFF'}
//                     />
//                   </View>
//                 </View>
//               </View>
//               <View style={styles.bookButtonContainer}>
//                 <TouchableOpacity
//                   style={styles.bookMyRideButton}
//                   onPress={handleBookRide}
//                 >
//                   <Text style={styles.bookMyRideButtonText}>BOOK MY RIDE</Text>
//                 </TouchableOpacity>
//               </View>
//             </Animated.View>
//           )}
        
//           <Modal
//             animationType="slide"
//             transparent={true}
//             visible={showConfirmModal}
//             onRequestClose={() => setShowConfirmModal(false)}
//           >
//             <View style={styles.modalOverlay}>
//               <View style={styles.modalContainer}>
//                 <View style={styles.modalHeader}>
//                   <Text style={styles.modalTitle}>Confirm Booking</Text>
//                   <TouchableOpacity onPress={() => setShowConfirmModal(false)}>
//                     <MaterialIcons name="close" size={24} color="#666" />
//                   </TouchableOpacity>
//                 </View>
//                 <View style={styles.modalContent}>
//                   <View style={styles.modalIconContainer}>
//                     <Ionicons name="checkmark-circle" size={60} color="#4CAF50" />
//                   </View>
//                   <Text style={styles.modalMessage}>
//                     Thank you for choosing EAZY GO!
//                   </Text>
//                   <Text style={styles.modalSubMessage}>
//                     Your ride has been successfully booked.
//                   </Text>
//                   <View style={styles.otpContainer}>
//                     <Text style={styles.otpLabel}>Your pickup OTP is:</Text>
//                     <Text style={styles.otpValue}>{bookingOTP}</Text>
//                   </View>
//                   <Text style={styles.otpWarning}>
//                     Please don't share it with anyone. Only share with our driver.
//                   </Text>
//                 </View>
//                 <View style={styles.modalButtons}>
//                   <TouchableOpacity
//                     style={styles.modalCancelButton}
//                     onPress={() => setShowConfirmModal(false)}
//                   >
//                     <Text style={styles.modalCancelButtonText}>Cancel</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={styles.modalConfirmButton}
//                     onPress={handleConfirmBooking}
//                   >
//                     <Text style={styles.modalConfirmButtonText}>Confirm</Text>
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             </View>
//           </Modal>
//           {/* Pickup Map Modal */}
//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showPickupMapModal}
//             onRequestClose={() => setShowPickupMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: pickupLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: pickupLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, true)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#4CAF50" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowPickupMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>
//           {/* Dropoff Map Modal */}
//           <Modal
//             animationType="slide"
//             transparent={false}
//             visible={showDropoffMapModal}
//             onRequestClose={() => setShowDropoffMapModal(false)}
//           >
//             <View style={styles.modalMapContainer}>
//               <MapView
//                 style={styles.modalMap}
//                 initialRegion={{
//                   latitude: dropoffLocation?.latitude || location?.latitude || fallbackLocation.latitude,
//                   longitude: dropoffLocation?.longitude || location?.longitude || fallbackLocation.longitude,
//                   latitudeDelta: 0.01,
//                   longitudeDelta: 0.01,
//                 }}
//                 onRegionChangeComplete={(region) => handleRegionChangeComplete(region, false)}
//               />
//               <View style={styles.centerMarker}>
//                 <MaterialIcons name="location-pin" size={48} color="#F44336" />
//               </View>
//               <TouchableOpacity
//                 style={styles.modalCloseButton}
//                 onPress={() => setShowDropoffMapModal(false)}
//               >
//                 <MaterialIcons name="close" size={24} color="#333" />
//               </TouchableOpacity>
//             </View>
//           </Modal>
//         </>
//       )}
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: { flex: 1, backgroundColor: '#F5F5F5' },
//   loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
//   loadingText: { color: '#757575', fontSize: 16, marginTop: 10 },
//   mapContainer: {
//     height: Dimensions.get('window').height * 0.4,
//     width: '100%',
//     borderRadius: 15,
//     overflow: 'hidden',
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   map: { ...StyleSheet.absoluteFillObject },
//   driversCountOverlay: {
//     position: 'absolute',
//     top: 289,
//     left: 3,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     paddingHorizontal: 12,
//     paddingVertical: 8,
//     borderRadius: 20,
//     elevation: 2,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.2,
//     shadowRadius: 2
//   },
//   driversCountText: { fontSize: 14, fontWeight: '600', color: '#333333' },
//   driverInfoContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   driverInfoTitle: {
//     fontSize: 16,
//     fontWeight: 'bold',
//     color: '#333333',
//     marginBottom: 10
//   },
//   driverDetailsRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   driverDetailText: {
//     fontSize: 14,
//     color: '#555555',
//     marginLeft: 10
//   },
//   statusContainer: {
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     marginHorizontal: 20,
//     marginBottom: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   statusIndicator: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     marginBottom: 8
//   },
//   statusText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#4CAF50',
//     marginLeft: 10
//   },
//   statusSubText: {
//     fontSize: 14,
//     color: '#757575',
//     textAlign: 'center'
//   },
//   inputContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   inputRow: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   inputWrapper: {
//     flex: 1,
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingHorizontal: 15,
//     paddingVertical: 5,
//   },
//   inputIconContainer: {
//     marginRight: 10,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   distanceText: {
//     fontSize: 12,
//     fontWeight: 'normal',
//     color: '#666666',
//   },
//   input: { flex: 1, fontSize: 16, paddingVertical: 12, color: '#333' },
//   selectMapButton: {
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     backgroundColor: '#4CAF50',
//     borderRadius: 5,
//     marginRight: 10,
//   },
//   selectMapButtonText: {
//     color: '#FFFFFF',
//     fontSize: 12,
//   },
//   suggestionsContainer: {
//     marginTop: 5,
//     marginHorizontal: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 8,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     maxHeight: 200
//   },
//   suggestionItem: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     paddingVertical: 12,
//     paddingHorizontal: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   suggestionIcon: { marginRight: 12 },
//   suggestionTextContainer: { flex: 1 },
//   suggestionMainText: { fontSize: 16, fontWeight: '500', color: '#333333' },
//   suggestionSubText: { fontSize: 12, color: '#757575', marginTop: 2 },
//   noSuggestionsContainer: { paddingVertical: 12, alignItems: 'center' },
//   noSuggestionsText: { fontSize: 14, color: '#666666' },
//   distanceTimeContainer: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 15,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   distanceTimeItem: { flexDirection: 'row', alignItems: 'center' },
//   distanceTimeLabel: { fontSize: 14, fontWeight: '600', color: '#757575', marginLeft: 8 },
//   distanceTimeValue: { fontSize: 14, fontWeight: 'bold', color: '#333333', marginLeft: 5 },
//   rideTypeContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//   },
//   rideTypeButton: {
//     width: '100%',
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 12,
//     padding: 5,
//     marginBottom: 10,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4
//   },
//   selectedRideTypeButton: {
//     backgroundColor: '#4caf50',
//     borderWidth: 2,
//     borderColor: '#4caf50'
//   },
//   rideIconContainer: {
//     marginRight: 15,
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   rideInfoContainer: {
//     flex: 1,
//   },
//   rideTypeText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#333333',
//     marginBottom: 4,
//   },
//   selectedRideTypeText: {
//     color: '#FFFFFF'
//   },
//   rideDetailsText: {
//     fontSize: 14,
//     color: '#757575',
//     marginBottom: 6,
//   },
//   selectedRideDetailsText: {
//     color: '#FFFFFF'
//   },
//   ridePriceText: {
//     fontSize: 14,
//     fontWeight: 'bold',
//     color: '#333333',
//   },
//   bookRideButtonContainer: {
//     marginHorizontal: 20,
//     marginBottom: 20
//   },
//   bookRideButton: {
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   enabledBookRideButton: { backgroundColor: '#4caf50' },
//   disabledBookRideButton: { backgroundColor: '#BDBDBD' },
//   bookRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   errorContainer: {
//     marginHorizontal: 20,
//     marginBottom: 15,
//     backgroundColor: '#FFEBEE',
//     borderRadius: 12,
//     padding: 15,
//     borderLeftWidth: 4,
//     borderLeftColor: '#F44336'
//   },
//   errorText: {
//     color: '#D32F2F',
//     fontSize: 14,
//     textAlign: 'center'
//   },
//   pricePanel: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     backgroundColor: '#FFFFFF',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     padding: 20,
//     maxHeight: Dimensions.get('window').height * 0.5,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: -3 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   panelHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//     paddingBottom: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#EEEEEE'
//   },
//   panelTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   priceDetailsContainer: {
//     flexDirection: 'row',
//     marginBottom: 8
//   },
//   driverMarkerContainer: {
//     alignItems: 'center',
//     justifyContent: 'center',
//     width: 50,
//     height: 50,
//   },
//   vehicleIconContainer: {
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     backgroundColor: '#4CAF50',
//     alignItems: 'center',
//     justifyContent: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   priceInfoContainer: {
//     flex: 1
//   },
//   priceRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 10
//   },
//   priceLabel: {
//     fontSize: 14,
//     fontWeight: '600',
//     color: '#757575',
//     flex: 1
//   },
//   priceValue: {
//     fontSize: 13,
//     fontWeight: 'bold',
//     color: '#333333',
//     flex: 2,
//     textAlign: 'right'
//   },
//   returnTripRow: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginTop: 5
//   },
//   bookButtonContainer: {
//     marginTop: 10
//   },
//   bookMyRideButton: {
//     backgroundColor: '#4CAF50',
//     paddingVertical: 15,
//     borderRadius: 12,
//     alignItems: 'center',
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 4
//   },
//   bookMyRideButtonText: {
//     color: '#FFFFFF',
//     fontSize: 16,
//     fontWeight: '600'
//   },
//   modalOverlay: {
//     flex: 1,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     justifyContent: 'center',
//     alignItems: 'center'
//   },
//   modalContainer: {
//     width: '85%',
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 20,
//     elevation: 10,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.2,
//     shadowRadius: 6
//   },
//   modalHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     color: '#333333'
//   },
//   modalContent: {
//     alignItems: 'center',
//     marginBottom: 20
//   },
//   modalIconContainer: {
//     marginBottom: 15
//   },
//   modalMessage: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     color: '#333333',
//     textAlign: 'center',
//     marginBottom: 5
//   },
//   modalSubMessage: {
//     fontSize: 16,
//     color: '#666666',
//     textAlign: 'center',
//     marginBottom: 20
//   },
//   otpContainer: {
//     backgroundColor: '#F5F5F5',
//     borderRadius: 10,
//     padding: 15,
//     alignItems: 'center',
//     marginBottom: 15,
//     width: '100%'
//   },
//   otpLabel: {
//     fontSize: 14,
//     color: '#666666',
//     marginBottom: 5
//   },
//   otpValue: {
//     fontSize: 24,
//     fontWeight: 'bold',
//     color: '#4caf50'
//   },
//   otpWarning: {
//     fontSize: 12,
//     color: '#F44336',
//     textAlign: 'center',
//     fontStyle: 'italic'
//   },
//   modalButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between'
//   },
//   modalCancelButton: {
//     flex: 1,
//     backgroundColor: '#F5F5F5',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginRight: 10,
//     alignItems: 'center'
//   },
//   modalCancelButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#666666'
//   },
//   modalConfirmButton: {
//     flex: 1,
//     backgroundColor: '#4CAF50',
//     paddingVertical: 12,
//     borderRadius: 10,
//     marginLeft: 10,
//     alignItems: 'center'
//   },
//   modalConfirmButtonText: {
//     fontSize: 16,
//     fontWeight: '600',
//     color: '#FFFFFF'
//   },
//   vehicleMarkerContainer: {
//     borderRadius: 20,
//     padding: 5,
//     elevation: 3,
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 1 },
//     shadowOpacity: 0.3,
//     shadowRadius: 2
//   },
//   modalMapContainer: {
//     flex: 1,
//     position: 'relative',
//   },
//   modalMap: {
//     flex: 1,
//   },
//   centerMarker: {
//     position: 'absolute',
//     top: '50%',
//     left: '50%',
//     transform: [{ translateX: -24 }, { translateY: -48 }],
//   },
//   modalCloseButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: '#FFFFFF',
//     borderRadius: 20,
//     padding: 8,
//     elevation: 3,
//   },
// });

// export default TaxiContent;